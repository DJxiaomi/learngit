<?php
/**
 * @copyright Copyright(c) 2011 hnlxsh
 * @file site.php
 * @brief
 * @author webning
 * @date 2011-03-22
 * @version 0.6
 * @note
 */
/**
 * @brief Site
 * @class Site
 * @note
 */

class Site extends IController
{
    public $layout='site';
    public $site_config = null;

	function init()
	{
		header( "Access-Control-Allow-Origin:*" );
        $this->site_config = new Config('site_config');
        signup_class::quick_signup();
	}
	
	function index()
	{
	    $siteConfigObj = new Config("site_config");
	    $site_config   = $siteConfigObj->getInfo();
	
	    // 首页轮播
	    $index_slide = Ad::getAdList(14);
	    $main_category_arr = array(1, 2, 4, 196, 6);

	    // 分类推荐模块内容
	    $index_category_list = array(
	        0 =>  array(
	            'ad'                      =>  Ad::getAdList(17),
	            //'goods_intro_list'        =>  goods_class::get_goods_seller_by_catid($main_category_arr[0], 6),
	            'hot_goods_intro_list'    =>  goods_class::get_hot_goods_seller_by_catid($main_category_arr[0], 7),
	            'cat'                     =>  $main_category_arr[0],
	            'catname'                 =>  '学前教育',
	            'catname2'                =>  '',
	            'module_style'            =>  'ConB',
	            'child_category'          =>  category_class::get_category_list_by_parent($main_category_arr[0]),
	        ),
	        array(
	            'ad'                      =>  Ad::getAdList(18),
	            //'goods_intro_list'        =>  goods_class::get_goods_seller_by_catid($main_category_arr[1], 6),
	            'hot_goods_intro_list'    =>  goods_class::get_hot_goods_seller_by_catid($main_category_arr[1], 7),
	            'cat'                     =>  $main_category_arr[1],
	            'catname'                 =>  '中小学',
	            'catname2'                =>  'Recommended Course',
	            'module_style'            =>  'ConC',
	            'child_category'          =>  category_class::get_category_list_by_parent($main_category_arr[1]),
	        ),
	        array(
	            'ad'                      =>  Ad::getAdList(19),
	            //'goods_intro_list'        =>  goods_class::get_goods_seller_by_catid($main_category_arr[2], 6),
	            'hot_goods_intro_list'    =>  goods_class::get_hot_goods_seller_by_catid($main_category_arr[2], 7),
	            'cat'                     =>  $main_category_arr[2],
	            'catname'                 =>  '文学艺术',
	            'catname2'                =>  'New Course',
	            'module_style'            =>  'ConD',
	            'child_category'          =>  category_class::get_category_list_by_parent($main_category_arr[2]),
	        ),
	        array(
	            'ad'                      =>  Ad::getAdList(20),
	            //'goods_intro_list'        =>  goods_class::get_goods_seller_by_catid($main_category_arr[3], 6),
	            'hot_goods_intro_list'    =>  goods_class::get_hot_goods_seller_by_catid($main_category_arr[3], 7),
	            'cat'                     =>  $main_category_arr[3],
	            'catname'                 =>  '益智体育',
	            'catname2'                =>  'New Course',
	            'module_style'            =>  'ConD',
	            'child_category'          =>  category_class::get_category_list_by_parent($main_category_arr[3]),
	        ),
	        array(
	            'ad'                      =>  Ad::getAdList(27),
	            //'goods_intro_list'        =>  goods_class::get_goods_seller_by_catid($main_category_arr[4], 6),
	            'hot_goods_intro_list'    =>  goods_class::get_hot_goods_seller_by_catid($main_category_arr[4], 7),
	            'cat'                     =>  $main_category_arr[4],
	            'catname'                 =>  '职业技能',
	            'catname2'                =>  'New Course',
	            'module_style'            =>  'ConD',
	            'child_category'          =>  category_class::get_category_list_by_parent($main_category_arr[4]),
	        ),
	    );
	    if ( $index_category_list )
	    {
	        foreach( $index_category_list as $kk => $vv )
	        {
	            foreach( $vv['goods_intro_list'] as $k => $v )
	            {
	                $length = 35;
	                $description = nl2br($v['description']);
	                $description = strip_tags($description);
	                $description = str_replace('\n','', $description);
	                $description = mb_substr($description, 0, 35, 'utf-8');
	                $index_category_list[$kk]['goods_intro_list'][$k]['description'] = $description;
	            }
	            
	            $goods_intro_arr = array();
	            $goods_intro_arr[] = goods_class::get_goods_seller_by_catid($vv['cat'], 6);
	            if ( $vv['child_category'] )
	            {
	                foreach( $vv['child_category'] as $k => $v )
	                {
	                    $goods_intro_arr[] = goods_class::get_goods_seller_by_catid($v['id'], 6);
	                }
	            }
	            // 处理商户介绍的内容
                if ( $goods_intro_arr )
                {
                    foreach( $goods_intro_arr as $k => $v )
                    {
                        if ( $v )
                        {
                            foreach( $v as $key => $val )
                            {
                                $length = 30;
                                $description = nl2br($val['description']);
                                $description = strip_tags($description);
                                $description = str_replace('\n','', $description);
                                $description = mb_substr($description, 0, $length, 'utf-8');
                                $goods_intro_arr[$k][$key]['description'] = $description;
                            }
                        }
                    }
                }
	            
	            $index_category_list[$kk]['goods_intro_list'] = $goods_intro_arr;
	        }
	    }
	
	    // 广告图栏目1
	    $ad_1 = Ad::getAdList(15);
	    $ad_1 = ( $ad_1 ) ? current( $ad_1 ) : array();
	
	    // 广告图栏目2
	    $ad_2 = Ad::getAdList(21);
	    $ad_2 = ( $ad_2 ) ? current( $ad_2 ) : array();
	
	    // 广告 - 商家推荐左侧广告栏
	    $ad_seller_intro = Ad::getAdList(16);
	    $ad_seller_intro = ( $ad_seller_intro ) ? current( $ad_seller_intro ) : array();
	
	    // 广告 - 手机端首页
	    $ad_mobile_list = Ad::getAdList(24);
	    $ad_slide_mobile_list = Ad::getAdList(26);
	
	    // 根据当前选择的地址获取商家列表ID
	    $where = db_create_in($this->seller_list, 'go.seller_id');
	
	    // 热卖商品推荐
	    $hot_goods = Commend_goods_class::get_commend_goods_list(3, 10);
	
	    // 最新商品推荐
	    $new_goods = Commend_goods_class::get_commend_goods_list(1, 112);
	    
	    // pc端底部随机读取商户的轮播	    
	    $ad_list = ad::get_rand_ad_list();
	
	
	    // 获取网站分类
	    $cate_list = category_class::get_site_category(0, 0);
	    
	    // 根据区域获取推荐的商户
	    $area_list = area::get_child_area_list(430200);
	    $arr = array(
	        'area_id'  =>  0,
	        'area_name'    => '全部',
	    );
	    array_unshift($area_list, $arr);
	    $shop_list = array();
	    
	    if ( $area_list )
	    {
	        foreach( $area_list as $kk => $vv )
	        {
	            if ( !$vv['area_id'])
	                $shop_list[$vv['area_id']] = seller_class::get_intro_shop_list_by_area_id($vv['area_id'], 200);
	            else
	               $shop_list[$vv['area_id']] = seller_class::get_intro_shop_list_by_area_id($vv['area_id']);
	        }
	    }
	    
	    if ( $shop_list )
	    {
	        foreach($shop_list as $kk => $vv )
	        {
	            foreach( $vv as $k => $v )
	            {
	                $length = 35;
	                $description = nl2br($v['description']);
	                $description = strip_tags($description);
	                $description = str_replace('\n','', $description);
	                if ( strlen($description) > $length )
	                   $shop_list[$kk][$k]['description'] = mb_substr($description, 0, 35, 'utf-8') . '...';
	                else 
	                   $shop_list[$kk][$k]['description'] = mb_substr($description, 0, 35, 'utf-8');
	            }
	        }
	    }
	
	    // 手机版最新课程
	    $latest_page_size = 10;
	    $latest_goods = goods_class::get_lastest_goods( 1, $latest_page_size );
	    $paging = $latest_goods['paging'];
	
	    // 变量赋值
	    $this->setRenderData(array(
	        'hot_goods'   =>  $hot_goods,
	        'new_goods'   =>  $new_goods,
	        'latest_goods'=>  JSON::encode( $latest_goods['result'] ),
	        'page'        =>  1,
	        'page_size'  =>  $latest_page_size,
	        'page_count'  =>  $paging->totalpage,
	        'cate_list'   =>  $cate_list,
	        'index_slide' =>  $index_slide,
	        'shop_list'   =>  $shop_list,
	        'area_list'   =>  $area_list,
	        'ad_1'        =>  $ad_1,
	        'ad_2'        =>  $ad_2,
	        'ad_seller_intro' =>  $ad_seller_intro,
	        'index_category_list' =>  $index_category_list,
	        'ad_mobile_list' =>  $ad_mobile_list,
	        'ad_slide_mobile_list' => $ad_slide_mobile_list,
	        'ad_list'      =>  $ad_list,
	        'seo_data'     =>  array(
	            'title'    =>  $this->site_config->index_seo_title,
	            'keywords' =>  $this->site_config->index_seo_keywords,
	            'description'  =>  $this->site_config->index_seo_description,
	        ),
	    ));
	    
	    $this->iswechat = 0;
	    if(IClient::isWechat())
	    {
	        $this->iswechat = 0;
	        //jssdk::setAppid('wx72fc7befef40f55a');
	        //jssdk::setAppSecret('acc1eb5e4531f811612e390111389f88');
	        $signPackage = jssdk::GetSignPackage();
	        $this->signPackage = $signPackage;
	    }
	    $this->title = '首页';
	    $this->index = 1;
	    $this->redirect('index');
	}

	//[首页]商品搜索
	function search_list()
	{
		$this->word = IFilter::act(IReq::get('word'),'text');
		$this->word = urldecode($this->word);
		$cat_id     = IFilter::act(IReq::get('cat'),'int');

		if(preg_match("|^[\w\x7f\s*-\xff*]+$|",$this->word))
		{
			//搜索关键字
			$tb_sear     = new IModel('search');
			$search_info = $tb_sear->getObj('keyword = "'.$this->word.'"','id');

			//如果是第一页，相应关键词的被搜索数量才加1
			if($search_info && intval(IReq::get('page')) < 2 )
			{
				//禁止刷新+1
				$allow_sep = "30";
				$flag = false;
				$time = ICookie::get('step');
				if(isset($time))
				{
					if (time() - $time > $allow_sep)
					{
						ICookie::set('step',time());
						$flag = true;
					}
				}
				else
				{
					ICookie::set('step',time());
					$flag = true;
				}
				if($flag)
				{
					$tb_sear->setData(array('num'=>'num + 1'));
					$tb_sear->update('id='.$search_info['id'],'num');
				}
			}
			elseif( !$search_info )
			{
				//如果数据库中没有这个词的信息，则新添
				$tb_sear->setData(array('keyword'=>$this->word,'num'=>1));
				$tb_sear->add();
			}
		}
		else
		{
			IError::show(403,'请输入正确的查询关键词');
		}
		$this->cat_id = $cat_id;
		$this->redirect('search_list');
	}

	//[site,ucenter头部分]自动完成
	function autoComplete()
	{
		$word = IFilter::act(IReq::get('word'));
		$isError = true;
		$data    = array();

		if($word != '' && $word != '%' && $word != '_')
		{
			$wordObj  = new IModel('keyword');
			$wordList = $wordObj->query('word like "'.$word.'%" and word != "'.$word.'"','word, goods_nums','',10);

			if(!empty($wordList))
			{
				$isError = false;
				$data = $wordList;
			}
		}

		//json数据
		$result = array(
			'isError' => $isError,
			'data'    => $data,
		);

		echo JSON::encode($result);
	}

	//[首页]邮箱订阅
	function email_registry()
	{
		$email  = IReq::get('email');
		$result = array('isError' => true);

		if(!IValidate::email($email))
		{
			$result['message'] = '请填写正确的email地址';
		}
		else
		{
			$emailRegObj = new IModel('email_registry');
			$emailRow    = $emailRegObj->getObj('email = "'.$email.'"');

			if(!empty($emailRow))
			{
				$result['message'] = '此email已经订阅过了';
			}
			else
			{
				$dataArray = array(
					'email' => $email,
				);
				$emailRegObj->setData($dataArray);
				$status = $emailRegObj->add();
				if($status == true)
				{
					$result = array(
						'isError' => false,
						'message' => '订阅成功',
					);
				}
				else
				{
					$result['message'] = '订阅失败';
				}
			}
		}
		echo JSON::encode($result);
	}

	//[列表页]商品
	function pro_list()
	{
		$id=intval(IReq::get('id'));
	    $keyword = IFilter::act(IReq::get('word'),'text');
	    $page = intval(IReq::get('page'));
	    $page = max( $page, 1 );
	    $this->catId = IFilter::act(IReq::get('cat'),'int');//分类id
	    $this->catStr = '' . $this->catId;
	    $catname = $areaname = '';
	    $category_id = IFilter::act(IReq::get('category'),'int'); //学校分类
	    
	    if ( $this->catId )
	    {
    		//查找分类信息
    		$catObj       = new IModel('category');
    		$this->cat_info = $catObj->getObj('id = '.$this->catId);
    
    		if($this->cat_info == null)
    		{
    			IError::show(403,'此分类不存在');
    		}
    		
    		//获取子分类
    		$this->childId = goods_class::catChild($this->catId);
    		$cat_list = goods_class::catTree($this->catId);
	    } else {
	        $cat_list2 = category_class::get_category_list_by_parent(0);
	    }
	    
	    $brand_arr = array();
	    if ( $category_id )
	    {
	        if ( $category_id == 16)
	        {
	            header("location: " . IUrl::creatUrl('/site/tutor'));
	            exit();
	        }
	        $brand_db = new IQuery('brand');
	        //$brand_db->join = 'left join seller as s on b.id = s.brand_id';
	        $brand_db->where = "category_ids = '$category_id'";
	        $brand_db->fields = 'id';
	        $brand_list = $brand_db->find();
	        if ( $brand_list )
	        {
	            foreach( $brand_list as $kk => $vv )
	            {
	                $brand_arr[] = $vv['id'];
	            }
	        }
	    }
	    
	    // 搜索关键词的处理 added by jack 20160617
	    if(preg_match("|^[\w\x7f\s*-\xff*]+$|",$keyword ))
	    {
	        //搜索关键字
	        $tb_sear     = new IModel('search');
	        $search_info = $tb_sear->getObj('keyword = "'.$keyword.'"','id');
	         
	        //如果是第一页，相应关键词的被搜索数量才加1
	        if($search_info && $page < 2 )
	        {
	            //禁止刷新+1
	            $allow_sep = "30";
	            $flag = false;
	            $time = ICookie::get('step');
	            if(isset($time))
	            {
	                if (time() - $time > $allow_sep)
	                {
	                    ICookie::set('step',time());
	                    $flag = true;
	                }
	            } else {
	                ICookie::set('step',time());
	                $flag = true;
	            }
	            if($flag)
	            {
	                $tb_sear->setData(array('num'=>'num + 1'));
	                $tb_sear->update('id='.$search_info['id'],'num');
	            }
	        }
	        elseif( !$search_info )
	        {
	            //如果数据库中没有这个词的信息，则新添
	            $tb_sear->setData(array('keyword'=>$keyword,'num'=>1));
	            $tb_sear->add();
	        }

	    }
	    
	    //区域
	    $area_id = IFilter::act(IReq::get('area'), 'int');
	    $seller_arr = array();
	    if ( $area_id )
	    {
	        $seller_db = new IQuery('seller');
	        $seller_db->where = 'area = ' . $area_id;
	        $seller_db->fields = 'id,type';
	        $seller_list = $seller_db->find();
	        if ( $seller_list )
	        {
	            foreach( $seller_list as $kk => $vv )
	            {
	                if ( !in_array( $vv['id'], $seller_arr ))
	                    $seller_arr[] = $vv['id'];
	            }
	        }
	    }

	    if($this->catId)
	    {
	    	$categoryModel = new IModel('category');
	    	$cat = $categoryModel->getObj("id = '$this->catId'", 'name');
	    	$catname = $cat['name'];
	    }
	    if($area_id)
	    {
	    	$areaModel = new IModel('areas');
	    	$area = $areaModel->getObj("id = '$area_id'", 'area_name');
	    	$areaname = $area['area_name'];
	    }
	    
	    //$where = db_create_in($this->seller_list, 'go.seller_id');
	    $where = ' 1 = 1';
	    
	    // 添加分类的条件
	    if ( $this->childId )
	        $where .= " and go.id in (select distinct goods_id from category_extend where category_id in (". $this->childId .") )";
	    
	    //添加区域的条件
	    if ( $seller_arr )
	        $where .= ' and ' .db_create_in( $seller_arr, 'go.seller_id');
	    
	    // 添加学校分类的条件
	    if ( $brand_arr )
	        $where .= ' and ' . db_create_in( $brand_arr, 's.brand_id');
	    
	    //添加关键词的条件
	    if ( $keyword )
	    {

	    	$dev_keyword = mb_convert_encoding($keyword, "GBK" , "UTF-8");

	    	require 'resource/pscws4/pscws4.class.php';

	    	$cws = new PSCWS4('gbk');
			$cws->set_dict('resource/pscws4/dict/dict.xdb');
			$cws->set_rule('resource/pscws4/etc/rules.ini');

			$cws->send_text($dev_keyword);

			$keywordsArr = '';
			while ($tmp = $cws->get_result())
			{	
				foreach ($tmp as $w)
				{
					$keywordsArr[] = mb_convert_encoding($w['word'] , "UTF-8", "GBK");
				}

			}
// dump($keywordsArr);
			if(count($keywordsArr) > 1){
				$category_list = category_class::category_handle($keywordsArr);
			}else{
				$category_db = new IQuery('category');
		        $category_db->where = " name like '%$keyword%' and visibility = 1 and seller_id = 0";
		        $category_list = $category_db->find();
			}
			
	        // 处理关键词分类 like
	        /*$category_db = new IQuery('category');
	        $category_db->where = " name like '%$keyword%' and visibility = 1 and seller_id = 0";
	        $category_list = $category_db->find();*/
	        if ( $category_list )
	        {
	            $str = '';
	            foreach( $category_list as $kk => $vv )
	            {
	                $str .= ( !$str ) ? category_class::get_child_category( $vv['id'] ) : ',' . category_class::get_child_category( $vv['id'] );
	            }
	    
	            $cate_ids = explode(',', $str );
	            if ( $cate_ids )
	            {
	                $category_ex_db = new IQuery('category_extend ce');
	                $category_ex_db->where = db_create_in( $cate_ids, 'category_id');
	                $category_list = $category_ex_db->find();
	                $goods_id_arr = array();
	                if ( $category_list )
	                {
	                    foreach( $category_list as $kk => $vv )
	                    {
	                        if ( !in_array( $vv['goods_id'], $goods_id_arr ))
	                            $goods_id_arr[] = $vv['goods_id'];
	                    }
	                }
	            }
	    
	            if ( $goods_id_arr )
	            {
	                $where_cates = ' or ' . db_create_in($goods_id_arr, 'go.id');
	            }
	        }
	    
	        // 处理店铺标题 like
	        $seller_db = new IQuery('seller');
	        $seller_db->where = "true_name like '%$keyword%'";
	        $seller_list = $seller_db->find();
	        if( $seller_list )
	        {
	            $goods_ids = array();
	            foreach( $seller_list as $kk => $vv )
	            {
	                $list = goods_class::get_goods_list_by_seller_id($vv['id']);
	                if ( $list )
	                {
	                    foreach( $list as $kk => $vv )
	                    {
	                        if( !in_array( $vv['id'], $goods_ids ))
	                            $goods_ids[]  = $vv['id'];
	                    }
	                }
	            }
	    
	            $where_seller = ' or ' . db_create_in($goods_ids, 'go.id');
	        }
	        
	        // 处理属性模糊匹配，全文字匹配，效率低下
	        $goods_attribute_db = new IQuery('goods_attribute');
	        $goods_attribute_db->where = "attribute_value like '%$keyword%'";
	        $goods_list = $goods_attribute_db->find();
	        if ( $goods_list )
	        {
	            $goods_ids = array();
	            foreach($goods_list as $kk => $vv )
	            {
	                if (!in_array($vv['goods_id'], $goods_ids))
	                    $goods_ids[] = $vv['goods_id'];
	            }
	            $where_attribute = ' or ' . db_create_in($goods_ids, 'go.id');
	        }
	    
	        // 名称或者关键词
	        // $where .= " and ( go.name like '%$keyword%' or go.keywords like '%$keyword%' $where_cates $where_seller )";
	        // 
	        $w_str = $k_str = "(";
	        foreach($keywordsArr as $k => $v){
	        	if( $k != 0 ){
	        		$w_str .= ' and ';
	        		$k_str .= ' and ';
	        	}
	        	$w_str .= "go.name like '%$v%'";
	        	$k_str .= "go.keywords like '%$v%'";
	        }
	        $w_str .= ')';
	        $k_str .= ')';

	        $where .= " and ( " . $w_str . " or " . $k_str . " $where_cates $where_seller )";
	    }
	    
	    // 处理brand分类的问题
	    $brand_db = new IQuery('brand as b');
	    $brand_db->join = 'left join seller as s on s.brand_id = b.id';
	    $brand_db->fields = 's.id';
	    $brand_db->where = 'b.category_ids != 16';
	    $brand_list = $brand_db->find();
	    $seller_ids = array();
	    if ( $brand_list )
	    {
	        foreach( $brand_list as $kk => $vv )
	        {
	            if ( !in_array($seller_ids, $vv['id']))
	                $seller_ids[] = $vv['id'];
	        }
	    }
	    if ( $seller_ids )
	    {
	        $where_seller2 = db_create_in($seller_ids, 'go.seller_id');
	        $where .= ' and ' . $where_seller2;
	    }

	    $goodsObj = search_goods::find2( $where, 15 );
	    $resultData = $goodsObj->find();
	    
	    $ajax_url = $_SERVER['REQUEST_URI'];
	    $ajax_url = str_replace('pro_list', 'get_pro_list_ajax', $ajax_url );
	    $ajax_url = str_replace('/index.php', '', $ajax_url );
	    $price_list = search_goods::$priceSearch;
	    if ( $price_list )
	    {
	        foreach($price_list AS $idx => $price)
	        {
	            $prices = explode('-', $price[0]);
	            $price_list[$idx]['min_price'] = $prices[0];
	            $price_list[$idx]['max_price'] = $prices[1];
	        }
	    }

	    // update category for mobile
	    $jsoncat = array();
	    $cat_db = new IQuery('category');
        $cat_db->where = "parent_id = '0'";
        $cats = $cat_db->find();
    	foreach($cats AS $idx => $cat)
    	{
    		$jsoncat[$idx]['value'] = $cat['id'];
    		$jsoncat[$idx]['text'] = $cat['name'];
    		$son_cat_db = new IQuery('category');
        	$son_cat_db->where = "parent_id = '$cat[id]'";
    		$sons = $son_cat_db->find();
    		foreach($sons AS $k => $son)
    		{
    			$jsoncat[$idx]['children'][$k]['value'] = $son['id'];
    			$jsoncat[$idx]['children'][$k]['text'] = $son['name'];
    		}
    	}

	    
	    $paging = $goodsObj->paging;
	    
	    // seo操作
	    $delimiter = '-';
	    $this->title = $catname ? $catname : '课程列表';
	    $title = ($this->cat_info) ? $this->cat_info['name'] : $keyword;
	    $keywords_arr = array();
	    if ( $cat_list )
	    {
	        foreach( $cat_list as $kk => $vv )
	        {
	            $keywords_arr[] = $vv['name'];
	        }
	    }
	    $keywords = implode($delimiter, $keywords_arr );
	    $shop_str = '';
	    $shop_arr = array();
// 	    if ( $resultData )
// 	    {
// 	        foreach( $resultData as $kk => $vv )
// 	        {
// 	            if ( !in_array( $vv['seller']['true_name'], $shop_arr ))
// 	                $shop_arr[] = $vv['seller']['true_name'];
// 	        }
// 	        $shop_str = implode($delimiter, $shop_arr );
// 	    }
	    $navigation_list = $this->get_navigation_list($this->cat_info['name']);
	    $navigation_str = implode($delimiter, $navigation_list);
	    
	    if ( $resultData )
	    {
	        foreach( $resultData as $kk => $vv )
	        {
	            $content = $vv['content'];
	            if ( $content )
	            {
	                $content = str_replace(array('\r','\n','\r\n'), '', strip_tags($vv['content']));
	                $content = mb_substr($content, 0, 20, 'utf-8');
	                $resultData[$kk]['content'] = $content;
	                $resultData[$kk]['category_str'] = Category_extend_class::get_category_name_by_store( $vv['id'] );                
	            }
	            if ( $vv['brand_id'] )
	            {
	                $brand_info = brand_class::get_brand_info($vv['brand_id']);
	                $length = 35;
	                $description = nl2br($brand_info['description']);
	                $description = strip_tags($description);
	                $description = str_replace('\n','', $description);
	                $description = mb_substr($description, 0, 35, 'utf-8');
	                $resultData[$kk]['description'] = $description;
	            }
	        }
	    }
	    
	    $this->setRenderData(array(
	        'resultData' => $resultData,
	        'goodsObj'   => $goodsObj,
	        'id'         => $id,
	        //'area_list'  => search_goods::$areaSearch,
	        'area_id'    => $area_id,
	        'price_list'  => $price_list,
	        'word'       => $keyword,
	        'catname'       => $catname,
	        'areaname'       => $areaname,
	        'cat_list'   => $cat_list,
	        'cat_list2'    =>  $cat_list2,
	        'jsoncats'   => json_encode($jsoncat),
	        'page'          =>  $page,
	        'page_size'     =>  $paging->pagesize,
	        'page_count'    =>  $paging->totalpage,
	        'ajax_url'      =>  $ajax_url,
	        'category_id'  =>  $category_id,
	        'seo_data'     =>  array(
	            'title'    =>  $this->site_config->index_seo_title . '-' . $title . '('. $navigation_str . ')',
	            'keywords' =>  $this->get_city() . '-' . $keywords,
	            'description'  =>  '乐享生活' . $this->get_city() . '的' . $title . '板块包含（' . $shop_str . '）教育培训机构，您可以选择它们的课程报名学习。',
	        ),
	    ));
	    
	    $this->redirect('pro_list');
	}

	function chit()
	{
	    $page_size = 12;
	    $seller_chit_list = brand_chit_class::get_seller_chit_list();
	    $page = IFilter::act(IReq::get('page'),'int');
	    $seller_id = IFilter::act(IReq::get('seller_id'),'int');
	    $where = '';
	    if($seller_id)
	    {
	    	$where = " AND seller_id = '$seller_id'";
	    }
	    $page = max( $page, 1 );
		$this->title = '学习券购买';
		$chit_list_db = brand_chit_class::get_chit_list_db($where);
		$chit_list_db->order = 'sort asc,id desc';
		$chit_list = $chit_list_db->find();
		$chit_list = array_merge( $chit_list, $seller_chit_list );
		$list_count = sizeof( $chit_list);
		$chit_list = array_chunk( $chit_list, $page_size );
		$chit_list = $chit_list[$page - 1];
		if ( $chit_list )
		{
		    foreach( $chit_list as $kk => $vv )
		    {
		        $seller_info = seller_class::get_seller_info($vv['seller_id']);
		        $chit_list[$kk]['seller_info'] = $seller_info;
		    }
		}
		
		// 手动分页信息
		IPaging::getPageInfo($list_count, $page_size, $page);
		$page_info = IPaging::getPageBar();
		
		$this->setRenderData(array(
	        'seller_id'   =>  $seller_id,
		    'page_info'   =>  $page_info,
	    ));
		$this->chit_list = $chit_list;
		$this->redirect('chit');
	}
	
	
	function chit2()
	{
	    $page_size = 12;
	    //$seller_chit_list = brand_chit_class::get_seller_chit_list();
	    $seller_chit_list = array();
	    $page = IFilter::act(IReq::get('page'),'int');
	    //$seller_id = IFilter::act(IReq::get('seller_id'),'int');
	    $seller_id = 366;
	    $where = '';
	    if($seller_id)
	    {
	        $where = " AND seller_id = '$seller_id'";
	    }
	    $page = max( $page, 1 );
	    $this->title = '学习券购买';
	    $chit_list_db = brand_chit_class::get_chit_list_db($where);
	    $chit_list_db->order = 'sort asc,id desc';
	    $chit_list = $chit_list_db->find();
	    $chit_list = array_merge( $chit_list, $seller_chit_list );
	    $list_count = sizeof( $chit_list);
	    $chit_list = array_chunk( $chit_list, $page_size );
	    $chit_list = $chit_list[$page - 1];
	    if ( $chit_list )
	    {
	        foreach( $chit_list as $kk => $vv )
	        {
	            $seller_info = seller_class::get_seller_info($vv['seller_id']);
	            $chit_list[$kk]['seller_info'] = $seller_info;
	            preg_match('/\d+/',$chit_list[$kk]['limitinfo'],$arr);
	            $chit_list[$kk]['amount'] = $arr[0];
	        }
	    }
	
	    // 手动分页信息
	    IPaging::getPageInfo($list_count, $page_size, $page);
	    $page_info = IPaging::getPageBar();
	
	    $this->setRenderData(array(
	        'seller_id'   =>  $seller_id,
	        'page_info'   =>  $page_info,
	    ));
	    $this->chit_list = $chit_list;
	    $this->redirect('chit2');
	}

	function get_chit_list_ajax()
	{
		$chitDB = new IQuery('brand_chit');
		$brandDB = new IModel('brand');
		$nowtime = time();
		$page = intval(IReq::get('page'));
		$seller_id = IFilter::act(IReq::get('seller_id'),'int');
	    $page = max( $page, 1 );
	    $perpage = 10;

	    $where = "limittime >= '$nowtime'";
	    if($seller_id)
	    {
	    	$where .= " AND seller_id = '$seller_id'";
	    }
	    //$chitDB->page     = $page;
	    //$chitDB->pagesize = $perpage;
		$chitDB->where = $where;
	    $chitDB->fields = '*';
	    $chitDB->order = 'sort asc,id desc';
	    $chits = $chitDB->find();
	    $seller_chit_list = brand_chit_class::get_seller_chit_list($seller_id);
	    $chits = array_merge( $chits, $seller_chit_list );
	    $chits = array_chunk( $chits, $perpage );
	    $chits = $chits[$page - 1];
	    //$chits['num'] = count($chits);

		foreach($chits AS $idx => $chit)
		{
		    if ( !isset($chit['shortname']))
		    {
		        $brand = $brandDB->getObj("id = '$chit[brand_id]'", 'shortname');
		        $chits[$idx]['shortname'] = $brand['shortname'];
		    }

		    if ( is_array( $chit ))
		    {
		        $chits[$idx]['limittime'] = date('Y-m-d', $chit['limittime']);
		        $chits[$idx]['limitinfo'] = empty($chit['limitinfo']) ? '' : $chit['limitinfo'];
		        preg_match('/\d+/',$chits[$idx]['limitinfo'],$arr);
	            $chits[$idx]['amount'] = $arr[0];
		    }
		}
		
		$chits['num'] = sizeof( $chits );
		$chits['page'] = $page + 1;



		echo json_encode($chits);
	}

	function chit_show()
	{
		$id = intval(IReq::get('id'));
		$chit = brand_chit_class::get_chit_info($id);
		
		if ( !$chit['id'] )
		{
		    IError::show(403, '该代金券可能已被删除');
		    exit();
		}
		$chit['limittime'] = date('Y-m-d', $chit['limittime']);
		$chit['content'] = str_replace('\r\n','<br />', $chit['content']);
		preg_match('/\d+/',$chit['limitinfo'],$arr);
		$chit['amount'] = $arr[0];
		$this->setRenderData(array(
            'chit'    =>  $chit
        ));
		$this->title = '详细信息';
		$this->redirect('chit_show');
	}

	function get_pro_list_ajax()
	{
	    $id=intval(IReq::get('id'));
	    $keyword = IFilter::act(IReq::get('word'),'text');
	    // $keyword = '';
	    $page = intval(IReq::get('page'));
	    $page = max( $page, 1 );
	    $perpage = 10;
	    $this->catId = IFilter::act(IReq::get('cat'),'int');//分类id
	    $this->catStr = '' . $this->catId;

	    if($this->catId || $_GET['attr']){
		    $keyword = '';
		}
	     
	    if ( $this->catId )
	    {
	        //查找分类信息
	        $catObj       = new IModel('category');
	        $this->cat_info = $catObj->getObj('id = '.$this->catId);
	    
	        if($this->cat_info == null)
	        {
	            IError::show(403,'此分类不存在');
	        }
	    
	        //获取子分类
	        $this->childId = goods_class::catChild($this->catId);
	        $cat_list = goods_class::catTree($this->catId);
	    }
	     
	    // 搜索关键词的处理 added by jack 20160617
	    if(preg_match("|^[\w\x7f\s*-\xff*]+$|",$keyword ))
	    {
	        //搜索关键字
	        $tb_sear     = new IModel('search');
	        $search_info = $tb_sear->getObj('keyword = "'.$keyword.'"','id');
	         
	        //如果是第一页，相应关键词的被搜索数量才加1
	        if($search_info && $page < 2 )
	        {
	            //禁止刷新+1
	            $allow_sep = "30";
	            $flag = false;
	            $time = ICookie::get('step');
	            if(isset($time))
	            {
	                if (time() - $time > $allow_sep)
	                {
	                    ICookie::set('step',time());
	                    $flag = true;
	                }
	            } else {
	                ICookie::set('step',time());
	                $flag = true;
	            }
	            if($flag)
	            {
	                $tb_sear->setData(array('num'=>'num + 1'));
	                $tb_sear->update('id='.$search_info['id'],'num');
	            }
	        }
	        elseif( !$search_info )
	        {
	            //如果数据库中没有这个词的信息，则新添
	            $tb_sear->setData(array('keyword'=>$keyword,'num'=>1));
	            $tb_sear->add();
	        }
	    }
	    
	    //区域
	    $area_id = IFilter::act(IReq::get('area'), 'int');
	    $seller_arr = array();
	    if ( $area_id )
	    {
	        $seller_db = new IQuery('seller');
	        $seller_db->where = 'area = ' . $area_id;
	        $seller_db->fields = 'id';
	        $seller_list = $seller_db->find();
	        if ( $seller_list )
	        {
	            foreach( $seller_list as $kk => $vv )
	            {
	                if ( !in_array( $vv['id'], $seller_arr ))
	                    $seller_arr[] = $vv['id'];
	            }
	        }
	    }
	    
	    //$where = db_create_in($this->seller_list, 'go.seller_id');
	    $where = "1=1";
	    
	    // 添加分类的条件
	    if ( $this->childId )
	        $where .= " and go.id in (select distinct goods_id from category_extend where category_id in (". $this->childId .") )";
	    
	    //添加区域的条件
	    if ( $seller_arr )
	        $where .= ' and ' .db_create_in( $seller_arr, 'go.seller_id');
	    
	    //添加关键词的条件
	    if ( $keyword )
	        $where .= " and go.search_words like '%$keyword%'";
	    
	    // 处理brand分类的问题
	    $brand_db = new IQuery('brand as b');
	    $brand_db->join = 'left join seller as s on s.brand_id = b.id';
	    $brand_db->fields = 's.id';
	    $brand_db->where = 'b.category_ids != 16';
	    $brand_list = $brand_db->find();
	    $seller_ids = array();
	    if ( $brand_list )
	    {
	        foreach( $brand_list as $kk => $vv )
	        {
	            if ( !in_array($seller_ids, $vv['id']))
	                $seller_ids[] = $vv['id'];
	        }
	    }
	    if ( $seller_ids )
	    {
	        $where_seller2 = db_create_in($seller_ids, 'go.seller_id');
	        $where .= ' and ' . $where_seller2;
	    }
	    
	    $goodsObj = search_goods::find2( $where, $perpage );
	    $resultData = $goodsObj->find();
	    
	    if( $resultData )
	    {
	        foreach( $resultData as $kk => $vv )
	        {
	        	//$price = goods_class::get_min_max_price_by_goods_id($vv['id']);
	        	$resultData[$kk]['logo'] = IUrl::creatUrl('/pic/thumb/img/' . $vv['logo'] . '/w/100/h/100');
	        	$resultData[$kk]['category_str'] = Category_extend_class::get_category_name_by_store( $vv['id'] );
	        	unset($resultData[$kk]['password']);
	        }
	        $resultData['num'] = count($resultData);
	    	$resultData['page'] = $page + 1;
	    }
	    else
	    {
	    	$resultData['num'] = 0;
	    	$resultData['page'] = 1;
	    }
	    echo json_encode($resultData);
	}

	function transfer_list()
	{	    	    
	    $page_size = 15;
        $page = max( $page, 1 );
        
        $transModel = new IQuery('transfer');
        $transModel->where = "state = '0'";
        $transModel->limit = $page_size;
        $transModel->order = 'addtime desc';
        $transModel->page = $page;
        $transfer_list = $transModel->find();
        $userDB = new IModel('user');
        foreach($transfer_list AS $idx => $transfer)
        {
            $sellerDB = new IModel('seller');
            $seller = $sellerDB->getObj('id = '.$transfer['seller_id']);
            $goodsDB = new IModel('goods');
            $goods = $goodsDB->getObj('id = '.$transfer['goods_id']);
            $user = $userDB->getObj('id = '.$transfer['uid']);
            $transfer_list[$idx]['seller'] = $seller;
            $transfer_list[$idx]['goods'] = $goods;
            $transfer_list[$idx]['addtime'] = date('Y-m-d', $transfer['addtime']);
            $transfer_list[$idx]['username'] = $user['username'];
        }

        $this->title = '课程转让';
        $this->setRenderData(array(
            'transfer_list'    =>  $transfer_list,
            'page_info'     =>  $transModel->getPageBar(),
            'title'    =>  '转让列表'
        ));
		
		$this->redirect('transfer_list');
	}

	function transfer_show()
	{
		$id = IFilter::act(IReq::get('id'),'int');

		if(!$id)
		{
			IError::show(403,"传递的参数不正确");
			exit;
		}

		//使用商品id获得商品信息
		$transferModel = new IModel('transfer');
		$transfer = $transferModel->getObj('id='.$id);
		if(!$transfer)
		{
			IError::show(403,"转让信息不存在");
			exit;
		}

		$userDB = new IModel('user');
		$user = $userDB->getObj('id = '.$transfer['uid']);
		$transfer['username'] = $user['username'];
		//获取商家信息
		if($transfer['seller_id'])
		{
			$sellerDB = new IModel('seller');
			$transfer['seller'] = $sellerDB->getObj('id = '.$transfer['seller_id']);
			$transfer['seller']['location'] = area::name($transfer['seller']['province'],$transfer['seller']['city'],$transfer['seller']['area']);
			$transfer['seller']['telephone'] = !empty($transfer['seller']['mobile']) ? $transfer['seller']['mobile'] : $transfer['seller']['phone'];
		}

		$tb_goods = new IModel('goods');
		$goods_info = $tb_goods->getObj('id='.$transfer['goods_id']." AND is_del=0");

		$goods_info['category'] = Category_extend_class::get_category_by_goods_id( $goods_info['id'] );
		//商品图片
		$tb_goods_photo = new IQuery('goods_photo_relation as g');
		$tb_goods_photo->fields = 'p.id AS photo_id,p.img ';
		$tb_goods_photo->join = 'left join goods_photo as p on p.id=g.photo_id ';
		$tb_goods_photo->where =' g.goods_id='.$transfer['goods_id'];
		$goods_info['photo'] = $tb_goods_photo->find();
		foreach($goods_info['photo'] as $key => $val)
		{
			//对默认第一张图片位置进行前置
			if($val['img'] == $goods_info['img'])
			{
				$temp = $goods_info['photo'][0];
				$goods_info['photo'][0] = $val;
				$goods_info['photo'][$key] = $temp;
			}
		}
		
		if ( $goods_info['photo'] )
		{
		    foreach( $goods_info['photo'] as $kk => $vv )
		    {
		        if ( substr( $vv['img'], 0, 6) == 'upload')
		        {
		            $goods_info['photo'][$kk]['img'] = '/' . $vv['img'];
		        }
		    }
		}
		
		if ( $goods_info['photo'] )
		{
		    $photo_arr = array();
		    foreach( $goods_info['photo'] as $kk => $vv )
		    {
		        $photo_arr[]['img'] = $vv['img'];
		    }
		    
		    $goods_info['photo_json'] = json_encode( $photo_arr );
		}

		if ( $goods_info['course_imgs'] )
		{
		    $goods_info['course_imgs_arr'] = explode(',', $goods_info['course_imgs'] );
		}
		if ( $goods_info['students_imgs'] )
		{
		    $goods_info['students_imgs_arr'] = explode(',', $goods_info['students_imgs'] );
		}
		
		//获得扩展属性
		$tb_attribute_goods = new IQuery('goods_attribute as g');
		$tb_attribute_goods->join  = 'left join attribute as a on a.id=g.attribute_id ';
		$tb_attribute_goods->fields=' a.name,g.attribute_value ';
		$tb_attribute_goods->where = "goods_id='".$transfer['goods_id']."' and attribute_id!=''";
		$tb_attribute_goods->order = "g.id asc";
		$goods_info['attribute'] = $tb_attribute_goods->find();

		$goods_info['content'] = nl2br( $goods_info['content'] );
		$goods_info['focus'] = nl2br( $goods_info['focus'] );
		$goods_info['awards'] = nl2br( $goods_info['awards'] );
		$goods_info['expense_list'] = nl2br( $goods_info['expense_list'] );
		
		$transfer['goods'] = $goods_info;

		$this->title = '转让详情';
		$this->setRenderData( array(
            'transfer'    =>  $transfer,
            'title'    =>  '转让详情'
        ) );
		$this->redirect('transfer_show');
	}
	
	//咨询
	function consult()
	{
		$this->goods_id = IFilter::act(IReq::get('id'),'int');
		if($this->goods_id == 0)
		{
			IError::show(403,'缺少商品ID参数');
		}

		$goodsObj   = new IModel('goods');
		$goodsRow   = $goodsObj->getObj('id = '.$this->goods_id);
		if(!$goodsRow)
		{
			IError::show(403,'商品数据不存在');
		}

		//获取次商品的评论数和平均分
		$goodsRow['apoint'] = $goodsRow['comments'] ? round($goodsRow['grade']/$goodsRow['comments']) : 0;

		$this->goodsRow = $goodsRow;
		$this->title = '课程咨询';
		$this->redirect('consult');
	}

	//咨询动作
	function consult_act()
	{
		$goods_id   = IFilter::act(IReq::get('goods_id','post'),'int');
		$captcha    = IFilter::act(IReq::get('captcha','post'));
		$question   = IFilter::act(IReq::get('question','post'));
		$_captcha   = ISafe::get('captcha');
		$message    = '';

    	/*if(!$captcha || !$_captcha || $captcha != $_captcha)
    	{
    		$message = '验证码输入不正确';
    	}
    	else */if(!$question)
    	{
    		$message = '咨询内容不能为空';
    	}
    	else if(!$goods_id)
    	{
    		$message = '商品ID不能为空';
    	}
    	else
    	{
    		$goodsObj = new IModel('goods');
    		$goodsRow = $goodsObj->getObj('id = '.$goods_id);
    		if(!$goodsRow)
    		{
    			$message = '不存在此商品';
    		}
    	}

		//有错误情况
    	if($message)
    	{
    		IError::show(403,$message);
    	}
    	else
    	{
			$dataArray = array(
				'question' => $question,
				'goods_id' => $goods_id,
				'user_id'  => isset($this->user['user_id']) ? $this->user['user_id'] : 0,
				'time'     => ITime::getDateTime(),
			);
			$referObj = new IModel('refer');
			$referObj->setData($dataArray);
			$referObj->add();
			plugin::trigger('setCallback','/site/products/id/'.$goods_id);
			$this->redirect('/site/products/id/'.$goods_id);
    	}
	}

	//咨询
	function discussion()
	{
		$this->goods_id = IFilter::act(IReq::get('id'),'int');
		if($this->goods_id == 0)
		{
			IError::show(403,'缺少商品ID参数');
		}

		$goodsObj   = new IModel('goods');
		$goodsRow   = $goodsObj->getObj('id = '.$this->goods_id);
		if(!$goodsRow)
		{
			IError::show(403,'商品数据不存在');
		}

		$this->goodsRow = $goodsRow;
		$this->setRenderData( array(
            'title'    =>  '课程讨论'
        ) );
		$this->redirect('discussion');
	}

	function discussion_act()
	{
		$goods_id   = IFilter::act(IReq::get('goods_id','post'),'int');
		$captcha    = IFilter::act(IReq::get('captcha','post'));
		$contents   = IFilter::act(IReq::get('contents','post'));
		$_captcha   = ISafe::get('captcha');
		$message    = '';

    	/*if(!$captcha || !$_captcha || $captcha != $_captcha)
    	{
    		$message = '验证码输入不正确';
    	}
    	else */if(!$contents)
    	{
    		$message = '讨论内容不能为空';
    	}
    	else if(!$goods_id)
    	{
    		$message = '商品ID不能为空';
    	}
    	else
    	{
    		$goodsObj = new IModel('goods');
    		$goodsRow = $goodsObj->getObj('id = '.$goods_id);
    		if(!$goodsRow)
    		{
    			$message = '不存在此商品';
    		}
    	}

		//有错误情况
    	if($message)
    	{
    		IError::show(403,$message);
    	}
    	else
    	{
			$dataArray = array(
				'contents' => $contents,
				'goods_id' => $goods_id,
				'user_id'  => isset($this->user['user_id']) ? $this->user['user_id'] : 0,
				'time'     => ITime::getDateTime(),
			);
			$discussionObj = new IModel('discussion');
			$discussionObj->setData($dataArray);
			$discussionObj->add();
			plugin::trigger('setCallback','/site/products/id/'.$goods_id);
			$this->redirect('/site/products/id/'.$goods_id);
    	}
	}

	function article_discussion()
	{
		$goods_id   = IFilter::act(IReq::get('id','get'),'int');
		$goodsObj = new IModel('goods');
    	$goodsRow = $goodsObj->getObj('id = '.$goods_id);
    	$articleObj = new IModel('article');
    	$articleRow = $articleObj->getObj('goods_id = '.$goods_id);
    	$articleid = $articleRow['id'];
    	if(empty($articleRow))
    	{
    		$articledata = array(
    			'goods_id' => $goods_id,
    			'title' => $goodsRow['name'],
    			'category_id' => 8,
    			'create_time'     => ITime::getDateTime()
    		);
    		$articleObj->setData($articledata);
    		$articleid = $articleObj->add();
    	}

    	$this->redirect('/site/article_detail/id/'.$articleid);
	}

	//公告详情页面
	function notice_detail()
	{
		$this->notice_id = IFilter::act(IReq::get('id'),'int');
		if($this->notice_id == '')
		{
			IError::show(403,'缺少公告ID参数');
		}
		else
		{
			$noObj           = new IModel('announcement');
			$this->noticeRow = $noObj->getObj('id = '.$this->notice_id);
			if(empty($this->noticeRow))
			{
				IError::show(403,'公告信息不存在');
			}
			$this->redirect('notice_detail');
		}
	}

	//文章列表页面
	function article()
	{
		/*$catId  = IFilter::act(IReq::get('id'),'int');
		$catRow = Api::run('getArticleCategoryInfo',$catId);
		$queryArticle = $catRow ? Api::run('getArticleListByCatid',$catRow['id']) : Api::run('getArticleList');
		$this->setRenderData(array("catRow" => $catRow,'queryArticle' => $queryArticle));
		$this->redirect('article');*/
		$page = IFilter::act(IReq::get('page'),'int');
	    $page = max( $page, 1 );
	    $page_size = 12;
	    $cid = IFilter::act(IReq::get('cid'),'int');
	    if ( !$cid )
	    {
	        //$this->show_warning('参数不正确');
	        IError::show(403,'参数不正确');
	        exit();
	    }
	    
	    $category_info = article_category_class::get_category_info( $cid );
	    if ( !$category_info )
	    {
	        //$this->show_warning('该类目可能已被删除');
	        IError::show(403,'该类目可能已被删除');
	        exit();
	    }
	    
	    // 获取文章列表和回复总数
	    $category_child_ids = article::get_child_category( $cid );
	    $article_db = article::get_article_list_by_cid($category_child_ids, $page, $page_size);
	    $article_list = $article_db->find();
	    $paging = $article_db->paging;	    
	    if ( $article_list )
	    {
	        foreach( $article_list as $kk => $vv )
	        {
	            $article_list[$kk]['reply_count'] = article_reply_class::get_article_reply_count( $vv['id'] );
	            $article_list[$kk]['summary'] = article::get_article_summary($vv['content'], 160 );
	        }
	    }
	    
	    // 获取列表页广告图
	    $ad_list = Ad::getAdList(22);
	    
	    // 获取侧边栏分类
	    $category_list = article_category_class::get_child_category_list(2);
	    
	    // 获取热门文章
	    $hot_article_list = article::get_hotest_list(6);
	    $this->title = '教育资讯';
	    $this->setRenderData(array(
	        'article_list' =>  $article_list,
	        'page_info'    =>  $article_db->getPageBar(),
	        'ad_list'      =>  $ad_list,
	        'category_list'    =>  $category_list,
	        'cid'          =>  $cid,
	        'hot_article_list' =>  $hot_article_list,
	        'category_info'    =>  $category_info,
            'paging'           =>$paging,
	        'cid'              =>  $cid,
	        'seo_data'     =>  array(
	            'title'    =>  $this->site_config->index_seo_title,
	            'keywords' =>  $this->get_city() . '-' . $this->title,
	            'description'  =>  '',
	        ),
	    ));
	    
	    $this->redirect('article');
	}

	//文章详情页面
	function article_detail()
	{
		$this->article_id = IFilter::act(IReq::get('id'),'int');
		if($this->article_id == '')
		{
			//$this->show_warning('参数不正确');
		    IError::show(403,'参数不正确');
			exit();
		}
		else
		{
		    $page = IFilter::act(IReq::get('page'),'int');
		    $page = max( $page, 1 );
		    $page_size = 100; 
		    
			$articleObj       = new IModel('article');
			$article_info = $articleObj->getObj('id = '.$this->article_id);
			if(empty($article_info))
			{
				//$this->show_warning('资讯文章不存在');
			    IError::show(403,'文章不存在');
				exit();
			}
            if ( $article_info['user_id'] )
            {
                $user_db = new IQuery('user');
                $user_db->where = 'id = ' . $article_info['user_id'];
                $user_info = $user_db->getOne();
                if ( $user_info )
                    $article_info['user_name'] = $user_info['username'];
            }
			
			//关联商品
			//$this->relationList = Api::run('getArticleGoods',array("#article_id#",$this->article_id));
			
            // 获取文档分类路径
            $article_info['path'] = article_category_class::get_parent_category_list( $article_info['category_id'] );
            //dump( $article_info );
			
    	    // 获取列表页广告图
    	    $ad_list = Ad::getAdList(22);
    	    
    	    // 获取侧边栏分类
    	    $category_list = article_category_class::get_child_category_list(2);
    	    
    	    // 获取热门文章
    	    $hot_article_list = article::get_hotest_list(6);
    	    
    	    // 获取评论
    	    $reply_db = article_reply_class::get_article_reply_list( $this->article_id, $page, $page_size );
    	    $reply_list = $reply_db->find();
    	    $paging = $reply_db->paging;
    	    if ( $reply_list )
    	    {
    	        $user_id_arr = array();
    	        foreach( $reply_list as $kk => $vv )
    	        {
    	            if ( !in_array( $vv['user_id'], $user_id_arr ))
    	                $user_id_arr[] = $vv['user_id'];
    	            
    	            $reply_list[$kk]['thumb_count'] = article_reply_thumb_class::get_reply_thumb_count($vv['id']);
    	        }
    	        
    	        $user_db = new IQuery('user as u ');
    	        $user_db->join = 'left join member as m on u.id = m.user_id';
    	        $user_db->where = db_create_in( $user_id_arr, 'u.id');
    	        $user_db->fields = 'u.id, u.username, u.head_ico,m.sex';
    	        $user_list = $user_db->find();
    	        
    	        $user_temp = array();
    	        if ( $user_list )
    	        {
                    foreach( $user_list as $kk => $vv )
                    {
                        $user_temp[$vv['id']] = $vv;
                    }
    	        }
    	        $user_list = $user_temp;
    	    }
    	    $page_info = $reply_db->getPageBar();
    	    
    	    $article_info['reply_count'] = article_reply_class::get_article_reply_count($this->article_id );
			
			// 更新浏览量, 设置cookie过期时间为24小时
			if ( !isset( $_COOKIE['article_' . $this->article_id] ) || $_COOKIE['article_' . $this->article_id] != '1' )
			{
			    article::update_article_views( $this->article_id );
			    setcookie( 'article_' . $this->article_id, '1', time() + 3600 * 24 );
			}
			$callback = $_SERVER['PHP_SELF'];
			$this->title = '资讯详情';
            
			//seo_data
			if ( $article_info['user_id'] )
			{
			    $user_db = new IQuery('user');
			    $user_db->where = 'id = ' . $article_info['user_id'];
			    $user_info = $user_db->getOne();
			    $user_name = $user_info['username'];
			} else {
			    $user_name = '第三课';
			}
			$content = strip_tags($article_info['content']);
			$content = mb_substr( $content, 0, 50, 'utf-8');
			
			// 微信分享
			$wechat = new wechat_class();
			$wechat->token = 'y53na1qnxJ6o1qj1';
			$wechat->appid = 'wx72fc7befef40f55a';
			$wechat->appSecret = 'acc1eb5e4531f811612e390111389f88';
			$urls = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
			$sign_package_info = $wechat->shareMsg($urls);
			
			$this->setRenderData(array(
			    'ad_list'    =>  $ad_list,
			    'category_list'  =>  $category_list,
			    'hot_article_list'   =>  $hot_article_list,
			    'article_info'   =>  $article_info,
			    'reply_list'     =>  $reply_list,
			    'page_info'      =>  $page_info,
			    'user_list'      =>  $user_list,
			    'page'           =>  $page,
			    'page_size'      =>  $page_size,
			    'paging'         =>  $paging,
			    'id'             =>  $this->article_id,
			    'callback'       =>  $callback,
			    'seo_data'     =>  array(
			        'title'    =>  $this->site_config->index_seo_title . '-' . $article_info['path'][0]['name'] . '-' . $article_info['title'],
			        'keywords' =>  $this->get_city() . '-教育资讯-' . $article_info['path'][0]['name'] . '-' . $user_name,
			        'description'  =>  $article_info['title'] . '，' . $article_info['create_time'] . '，' . $user_name . $content,
			    ),
			    
			    'sign_package_info'  =>  $sign_package_info,
			    'share_url'      =>  $urls
			));
			
			$this->redirect('article_detail');
		}
	}

	function article_reply()
	{
	    $user = $this->user;
	    $article_id = IFilter::act(IReq::get('article_id'),'int');
	    $content = IFilter::act(IReq::get('reply_content'),'text');
	    $captcha = strtolower( IFilter::act(IReq::get('captcha','post')) );
	    $_captcha   = strtolower( ISafe::get('captcha') );
	    $type = IFilter::act(IReq::get('type'));
	    
	    $bad_file = IWEB_ROOT . DIRECTORY_SEPARATOR . 'classes' . DIRECTORY_SEPARATOR . 'bad_words.php';
        if ( file_exists($bad_file))
        {
            $bad_words = include_once($bad_file);
            $content_bad_words = check_bad_words($content, $bad_words );
            $content = ( $content_bad_words ) ? str_replace($content_bad_words, '', $content ) : $content;
            unset( $bad_words );
        }
	    	    
	    $article_info = article::get_info($article_id);
	    if ( !$article_info )
	    {
	        //$this->show_warning('文章可能已被删除，无法回复!');
	        IError::show(403,'文章可能已被删除，无法回复!');
	        exit();
	    }
	    
	    if ( !$content )
	    {
	        //$this->show_warning('内容不能为空!');
	        IError::show(403,'内容不能为空!');
	        exit();
	    }
	    
	    /*if ( $captcha && $captcha != $_captcha && $type != 'mobile')
	    {
	        $this->show_warning('验证码不正确!');
	        exit();
	    }*/
	    
	    $data = array(
	        'article_id'   =>  $article_id,
	        'content'      =>  $content,
	        'user_id'      =>  $user['user_id'],
	        'add_time'     =>  time(),
	    );
	    
	    $article_reply_db = new IModel('article_reply');
	    $article_reply_db->setData($data);
	    if ( $article_reply_db->add() )
	    {
	    	/*if($article_info['goods_id'])
	    	{
	    		$this->show_message('回复成功', '返回课程', IUrl::creatUrl('/site/products/id/' . $article_info['goods_id']));
	    	}
	    	else
	    	{*/
	    		//$this->show_message('回复成功', '返回文章', IUrl::creatUrl('/site/article_detail/id/' . $article_id));
	    	//}
	    	header("location:" . IUrl::creatUrl('/site/article_detail/id/' . $article_id));
	        exit();
	    } else {
	        //$this->show_warning('回复失败!');
	        IError::show(403,'回复失败!');
	        exit();
	    }
	}

	function get_article_list_ajax()
	{
	    $cid = $_GET['cid'] + 0;
	    $page = $_GET['page'] + 0;
	    $page = max( $page, 1 );
	    $page_size = 12;
	    
	    // 获取文章列表和回复总数
	    $category_child_ids = article::get_child_category( $cid );
	    $article_db = article::get_article_list_by_cid($category_child_ids, $page, $page_size);
	    $article_list = $article_db->find();
	    $paging = $article_db->paging;
	    
	    $return = '';
	    if ( $article_list )
	    {
	        foreach( $article_list as $kk => $vv )
	        {
	            //$article_list[$kk]['reply_count'] = article_reply_class::get_article_reply_count( $vv['id'] );
	            //$article_list[$kk]['summary'] = article::get_article_summary($vv['content'], 160 );
	            
	            $link = IURL::creatUrl('/site/article_detail/id/' . $vv['id']);
	            $thumb = $vv['thumb'];
	            $title = $vv['title'];
	            $username = ( $vv['username'] ) ? $vv['username'] : '乐享生活';
	            $views = $vv['views'];
	            $reply_count = article_reply_class::get_article_reply_count( $vv['id'] );
	            $addtime = date('m-d H:i', strtotime( $item['create_time']));
	            
	            if ( $vv['thumb'] )
	            {
	                $return .= "
	                <li>
						<a href=\"$link\">
						<div class=\"t-image\">
								<img src=\"/$thumb\"/>
						</div>
						<div class=\"t-info\">
							<div class=\"t-title\">
								$title
							</div>
							<div class=\"t-username\">
								<span class=\"blue\">
									$username
								</span>
								<span>
								    {$views}浏览
								</span>
								<span>
								    $addtime
								</span>
							</div>
						</div>
						</a>
					</li>";
	            } else {
	                $return .= "
	                <li>
	                   <a href=\"$link\">
						<div class=\"t-info t-info2\">
							<div class=\"t-title\">
								$title
							</div>
							<div class=\"t-username\">
								<span class=\"blue\">
									$username
								</span>
								<span>
								    {$views}浏览
								</span>
								<span>
								    $addtime
								</span>
							</div>
						</div>
					   </a>
					</li>";
	            }
	        }
	    }
	    
        die( $return );
	}

	function get_article_reply_list_ajax()
	{
	    $id = $_GET['id'] + 0;
	    $page = $_GET['page'] + 0;
	    $page = max( $page, 1 );
	    $page_size = 10;
	    
	    // 获取评论
	    $reply_db = article_reply_class::get_article_reply_list( $id, $page, $page_size );
	    $reply_list = $reply_db->find();
	    $paging = $reply_db->paging;
	    if ( $reply_list )
	    {
	        $user_id_arr = array();
	        foreach( $reply_list as $kk => $vv )
	        {
	            if ( !in_array( $vv['user_id'], $user_id_arr ))
	                $user_id_arr[] = $vv['user_id'];
	        }
	         
	        $user_db = new IQuery('user');
	        $user_db->where = db_create_in( $user_id_arr, 'id');
	        $user_db->fields = 'id, username, head_ico';
	        $user_list = $user_db->find();
	         
	        $user_temp = array();
	        if ( $user_list )
	        {
	            foreach( $user_list as $kk => $vv )
	            {
	                $user_temp[$vv['id']] = $vv;
	            }
	        }
	        $user_list = $user_temp;
	    }
	    
	    $return = '';
	    if ( $reply_list )
	    {
	        foreach( $reply_list as $kk => $vv )
	        {
	            $head_icon = ( $user_list[$vv['user_id']]['head_ico'] ) ? $user_list[$vv['user_id']]['head_ico'] : 'views/mobile/skin/blue/images/front/user_ico.gif';
	            $username = $user_list[$vv['user_id']]['username'];
	            $add_time = date('m-d H:i', strtotime( $vv['add_time']));
	            $content = $vv['content'];
	            
	            $return .= "<li>
						<div class=\"t-user-icon\">
							<img src=\"/$head_icon\" />
						</div>
						<div class=\"t-user-info\">
							<div class=\"t-username\">
							{$username}&nbsp; &nbsp; {$add_time}
							</div>
							<div class=\"t-content\">
							{$content}
							</div>
						</div>
				    </li>";
	        }
	    }
	    
	    die( $return );
	}
	
    function article_reply_thumb_ajax()
    {
	    $user = $this->user;
	    $id = IFilter::act(IReq::get('id'),'int');

	    if ( !$user['user_id'] || !$id )
	    {
	        // 参数不正确
	        die('-1');
	    }
	    $result = article_reply_thumb_class::can_thumb($id, $user['user_id']);
	    if ( !$result )
	    {
	        // 已经点过赞了
	        die('0');
	    }
	    
	    if ( article_reply_thumb_class::add_thumb($id, $user['user_id']))
	    {
	        // 点赞成功
	        die('1');
	    } else {
	        // 点赞失败
	        die('-2');
	    }
    }
	
	// 新详情版本的跳转
	private function _choose_product_template($seller_id = 0, $template = '')
	{
	    if ( !$seller_id )
	        return false;
	     
	    $seller_info = seller_class::get_seller_info($seller_id);
	    if ( !$seller_info['is_system_seller'] )
	    {
	        header("location: " . IUrl::creatUrl('/school/home/id/' . $seller_id));
	        exit();
	    } else {
	        $seller_template = ($seller_info['product_template']) ? $seller_info['product_template'] : 'products';
	        if ($seller_template != $template )
	        {
	            $goods_id = IFilter::act(IReq::get('id'),'int');
	            $redirect = IFilter::act(IReq::get('redirect'),'int');
	            if ( $redirect )
                    header("location:" . IUrl::creatUrl('/site/' . $seller_template . '/id/' . $goods_id . '/redirect/' . $redirect));
	            else
	                header("location:" . IUrl::creatUrl('/site/' . $seller_template . '/id/' . $goods_id));
                exit();
	        }
	    }
	}
	
	
	//商品展示
	function products()
	{
	    $goods_id = IFilter::act(IReq::get('id'),'int');
	    $redirect = IFilter::act(IReq::get('redirect'),'int');
	
	    if(!$goods_id)
	    {
	        IError::show(403,"传递的参数不正确");
	        exit;
	    }
	
	    //使用商品id获得商品信息
	    $tb_goods = new IModel('goods');
	    $goods_info = $tb_goods->getObj('id='.$goods_id." AND is_del=0");
	    if(!$goods_info)
	    {
	        IError::show(403,"这件商品不存在");
	        exit;
	    }
	
	    // 新详情版本的跳转
	    $this->_choose_product_template($goods_info['seller_id'], 'products');
	
	    //品牌名称
	    if($goods_info['brand_id'])
	    {
	        $tb_brand = new IModel('brand');
	        $brand_info = $tb_brand->getObj('id='.$goods_info['brand_id']);
	        if($brand_info)
	        {
	            $goods_info['brand'] = $brand_info['name'];
	        }
	    }
	
	    //获取商品分类
	    $categoryObj = new IModel('category_extend as ca,category as c');
	    $categoryList= $categoryObj->query('ca.goods_id = '.$goods_id.' and ca.category_id = c.id','c.id,c.name','ca.id desc',1);
	    $categoryRow = null;
	    if($categoryList)
	    {
	        $categoryRow = current($categoryList);
	    }
	    $goods_info['category'] = $categoryRow ? $categoryRow['id'] : 0;
	    $goods_info['catname'] = $categoryRow ? $categoryRow['name'] : '';
	
	    //商品图片
	    $tb_goods_photo = new IQuery('goods_photo_relation as g');
	    $tb_goods_photo->fields = 'p.id AS photo_id,p.img ';
	    $tb_goods_photo->join = 'left join goods_photo as p on p.id=g.photo_id ';
	    $tb_goods_photo->where =' g.goods_id='.$goods_id;
	    $goods_info['photo'] = $tb_goods_photo->find();
	
	    //商品是否参加促销活动(团购，抢购)
	    $goods_info['promo']     = IReq::get('promo')     ? IReq::get('promo') : '';
	    $goods_info['active_id'] = IReq::get('active_id') ? IFilter::act(IReq::get('active_id'),'int') : 0;
	    if($goods_info['promo'])
	    {
	        $activeObj    = new Active($goods_info['promo'],$goods_info['active_id'],$this->user['user_id'],$goods_id);
	        $activeResult = $activeObj->data();
	        if(is_string($activeResult))
	        {
	            IError::show(403,$activeResult);
	        }
	        else
	        {
	            $goods_info[$goods_info['promo']] = $activeResult;
	        }
	    }
	
	    //获得扩展属性
	    $tb_attribute_goods = new IQuery('goods_attribute as g');
	    $tb_attribute_goods->join  = 'left join attribute as a on a.id=g.attribute_id ';
	    $tb_attribute_goods->fields=' a.name,g.attribute_value ';
	    $tb_attribute_goods->where = "goods_id='".$goods_id."' and attribute_id!=''";
	    $goods_info['attribute'] = $tb_attribute_goods->find();
	
	    //报名记录
	    $tb_shop = new IQuery('order_goods as og');
	    $tb_shop->join = 'left join order as o on o.id=og.order_id';
	    $tb_shop->fields = 'count(*) as totalNum';
	    $tb_shop->where = 'og.goods_id='.$goods_id.' and o.status = 5';
	    $shop_info = $tb_shop->find();
	    $goods_info['buy_num'] = 0;
	    if($shop_info)
	    {
	        $goods_info['buy_num'] = $shop_info[0]['totalNum'];
	    }
	
	    //报名前咨询
	    $tb_refer    = new IModel('refer');
	    $refeer_info = $tb_refer->getObj('goods_id='.$goods_id,'count(*) as totalNum');
	    $goods_info['refer'] = 0;
	    if($refeer_info)
	    {
	        $goods_info['refer'] = $refeer_info['totalNum'];
	        $goods_info['referlist'] = $tb_refer->query("goods_id='$goods_id'", '*', 'time DESC', 10);
	    }
	
	    //网友讨论
	    $tb_discussion = new IModel('discussion');
	    $discussion_info = $tb_discussion->getObj('goods_id='.$goods_id,'count(*) as totalNum');
	    $goods_info['discussion'] = 0;
	    if($discussion_info)
	    {
	        $goods_info['discussion'] = $discussion_info['totalNum'];
	    }
	
	    $tb_article_reply = new IModel('article_reply');
	    $tb_article = new IModel('article');
	    $article = $tb_article->getObj("goods_id='$goods_id'", 'id');
	    $goods_info['discussionlist'] = $tb_article_reply->query("article_id='$article[id]'", '*', 'add_time DESC', 10);
	
	    //获得商品的价格区间
	    $tb_product = new IModel('products');
	    $product_info = $tb_product->getObj('goods_id='.$goods_id,'max(sell_price) as maxSellPrice, min(sell_price) as minSellPrice ,max(market_price) as maxMarketPrice, min(market_price) as minMarketPrice');
	    $productnum = $tb_product->getObj('goods_id='.$goods_id, "count(*) AS num");
	    if(isset($product_info['maxSellPrice']) && $product_info['maxSellPrice'] && $productnum['num'] > 1)
	    {
	        $goods_info['sell_price']   .= '-' . $product_info['maxSellPrice'];
	        $goods_info['market_price'] .= '-' . $product_info['maxMarketPrice'];
	    }
	    $goods_info['productnum'] = $productnum['num'];
	    $goods_info['t_sell_price']   = $product_info['minSellPrice'] . '-' . $product_info['maxSellPrice'];
	    $goods_info['t_market_price'] = $product_info['minMarketPrice'] . '-' . $product_info['maxMarketPrice'];
	    //获得会员价
	    $countsumInstance = new countsum();
	    $goods_info['group_price'] = $countsumInstance->getGroupPrice($goods_id,'goods');
	
	    //获取商家信息
	    if($goods_info['seller_id'])
	    {
	        $sellerDB = new IModel('seller');
	        $goods_info['seller'] = $sellerDB->getObj('id = '.$goods_info['seller_id']);
	    }
	
	    //增加浏览次数
	    $visit    = ISafe::get('visit');
	    $checkStr = "#".$goods_id."#";
	    if($visit && strpos($visit,$checkStr) !== false)
	    {
	    }
	    else
	    {
	        $tb_goods->setData(array('visit' => 'visit + 1'));
	        $tb_goods->update('id = '.$goods_id,'visit');
	        $visit = $visit === null ? $checkStr : $visit.$checkStr;
	        ISafe::set('visit',$visit);
	    }
	
	    $productDB = new IModel('products');
	    $products = $productDB->query("goods_id = '$goods_id' AND is_show = '1'", '*', 'market_price ASC');
	    $spec_array = array();
	    $val_array = array();
	    $spec_array['name'] = $products[0]['cusname'];
	    foreach($products AS $product)
	    {
	        $dprice = order_class::get_dprice($product['market_price'], $product['cost_price'] );
	        $rprice = order_class::get_rprice($dprice);
	        $cprice = order_class::get_cprice( $dprice, $rprice );
	        $max_cprice = order_class::get_max_input_cprice( $cprice );
	        $max_order_chit = number_format( order_class::get_real_order_chit( $product['market_price'], $product['cost_price'], $max_cprice ), 2, '.', '');
	        $spec_array['value'][] = array(
	            'id' => $product['id'],
	            'cusval' => $product['cusval'],
	            'classnum' => $product['classnum'],
	            'month' => $product['month'],
	            'max_cprice' => $max_cprice,
	            'max_order_chit' => str_replace('.00', '', $max_order_chit)
	        );
	    }
	    $this->title = $goods_info['name'];
	    $this->setRenderData(array('goods_spec_array' => $spec_array));
	    $this->setRenderData(array('title' => $goods_info['name']));
	
	    $dprice = order_class::get_dprice($goods_info['market_price'], $goods_info['cost_price'] );
	    $rprice = order_class::get_rprice($dprice);
	    $goods_info['cprice'] = order_class::get_cprice( $dprice, $rprice );
	    $goods_info['max_cprice'] = order_class::get_max_input_cprice( $goods_info['cprice'] );
	    $goods_info['max_order_chit'] = number_format(order_class::get_real_order_chit($goods_info['market_price'], $goods_info['cost_price'], $goods_info['max_cprice'] ), 2, '.', '');
	
	    //get next
	    $goodsModel = new IModel('goods');
	    $nextid = $goodsModel->query("id > '$goods_id' AND is_del=0", 'id', 'id ASC', 1);
	    if(!$nextid[0]['id'])
	    {
	        $nextid = $goodsModel->query("id < '$goods_id' AND is_del=0", 'id', 'id ASC', 1);
	    }
	    $goods_info['nextid'] = $nextid[0]['id'];
	
	    $this->min_cprice = 10;
	    $this->min_order_chit = 20;
	
	    $goods_info['is_purchase'] = goods_class::is_goods_purchase($goods_info['limit_start_time'], $goods_info['limit_end_time'] );
	    $goods_info['content'] = nl2br( $goods_info['content'] );
	
	    //seo_data
	    $delimiter = '-';
	    $breadGuide = goods_class::catRecursion($goods_info['category']);
	    $catname_0 = $breadGuide[0]['name'];
	    $catname = $categoryList[sizeof( $categoryList) - 1]['name'];
	    $content = strip_tags($goods_info['content']);
	    $content = mb_substr( $content, 0, 50, 'utf-8');
	
	    $shop_catname = '教育机构';
	    $cate_list_info = $this->get_shop_cate_list($shop_catname);
	    $cate_list_info = implode($delimiter, $cate_list_info);
	
	    $goods_info['seo_data'] = array(
	        'title'    =>  $this->site_config->index_seo_title . '-' . $this->get_city() . '-' . $catname . '-' . $goods_info['name'],
	        'keywords' =>  '株洲-' . $shop_catname . '（' . $cate_list_info . '）-' . $catname_0 . '--' . $goods_info['seller']['shortname'],
	        'description'  =>  $goods_info['name'] .'，授课地点：' . $goods_info['seller']['address'] .'，' . $content,
	    );
	
	    $this->setRenderData($goods_info);
	    $this->redirect('products');
	}

	//商品展示
	function products2()
	{
		$goods_id = IFilter::act(IReq::get('id'),'int');
		$redirect = IFilter::act(IReq::get('redirect'),'int');

		if(!$goods_id)
		{
			IError::show(403,"传递的参数不正确");
			exit;
		}
		
		if ( $goods_id == 1129 )
		{
		    header("location:http://mlmm.lelele999.com/");
		    exit();
		}

		//使用商品id获得商品信息
		$tb_goods = new IModel('goods');
		$goods_info = $tb_goods->getObj('id='.$goods_id." AND is_del=0");
		if(!$goods_info)
		{
			IError::show(403,"这件商品不存在");
			exit;
		}
		
	    // 新详情版本的跳转
	    $this->_choose_product_template($goods_info['seller_id'], 'products2');

		//品牌名称
		if($goods_info['brand_id'])
		{
			$tb_brand = new IModel('brand');
			$brand_info = $tb_brand->getObj('id='.$goods_info['brand_id']);
			if($brand_info)
			{
				$goods_info['brand'] = $brand_info['name'];
			}
		}

		//获取商品分类
		$categoryObj = new IModel('category_extend as ca,category as c');
		$categoryList= $categoryObj->query('ca.goods_id = '.$goods_id.' and ca.category_id = c.id','c.id,c.name','ca.id desc',1);
		$categoryRow = null;
		if($categoryList)
		{
			$categoryRow = current($categoryList);
		}
		$goods_info['category'] = $categoryRow ? $categoryRow['id'] : 0;
		$goods_info['catname'] = $categoryRow ? $categoryRow['name'] : '';

		//商品图片
		$tb_goods_photo = new IQuery('goods_photo_relation as g');
		$tb_goods_photo->fields = 'p.id AS photo_id,p.img ';
		$tb_goods_photo->join = 'left join goods_photo as p on p.id=g.photo_id ';
		$tb_goods_photo->where =' g.goods_id='.$goods_id;
		$goods_info['photo'] = $tb_goods_photo->find();

		//商品是否参加促销活动(团购，抢购)
		$goods_info['promo']     = IReq::get('promo')     ? IReq::get('promo') : '';
		$goods_info['active_id'] = IReq::get('active_id') ? IFilter::act(IReq::get('active_id'),'int') : 0;
		if($goods_info['promo'])
		{
			$activeObj    = new Active($goods_info['promo'],$goods_info['active_id'],$this->user['user_id'],$goods_id);
			$activeResult = $activeObj->data();
			if(is_string($activeResult))
			{
				IError::show(403,$activeResult);
			}
			else
			{
				$goods_info[$goods_info['promo']] = $activeResult;
			}
		}

		//获得扩展属性
// 		$tb_attribute_goods = new IQuery('goods_attribute as g');
// 		$tb_attribute_goods->join  = 'left join attribute as a on a.id=g.attribute_id ';
// 		$tb_attribute_goods->fields=' a.name,g.attribute_value ';
// 		$tb_attribute_goods->where = "goods_id='".$goods_id."' and attribute_id!=''";
// 		$goods_info['attribute'] = $tb_attribute_goods->find();

// 		//报名记录
// 		$tb_shop = new IQuery('order_goods as og');
// 		$tb_shop->join = 'left join order as o on o.id=og.order_id';
// 		$tb_shop->fields = 'count(*) as totalNum';
// 		$tb_shop->where = 'og.goods_id='.$goods_id.' and o.status = 5';
// 		$shop_info = $tb_shop->find();
// 		$goods_info['buy_num'] = 0;
// 		if($shop_info)
// 		{
// 			$goods_info['buy_num'] = $shop_info[0]['totalNum'];
// 		}

// 		//报名前咨询
// 		$tb_refer    = new IModel('refer');
// 		$refeer_info = $tb_refer->getObj('goods_id='.$goods_id,'count(*) as totalNum');
// 		$goods_info['refer'] = 0;
// 		if($refeer_info)
// 		{
// 			$goods_info['refer'] = $refeer_info['totalNum'];
// 			$goods_info['referlist'] = $tb_refer->query("goods_id='$goods_id'", '*', 'time DESC', 10);
// 		}

// 		//网友讨论
// 		$tb_discussion = new IModel('discussion');
// 		$discussion_info = $tb_discussion->getObj('goods_id='.$goods_id,'count(*) as totalNum');
// 		$goods_info['discussion'] = 0;
// 		if($discussion_info)
// 		{
// 			$goods_info['discussion'] = $discussion_info['totalNum'];
// 		}

// 		$tb_article_reply = new IModel('article_reply');
// 		$tb_article = new IModel('article');
// 		$article = $tb_article->getObj("goods_id='$goods_id'", 'id');
// 		$goods_info['discussionlist'] = $tb_article_reply->query("article_id='$article[id]'", '*', 'add_time DESC', 10);

		//获得商品的价格区间
		$tb_product = new IModel('products');
		$product_info = $tb_product->getObj('goods_id='.$goods_id,'max(sell_price) as maxSellPrice, min(sell_price) as minSellPrice ,max(market_price) as maxMarketPrice, min(market_price) as minMarketPrice');
		$productnum = $tb_product->getObj('goods_id='.$goods_id, "count(*) AS num");
		if(isset($product_info['maxSellPrice']) && $product_info['maxSellPrice'] && $productnum['num'] > 1)
		{
			$goods_info['sell_price']   .= '-' . $product_info['maxSellPrice'];
			$goods_info['market_price'] .= '-' . $product_info['maxMarketPrice'];
		}
		$goods_info['productnum'] = $productnum['num'];
		$goods_info['t_sell_price']   = $product_info['minSellPrice'] . '-' . $product_info['maxSellPrice'];
		$goods_info['t_market_price'] = $product_info['minMarketPrice'] . '-' . $product_info['maxMarketPrice'];
		//获得会员价
		$countsumInstance = new countsum();
		$goods_info['group_price'] = $countsumInstance->getGroupPrice($goods_id,'goods');

		//获取商家信息
		if($goods_info['seller_id'])
		{
			$sellerDB = new IModel('seller');
			$goods_info['seller'] = $sellerDB->getObj('id = '.$goods_info['seller_id']);
		}

		//增加浏览次数
		$visit    = ISafe::get('visit');
		$checkStr = "#".$goods_id."#";
		if($visit && strpos($visit,$checkStr) !== false)
		{
		}
		else
		{
			$tb_goods->setData(array('visit' => 'visit + 1'));
			$tb_goods->update('id = '.$goods_id,'visit');
			$visit = $visit === null ? $checkStr : $visit.$checkStr;
			ISafe::set('visit',$visit);
		}

		$productDB = new IModel('products');
		$products = $productDB->query("goods_id = '$goods_id' AND is_show = '1'", '*', 'market_price ASC');
		$spec_array = array();
		$val_array = array();
		$spec_array['name'] = $products[0]['cusname'];
		foreach($products AS $product)
		{
			$dprice = order_class::get_dprice($product['market_price'], $product['cost_price'] );
			$rprice = order_class::get_rprice($dprice);
			$cprice = order_class::get_cprice( $dprice, $rprice );
			$max_cprice = order_class::get_max_input_cprice( $cprice );
			$max_order_chit = number_format( order_class::get_real_order_chit( $product['market_price'], $product['cost_price'], $max_cprice ), 2, '.', '');
			$spec_array['value'][] = array(
				'id' => $product['id'],
				'cusval' => $product['cusval'],
				'classnum' => $product['classnum'],
				'month' => $product['month'],
				'max_cprice' => $max_cprice,
				'max_order_chit' => str_replace('.00', '', $max_order_chit)
			);
		}
		$this->title = $goods_info['name'];
		$this->setRenderData(array('goods_spec_array' => $spec_array));
		$this->setRenderData(array('title' => $goods_info['name']));

// 		$dprice = order_class::get_dprice($goods_info['market_price'], $goods_info['cost_price'] );
// 		$rprice = order_class::get_rprice($dprice);
// 		$goods_info['cprice'] = order_class::get_cprice( $dprice, $rprice );
// 		$goods_info['max_cprice'] = order_class::get_max_input_cprice( $goods_info['cprice'] );
// 		$goods_info['max_order_chit'] = number_format(order_class::get_real_order_chit($goods_info['market_price'], $goods_info['cost_price'], $goods_info['max_cprice'] ), 2, '.', '');

		//get next
		$goodsModel = new IModel('goods');
		$nextid = $goodsModel->query("id > '$goods_id' AND is_del=0", 'id', 'id ASC', 1);
		if(!$nextid[0]['id'])
		{
			$nextid = $goodsModel->query("id < '$goods_id' AND is_del=0", 'id', 'id ASC', 1);
		}
		$goods_info['nextid'] = $nextid[0]['id'];
		
// 		$this->min_cprice = 10;
// 		$this->min_order_chit = 20;
		
		$goods_info['is_purchase'] = goods_class::is_goods_purchase($goods_info['limit_start_time'], $goods_info['limit_end_time'] );
		//$goods_info['content'] = nl2br( $goods_info['content'] );
		
		//seo_data
		$delimiter = '-';
		$breadGuide = goods_class::catRecursion($goods_info['category']);
		$catname_0 = $breadGuide[0]['name'];
		$catname = $categoryList[sizeof( $categoryList) - 1]['name'];
        $content = strip_tags($goods_info['content']);
        $content = mb_substr( $content, 0, 50, 'utf-8');
        
        $shop_catname = '教育机构';
        $cate_list_info = $this->get_shop_cate_list($shop_catname);
        $cate_list_info = implode($delimiter, $cate_list_info);
 
		$goods_info['seo_data'] = array(
		    'title'    =>  $this->site_config->index_seo_title . '-' . $this->get_city() . '-' . $catname . '-' . $goods_info['name'],
		    'keywords' =>  '株洲-' . $shop_catname . '（' . $cate_list_info . '）-' . $catname_0 . '--' . $goods_info['seller']['shortname'],
		    'description'  =>  $goods_info['name'] .'，授课地点：' . $goods_info['seller']['address'] .'，' . $content,
		);
		
		$goods_info['products'] = $products;
		$goods_info['time'] = time();

		// 过滤购买的连接
		$url = IUrl::creatUrl('/simple/cart2/id/' . $goods_info['products'][0]['id'] . '/num/1/type/product');
		$goods_info['content'] = str_replace('href="goumai"','href="' . $url . '"', $goods_info['content']);
		
		if ( $redirect == 2)
		{
		    header("location: $url");
		}
		
		//dump($goods_info);
		$this->setRenderData($goods_info);
		$this->redirect('products2');
	}
	
	
	
	//商品展示
	function products3()
	{
	    $goods_id = IFilter::act(IReq::get('id'),'int');
	    $redirect = IFilter::act(IReq::get('redirect'),'int');
	
	    if(!$goods_id)
	    {
	        IError::show(403,"传递的参数不正确");
	        exit;
	    }
	
	    //使用商品id获得商品信息
	    $tb_goods = new IModel('goods');
	    $goods_info = $tb_goods->getObj('id='.$goods_id." AND is_del=0");
	    if(!$goods_info)
	    {
	        IError::show(403,"这件商品不存在");
	        exit;
	    }
	
	    // 新详情版本的跳转
	    $this->_choose_product_template($goods_info['seller_id'], 'products3');
	
	    //品牌名称
	    if($goods_info['brand_id'])
	    {
	        $tb_brand = new IModel('brand');
	        $brand_info = $tb_brand->getObj('id='.$goods_info['brand_id']);
	        if($brand_info)
	        {
	            $goods_info['brand'] = $brand_info['name'];
	        }
	    }
	
	    //获取商品分类
	    $categoryObj = new IModel('category_extend as ca,category as c');
	    $categoryList= $categoryObj->query('ca.goods_id = '.$goods_id.' and ca.category_id = c.id','c.id,c.name','ca.id desc',1);
	    $categoryRow = null;
	    if($categoryList)
	    {
	        $categoryRow = current($categoryList);
	    }
	    $goods_info['category'] = $categoryRow ? $categoryRow['id'] : 0;
	    $goods_info['catname'] = $categoryRow ? $categoryRow['name'] : '';
	
	    //商品图片
	    $tb_goods_photo = new IQuery('goods_photo_relation as g');
	    $tb_goods_photo->fields = 'p.id AS photo_id,p.img ';
	    $tb_goods_photo->join = 'left join goods_photo as p on p.id=g.photo_id ';
	    $tb_goods_photo->where =' g.goods_id='.$goods_id;
	    $goods_info['photo'] = $tb_goods_photo->find();
	
	    //商品是否参加促销活动(团购，抢购)
	    $goods_info['promo']     = IReq::get('promo')     ? IReq::get('promo') : '';
	    $goods_info['active_id'] = IReq::get('active_id') ? IFilter::act(IReq::get('active_id'),'int') : 0;
	    if($goods_info['promo'])
	    {
	        $activeObj    = new Active($goods_info['promo'],$goods_info['active_id'],$this->user['user_id'],$goods_id);
	        $activeResult = $activeObj->data();
	        if(is_string($activeResult))
	        {
	            IError::show(403,$activeResult);
	        }
	        else
	        {
	            $goods_info[$goods_info['promo']] = $activeResult;
	        }
	    }
	
	    //获得商品的价格区间
	    $tb_product = new IModel('products');
	    $product_info = $tb_product->getObj('goods_id='.$goods_id,'max(sell_price) as maxSellPrice, min(sell_price) as minSellPrice ,max(market_price) as maxMarketPrice, min(market_price) as minMarketPrice');
	    $productnum = $tb_product->getObj('goods_id='.$goods_id, "count(*) AS num");
	    if(isset($product_info['maxSellPrice']) && $product_info['maxSellPrice'] && $productnum['num'] > 1)
	    {
	        $goods_info['sell_price']   .= '-' . $product_info['maxSellPrice'];
	        $goods_info['market_price'] .= '-' . $product_info['maxMarketPrice'];
	    }
	    $goods_info['productnum'] = $productnum['num'];
	    $goods_info['t_sell_price']   = $product_info['minSellPrice'] . '-' . $product_info['maxSellPrice'];
	    $goods_info['t_market_price'] = $product_info['minMarketPrice'] . '-' . $product_info['maxMarketPrice'];
	    //获得会员价
	    $countsumInstance = new countsum();
	    $goods_info['group_price'] = $countsumInstance->getGroupPrice($goods_id,'goods');
	
	    //获取商家信息
	    if($goods_info['seller_id'])
	    {
	        $sellerDB = new IModel('seller');
	        $goods_info['seller'] = $sellerDB->getObj('id = '.$goods_info['seller_id']);
	    }
	
	    $productDB = new IModel('products');
	    $products = $productDB->query("goods_id = '$goods_id' AND is_show = '1'", '*', 'market_price ASC');
	    $spec_array = array();
	    $val_array = array();
	    $spec_array['name'] = $products[0]['cusname'];
	    foreach($products AS $product)
	    {
	        $dprice = order_class::get_dprice($product['market_price'], $product['cost_price'] );
	        $rprice = order_class::get_rprice($dprice);
	        $cprice = order_class::get_cprice( $dprice, $rprice );
	        $max_cprice = order_class::get_max_input_cprice( $cprice );
	        $max_order_chit = number_format( order_class::get_real_order_chit( $product['market_price'], $product['cost_price'], $max_cprice ), 2, '.', '');
	        $spec_array['value'][] = array(
	            'id' => $product['id'],
	            'cusval' => $product['cusval'],
	            'classnum' => $product['classnum'],
	            'month' => $product['month'],
	            'max_cprice' => $max_cprice,
	            'max_order_chit' => str_replace('.00', '', $max_order_chit)
	        );
	    }
	    $this->title = $goods_info['name'];
	    $this->setRenderData(array('goods_spec_array' => $spec_array));
	    $this->setRenderData(array('title' => $goods_info['name']));
	    
	    //get next
	    $goodsModel = new IModel('goods');
	    $nextid = $goodsModel->query("id > '$goods_id' AND is_del=0", 'id', 'id ASC', 1);
	    if(!$nextid[0]['id'])
	    {
	        $nextid = $goodsModel->query("id < '$goods_id' AND is_del=0", 'id', 'id ASC', 1);
	    }
	    $goods_info['nextid'] = $nextid[0]['id'];
	    $goods_info['is_purchase'] = goods_class::is_goods_purchase($goods_info['limit_start_time'], $goods_info['limit_end_time'] );
	
	    //seo_data
	    $delimiter = '-';
	    $breadGuide = goods_class::catRecursion($goods_info['category']);
	    $catname_0 = $breadGuide[0]['name'];
	    $catname = $categoryList[sizeof( $categoryList) - 1]['name'];
	    $content = strip_tags($goods_info['content']);
	    $content = mb_substr( $content, 0, 50, 'utf-8');
	
	    $shop_catname = '教育机构';
	    $cate_list_info = $this->get_shop_cate_list($shop_catname);
	    $cate_list_info = implode($delimiter, $cate_list_info);
	
	    $goods_info['seo_data'] = array(
	        'title'    =>  $this->site_config->index_seo_title . '-' . $this->get_city() . '-' . $catname . '-' . $goods_info['name'],
	        'keywords' =>  '株洲-' . $shop_catname . '（' . $cate_list_info . '）-' . $catname_0 . '--' . $goods_info['seller']['shortname'],
	        'description'  =>  $goods_info['name'] .'，授课地点：' . $goods_info['seller']['address'] .'，' . $content,
	    );
	
	    $goods_info['products'] = $products;
	    $goods_info['time'] = time();
	    
	    $user_id = $this->user['user_id'];
	    
        $wechat = new wechat_class();
        $wechat->token = 'y53na1qnxJ6o1qj1';
        $wechat->appid = 'wx72fc7befef40f55a';
        $wechat->appSecret = 'acc1eb5e4531f811612e390111389f88';
	    $urls = 'http://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];
	    $sign_package_info = $wechat->shareMsg($urls);
	    
	    // 过滤购买的连接
	    $url = IUrl::creatUrl('/simple/cart2/id/' . $goods_info['products'][0]['id'] . '/num/1/type/product');
	    $goods_info['content'] = str_replace('href="goumai"','href="' . $url . '"', $goods_info['content']);
	
	    if ( $redirect == 2)
	    {
	        header("location: $url");
	    }
	
	    $goods_info['user_id'] = $user_id;
	    $goods_info['sign_package_info'] = $sign_package_info;
	    $goods_info['share_url'] = $urls;
	    
	    $this->setRenderData($goods_info);
	    $this->redirect('products3');
	}
	
	
	//商品讨论更新
	function discussUpdate()
	{
		$goods_id = IFilter::act(IReq::get('id'),'int');
		$content  = IFilter::act(IReq::get('content'),'text');
		$captcha  = IReq::get('captcha');
		$_captcha = ISafe::get('captcha');
		$return   = array('isError' => true , 'message' => '');

		if(!$this->user['user_id'])
		{
			$return['message'] = '请先登录系统';
		}
    	else if(!$captcha || !$_captcha || $captcha != $_captcha)
    	{
    		$return['message'] = '验证码输入不正确';
    	}
    	else if(trim($content) == '')
    	{
    		$return['message'] = '内容不能为空';
    	}
    	else
    	{
    		$return['isError'] = false;

			//插入讨论表
			$tb_discussion = new IModel('discussion');
			$dataArray     = array(
				'goods_id' => $goods_id,
				'user_id'  => $this->user['user_id'],
				'time'     => ITime::getDateTime(),
				'contents' => $content,
			);
			$tb_discussion->setData($dataArray);
			$tb_discussion->add();

			$return['time']     = $dataArray['time'];
			$return['contents'] = $content;
			$return['username'] = $this->user['username'];
    	}
    	echo JSON::encode($return);
	}
	
	// 投票活动
	function vote()
	{
	    $goods_id = IFilter::act(IReq::get('id'),'int');
	    $content  = 'vote';
	    $return   = array('isError' => true , 'message' => '');
	    $goods_info = goods_class::get_goods_info($goods_id);
	    $user_id = $this->user['user_id'];
	    
	    if(!$this->user['user_id'])
	    {
	        $return['message'] = '请先登录系统';
	    } else if ( !$goods_info )
	    {
	        $return['message'] = '参数不正确';
	    }
	    else if(trim($content) == '')
	    {
	        $return['message'] = '内容不能为空';
	    }
	    else if ( !self::can_vote($user_id, $goods_id))
	    {
	        $return['message'] = '您今天已经投过票了';
	    }
	    else
	    {
	        $return['isError'] = false;
	    
	        //插入讨论表
	        $tb_discussion = new IModel('discussion');
	        $dataArray     = array(
	            'goods_id' => $goods_id,
	            'user_id'  => $this->user['user_id'],
	            'time'     => ITime::getDateTime(),
	            'contents' => $content,
	        );
	        $tb_discussion->setData($dataArray);
	        $tb_discussion->add();
	    
	        $return['time']     = $dataArray['time'];
	        $return['contents'] = $content;
	        $return['username'] = $this->user['username'];
	    }
	    echo JSON::encode($return);
	}
	
	// 判断用户是否可以对某个课程投票
    private function can_vote($user_id = 0, $goods_id = 0)
    {
        if ( !$user_id || !$goods_id )
            return false;
        
        $today = date('Y-m-d') . ' 00:00:00';
        $tomorrow = date('Y-m-d H:i:s',strtotime("$today +1 days"));
        $discussion_db = new IQuery('discussion');
        $discussion_db->where = "user_id = $user_id and goods_id = $goods_id and (unix_timestamp( time ) between unix_timestamp( '$today') and unix_timestamp( '$tomorrow' ) )";
        $result = $discussion_db->getOne();
        return ( $result ) ? false : true;
    }
	
	//获取货品数据
	function getProduct()
	{
		/*$goods_id = IFilter::act(IReq::get('goods_id'),'int');
		$specJSON = IFilter::act(IReq::get('specJSON'));
		if(!$specJSON || !is_array($specJSON))
		{
			echo JSON::encode(array('flag' => 'fail','message' => '规格值不符合标准'));
			exit;
		}

		//获取货品数据
		$tb_products = new IModel('products');
		$procducts_info = $tb_products->getObj("goods_id = ".$goods_id." and spec_array = '".JSON::encode($specJSON)."'");

		//匹配到货品数据
		if(!$procducts_info)
		{
			echo JSON::encode(array('flag' => 'fail','message' => '没有找到相关货品'));
			exit;
		}

		//获得会员价
		$countsumInstance = new countsum();
		$group_price = $countsumInstance->getGroupPrice($procducts_info['id'],'product');

		//会员价格
		if($group_price !== null)
		{
			$procducts_info['group_price'] = $group_price;
		}

		echo JSON::encode(array('flag' => 'success','data' => $procducts_info));*/
		$jsonData = JSON::decode(IReq::get('specJSON'));
		if(!$jsonData)
		{
			echo JSON::encode(array('flag' => 'fail','message' => '规格值不符合标准'));
			exit;
		}

		$goods_id = IFilter::act(IReq::get('goods_id'),'int');
		$specJSON = IFilter::act(IReq::get('specJSON'));
		//获取货品数据
		$tb_products = new IModel('products');
		$where = "goods_id = ".$goods_id." and id = '" . $jsonData[0]['id'] . "'";
		$procducts_info = $tb_products->getObj("goods_id = ".$goods_id." and id = '" . $jsonData[0]['id'] . "'");

		//匹配到货品数据
		if(!$procducts_info)
		{
			echo JSON::encode(array('flag' => 'fail','message' => '没有找到相关货品'));
			exit;
		}

		//获得会员价
		$countsumInstance = new countsum();
		$group_price = $countsumInstance->getGroupPrice($procducts_info['id'],'product');

		$dprice = order_class::get_dprice($procducts_info['market_price'], $procducts_info['cost_price'] );
		$rprice = order_class::get_rprice($dprice);
		$procducts_info['cprice'] = order_class::get_cprice( $dprice, $rprice );
		$procducts_info['max_cprice'] = order_class::get_max_input_cprice( $procducts_info['cprice'] );
		$procducts_info['max_order_chit'] = number_format( order_class::get_real_order_chit( $procducts_info['market_price'], $procducts_info['cost_price'], $procducts_info['max_cprice'] ), 2, '.', '');
		
		//会员价格
		if($group_price !== null)
		{
			$procducts_info['group_price'] = $group_price;
		}

		echo JSON::encode(array('flag' => 'success','data' => $procducts_info));
	}

	//顾客评论ajax获取
	function comment_ajax()
	{
		$goods_id = IFilter::act(IReq::get('goods_id'),'int');
		$page     = IFilter::act(IReq::get('page'),'int') ? IReq::get('page') : 1;

		$commentDB = new IQuery('comment as c');
		$commentDB->join   = 'left join goods as go on c.goods_id = go.id AND go.is_del = 0 left join user as u on u.id = c.user_id';
		$commentDB->fields = 'u.head_ico,u.username,c.*';
		$commentDB->where  = 'c.goods_id = '.$goods_id.' and c.status = 1';
		$commentDB->order  = 'c.id desc';
		$commentDB->page   = $page;
		$data     = $commentDB->find();
		$pageHtml = $commentDB->getPageBar("javascript:void(0);",'onclick="comment_ajax([page])"');

		echo JSON::encode(array('data' => $data,'pageHtml' => $pageHtml));
	}

	//报名记录ajax获取
	function history_ajax()
	{
		$goods_id = IFilter::act(IReq::get('goods_id'),'int');
		$page     = IFilter::act(IReq::get('page'),'int') ? IReq::get('page') : 1;

		$orderGoodsDB = new IQuery('order_goods as og');
		$orderGoodsDB->join   = 'left join order as o on og.order_id = o.id left join user as u on o.user_id = u.id';
		$orderGoodsDB->fields = 'o.user_id,og.goods_price,og.goods_nums,o.create_time as completion_time,u.username';
		$orderGoodsDB->where  = 'og.goods_id = '.$goods_id.' and o.status = 5';
		$orderGoodsDB->order  = 'o.create_time desc';
		$orderGoodsDB->page   = $page;

		$data = $orderGoodsDB->find();
		$pageHtml = $orderGoodsDB->getPageBar("javascript:void(0);",'onclick="history_ajax([page])"');

		echo JSON::encode(array('data' => $data,'pageHtml' => $pageHtml));
	}

	//讨论数据ajax获取
	function discuss_ajax()
	{
		$goods_id = IFilter::act(IReq::get('goods_id'),'int');
		$page     = IFilter::act(IReq::get('page'),'int') ? IReq::get('page') : 1;

		$discussDB = new IQuery('discussion as d');
		$discussDB->join = 'left join user as u on d.user_id = u.id';
		$discussDB->where = 'd.goods_id = '.$goods_id;
		$discussDB->order = 'd.id desc';
		$discussDB->fields = 'u.username,d.time,d.contents';
		$discussDB->page = $page;

		$data = $discussDB->find();
		$pageHtml = $discussDB->getPageBar("javascript:void(0);",'onclick="discuss_ajax([page])"');

		echo JSON::encode(array('data' => $data,'pageHtml' => $pageHtml));
	}

	//买前咨询数据ajax获取
	function refer_ajax()
	{
		$goods_id = IFilter::act(IReq::get('goods_id'),'int');
		$page     = IFilter::act(IReq::get('page'),'int') ? IReq::get('page') : 1;

		$referDB = new IQuery('refer as r');
		$referDB->join = 'left join user as u on r.user_id = u.id';
		$referDB->where = 'r.goods_id = '.$goods_id;
		$referDB->order = 'r.id desc';
		$referDB->fields = 'u.username,u.head_ico,r.time,r.question,r.reply_time,r.answer';
		$referDB->page = $page;

		$data = $referDB->find();
		$pageHtml = $referDB->getPageBar("javascript:void(0);",'onclick="refer_ajax([page])"');

		echo JSON::encode(array('data' => $data,'pageHtml' => $pageHtml));
	}

	//评论列表页
	function comments_list()
	{
		$id   = IFilter::act(IReq::get("id"),'int');
		$type = IFilter::act(IReq::get("type"));
		$data = array();

		//评分级别
		$type_config = array('bad'=>'1','middle'=>'2,3,4','good'=>'5');
		$point       = isset($type_config[$type]) ? $type_config[$type] : "";

		//查询评价数据
		$this->commentQuery = Api::run('getListByGoods',$id,$point);
		$this->commentCount = Comment_Class::get_comment_info($id);
		$this->goods        = Api::run('getGoodsInfo',array("#id#",$id));

		$this->redirect('comments_list');
	}

	//提交评论页
	function comments()
	{
		$id = IFilter::act(IReq::get('id'),'int');

		if(!$id)
		{
			IError::show(403,"传递的参数不完整");
		}

		if(!isset($this->user['user_id']) || $this->user['user_id']==null )
		{
			IError::show(403,"登录后才允许评论");
		}

		$result = Comment_Class::can_comment($id,$this->user['user_id']);
		if(is_string($result))
		{
			IError::show(403,$result);
		}
		
		$order_info = order_class::get_order_info($result['order_no'],2);
		$seller_info = seller_class::get_seller_info($order_info['seller_id']);

		$this->comment      = $result;
		$this->commentCount = Comment_Class::get_comment_info($result['goods_id']);
		$this->goods        = Api::run('getGoodsInfo',array("#id#",$result['goods_id']));
		$this->order_info   = $order_info;
		$this->seller_info  = $seller_info;
		$this->redirect("comments");
	}

	/**
	 * @brief 进行商品评论 ajax操作
	 */
	public function comment_add()
	{
		$id      = IFilter::act(IReq::get('id'),'int');
		$content = IFilter::act(IReq::get("contents"));
		if(!$id || !$content)
		{
			IError::show(403,"填写完整的评论内容");
		}

		if(!isset($this->user['user_id']) || !$this->user['user_id'])
		{
			IError::show(403,"未登录用户不能评论");
		}

		$id   = IFilter::act(IReq::get('id'),'int');
		$data = array(
			'point'        => IFilter::act(IReq::get('point'),'float'),
			'contents'     => $content,
			'status'       => 1,
			'comment_time' => ITime::getNow("Y-m-d"),
		);

		if($data['point']==0)
		{
			IError::show(403,"请选择分数");
		}

		$result = Comment_Class::can_comment($id,$this->user['user_id']);
		if(is_string($result))
		{
			IError::show(403,$result);
		}

		$tb_comment = new IModel("comment");
		$tb_comment->setData($data);
		$re         = $tb_comment->update("id={$id}");

		if($re)
		{
			$commentRow = $tb_comment->getObj('id = '.$id);

			//同步更新goods表,comments,grade
			$goodsDB = new IModel('goods');
			$goodsDB->setData(array(
				'comments' => 'comments + 1',
				'grade'    => 'grade + '.$commentRow['point'],
			));
			$goodsDB->update('id = '.$commentRow['goods_id'],array('grade','comments'));

			//同步更新seller表,comments,grade
			$sellerDB = new IModel('seller');
			$sellerDB->setData(array(
				'comments' => 'comments + 1',
				'grade'    => 'grade + '.$commentRow['point'],
			));
			$sellerDB->update('id = '.$commentRow['seller_id'],array('grade','comments'));
			die('success');
			$this->redirect("/site/comments_list/id/".$commentRow['goods_id']);
		}
		else
		{
			IError::show(403,"评论失败");
		}
	}

	function pic_show()
	{
		$this->layout="";

		$id   = IFilter::act(IReq::get('id'),'int');
		$item = Api::run('getGoodsInfo',array('#id#',$id));
		if(!$item)
		{
			IError::show(403,'商品信息不存在');
		}
		$photo = Api::run('getGoodsPhotoRelationList',array('#id#',$id));
		$this->setRenderData(array("id" => $id,"item" => $item,"photo" => $photo));
		$this->redirect("pic_show");
	}

	function help()
	{
		$id       = IFilter::act(IReq::get("id"),'int');
		$tb_help  = new IModel("help");
		$help_row = $tb_help->getObj("id={$id}");
		$help_row['content'] = str_replace('\n', '',$help_row['content']);
		if(!$help_row)
		{
			IError::show(404,"您查找的页面已经不存在了");
		}
		$tb_help_cat    = new IModel("help_category");
		$this->cat_row  = $tb_help_cat->getObj("id={$help_row['cat_id']}");
		$this->help_row = $help_row;
		
		$category_list = Api::run('getHelpCategoryLeft',10);
		if ( $category_list )
		{
		    foreach($category_list as $kk => $vv )
		    {
		        $category_list[$kk]['help_list'] = Api::run('getHelpListByCatidAll',array('#cat_id#',$vv['id']));
		        if ($vv['id'] == $this->cat_row['id'])
		            $category_list[$kk]['show'] = 1;
		    }
		}

		$this->setRenderData(array(
		    'category_list'   =>  $category_list,
		));
		$this->redirect("help");
	}

	function help_list()
	{
        $key = IFilter::act(IReq::get("key"));
        $page = IFilter::act(IReq::get('page'),'int');
        if ( $key )
        {
            $help_db = new IQuery('help');
            $help_db->where = "name like '%$key%'";
            $help_db->page = $page;
            $help_db->pagesize = 12;
            $help_list = $help_db->find();
            
            $category_list = Api::run('getHelpCategoryLeft',10);
            if ( $category_list )
            {
                foreach($category_list as $kk => $vv )
                {
                    $category_list[$kk]['help_list'] = Api::run('getHelpListByCatidAll',array('#cat_id#',$vv['id']));
                    if ($vv['id'] == $this->cat_row['id'])
                        $category_list[$kk]['show'] = 1;
                }
            }
            
            $this->setRenderData(array(
                'help_list' =>  $help_list,
                'page_info' =>  $help_db->getPageBar(),
                'category_list'   =>  $category_list,
                'keyword'   =>  $key,
            ));
        } else {
            $category_list = Api::run('getHelpCategoryLeft',10);
            if ( $category_list )
            {
                foreach($category_list as $kk => $vv )
                {
                    $category_list[$kk]['help_list'] = Api::run('getHelpListByCatidAll',array('#cat_id#',$vv['id']));
                    if ( !$kk )
                    {
                        $this->redirect('/site/help/id/' . $category_list[$kk]['help_list'][0]['id']);
                        exit();
                    }
                }
            }
        }
		$this->redirect("help_list");
	}

	//团购页面
	function groupon()
	{
		$id = IFilter::act(IReq::get("id"),'int');

		//指定某个团购
		if($id)
		{
			$this->regiment_list = Api::run('getRegimentRowById',array('#id#',$id));
			$this->regiment_list = $this->regiment_list ? array($this->regiment_list) : array();
		}
		else
		{
			$this->regiment_list = Api::run('getRegimentList');
		}

		if(!$this->regiment_list)
		{
			IError::show('当前没有可以参加的团购活动');
		}

		//往期团购
		$this->ever_list = Api::run('getEverRegimentList');
		$this->redirect("groupon");
	}

	//品牌列表页面
	function brand()
	{
		/*$id   = IFilter::act(IReq::get('id'),'int');
		$name = IFilter::act(IReq::get('name'));*/
		$category_id   = IFilter::act(IReq::get('category_id'),'int');
		$area_id   = IFilter::act(IReq::get('area_id'),'int');
		$category_list = brand_class::get_brand_category_list();
		$area_list = area::get_child_area_list('430200');
		$page = IFilter::act(IReq::get('page'),'int');
		$where = '';
		$catname = '';
        if($category_id)
        {
            if ( $category_id == 16)
            {
                header("location: " . IUrl::creatUrl('/site/tutor'));
                exit();
            }
        	$categoryModel = new IModel('brand_category');
	    	$cat = $categoryModel->getObj("id = '$category_id'", 'name');
	    	$catname = $cat['name'];
        	$where .= " and find_in_set('$category_id', b.category_ids)";
        }
        if($area_id)
        {
        	$where .= " and b.discrict = '$area_id'";
        }
        
        $page_size = ( IClient::getDevice() == IClient::PC ) ? 16 : 100;
        $brand_db = new IQuery('brand AS b');
        $brand_db->join = "left join seller AS s ON b.id = s.brand_id";
        $brand_db->where = "b.logo != '' AND s.is_vip = '1'AND b.description != '' AND b.shortname != '' $where";
        //$brand_db->order = 'b.id desc';
        $brand_db->order = 'b.sort desc, id desc';
        $brand_db->fields = 'b.*,s.is_support_props';
        $brand_db->page = $page;
        $brand_db->pagesize = $page_size;
        $brand_list = $brand_db->find();
        $page_info = $brand_db->getPageBar();
        foreach($brand_list AS $idx => $brand)
        {
        	$seller_db = new IModel('seller');
        	$seller = $seller_db->getObj("brand_id = '$brand[id]'", 'is_lock,id');
        	$brand_list[$idx]['is_lock'] = $seller['is_lock'];
        	$brand_list[$idx]['seller_id'] = $seller['id'];
        	$brand_list[$idx]['category'] = Category_extend_class::get_category_name_by_store( $seller['id'] );

        	$goods_db2 = new IQuery('goods');
	        $goods_db2->where = "seller_id = '$seller[id]' and is_del = 0";
	        $goods_db2->fields = 'id, seller_id,visit,sale';
	        $goods_list = $goods_db2->find();
	        $brand_list[$idx]['visit'] = 0;
            $brand_list[$idx]['sale'] = 0;
	        if ( $goods_list)
	        {
	            foreach( $goods_list as $k => $v )
                {
                    if ( $v['seller_id'] == $seller['id'] )
                    {
                        $brand_list[$idx]['visit']+= $v['visit'];
                        $brand_list[$idx]['sale']+= $v['sale'];
                    }
                }
	        }
        }
        $this->title = $catname ? $catname : '学校列表';
        //seo_data
        $delimiter = '-';
        $catname_info = ( !$category_id ) ? '教育机构' : $catname;
        $cate_list_info = $this->get_shop_cate_list($catname_info);
        $cate_list_info = implode($delimiter, $cate_list_info);

        $shop_arr = array();
        if ( $brand_list )
        {
            foreach( $brand_list as $kk => $vv )
            {
                if ( !in_array( $vv['shortname'], $shop_arr ))
                    $shop_arr[] = $vv['shortname'];
            }
        }
        if ( $shop_arr )
        {
            $shop_str = implode($delimiter, $shop_arr);
        }
        
            //查找分类信息
            $catObj       = new IModel('category');
        
            //获取子分类
            //$this->childId = goods_class::catChild(0);
        $cat_list = category_class::get_site_category(0);
        //dump($cat_list);
        
        //dump($brand_list);
        $this->setRenderData(array(
            'brand_list'   =>  $brand_list,
            'category_list' => $category_list,
            'area_list' => $area_list,
            'category_id' => $category_id,
            'cat_list'  =>  $cat_list,
            'area_id' => $area_id,
            'page_info'     =>  $page_info,
            'seo_data'     =>  array(
                'title'    =>  $this->site_config->index_seo_title . '-' . $catname_info . '(' . $cate_list_info . ')',
                'keywords' =>  $this->get_city() . '-' . $catname_info . '(' . $cate_list_info . ')',
                'description'  =>  '乐享生活' . $this->get_city() . '的' . $this->title . '包含各类教育培训机构。您可以搜索（' . $shop_str . '）等，对它们进行了解。',
            ),
        ));
		$this->redirect('brand');
	}

	//品牌专区页面
	function brand_zone()
	{
		$brandId  = IFilter::act(IReq::get('id'),'int');
		$brandRow = Api::run('getBrandInfo',$brandId);
		if(!$brandRow)
		{
			IError::show(403,'品牌信息不存在');
		}
		$sellerDB = new IModel('seller');
		$seller = $sellerDB->getObj("brand_id = '$brandId'", 'id');
		header("location: " . IUrl::creatUrl('/school/show/id/' . $seller['id']));
		/*$this->setRenderData(array('brandId' => $brandId,'brandRow' => $brandRow));
		$this->redirect('brand_zone');*/
	}

	function seller()
	{
		$id  = IFilter::act(IReq::get('id'),'int');
		header("location: " . IUrl::creatUrl('/school/show/id/' . $id));
		/*$this->setRenderData(array('brandId' => $brandId,'brandRow' => $brandRow));
		$this->redirect('brand_zone');*/
	}

	
	// 根据
	function get_order_chit_ajax()
	{
	    $cprice = IFilter::act(IReq::get('cprice'),'float');
	    $stime = IFilter::act(IReq::get('stime'),'int');
	    $statement = IFilter::act(IReq::get('statement'),'int');
	    $id = IFilter::act(IReq::get('id'),'int');
	    $type = IFilter::act(IReq::get('type'));
	    $num = IFilter::act(IReq::get('num'),'int');
	    
	    if ( $statement == 1 )
	    {
	        /**
	        $dprice = order_class::get_dprice_by_cprice( $cprice );
	        $rprice = order_class::get_rprice_by_cprice($cprice, $dprice);
	        $chit = order_class::get_order_chit($dprice, $rprice, $stime);
	        **/
	        $countSumObj = new CountSum($this->user['user_id']);
	        $result = $countSumObj->cart_count($id,$type,$num,$promo,$active_id, $cprice, 1, 1, 1, $cprice );
	        $chit = $result['max_prop_info']['order_chit'];
	    } else {
	        $chit = order_class::get_ding_order_chit( 10000, 8500, $cprice );  // 第一个参数和第二个参数无用，随便填写
	    }
	    if ( $chit % 10 != 0 )
	    {
	        $chit = order_class::get_max_input_order_chit( $chit );
	    }
	    
	    $arr = array(
	        'chit' =>  $chit,
	    );
	    echo $this->json_result( $arr );
	}
	// 计算定金额度的其它信息
	function get_dprice_info_ajax()
	{
	    $dprice = IFilter::act(IReq::get('dprice'),'float');
	    $market_price = IFilter::act(IReq::get('market_price'),'float');
	    $stime = IFilter::act(IReq::get('stime'),'int');
	     
	    if ( !$dprice )
	    {
	        $this->json_error('定金不正确');
	        exit();
	    }
	     
	     
	    if ( !$market_price )
	    {
	        $this->json_error('原价不正确');
	        exit();
	    }
	     
	     
	    if ( !$stime )
	    {
	        $this->json_error('上课时间不正确');
	        exit();
	    }
	     
	    $rprice = order_class::get_rprice($dprice);
	    $chit = order_class::get_order_chit($dprice, $rprice, $stime);
	    $rest_price = order_class::get_order_rest_price($market_price, $chit);
	    $arr = array(
	        'dprice'   =>  $dprice + $rprice,
	        'chit'     =>  $chit,
	        'rest_price'   => $rest_price,
	    );
	
	    echo $this->json_result($arr);
	}


	function get_current_chit(){
		$price = intval(IReq::get('price'));
		$seller_id = intval(IReq::get('seller_id'));
		$info = order_class::get_new_order_max_cprice2($price, $seller_id);
		echo json_encode($info);
	}

	function get_chit_info(){
		$prop = intval(IReq::get('prop'));
		$seller_id = intval(IReq::get('seller_id'));
		
		$barnd_chit_db = new IQuery('brand_chit');
		if ( $seller_id > 0 )
		    $barnd_chit_db->where = 'seller_id = ' . $seller_id . ' and max_order_chit = ' . $prop;
		else
		    $barnd_chit_db->where = 'brand_id = 247 and max_order_chit = ' . $prop;
		$info = $barnd_chit_db->getOne();
		if($info){
			$info['limittime'] = date('Y-m-d',$info['limittime']);
		}
		echo json_encode($info);
	}

	function get_brand_list_ajax()
	{
	    $page = intval(IReq::get('page'));
	    $page = max( $page, 1 );
        $page_size = 10;
        $brand_db = new IQuery('brand AS b');
        $brand_db->join = "left join seller AS s ON b.id = s.brand_id";
        $brand_db->where = "b.logo != '' AND s.is_vip = '1' AND b.description != '' AND b.shortname != ''";
        $brand_db->order = 'b.id desc';
        $brand_db->fields = 'b.*,s.id as seller_id';
        $brand_db->page = $page;
        $brand_db->pagesize = $page_size;
        $brand_list = $brand_db->find();
	    
	    if( $brand_list )
	    {
	    	foreach($brand_list AS $idx => $brand)
	    	{
	    		$brand_list[$idx]['address'] = mb_substr($brand['address'], 0, 11, 'utf-8');
	    		$brand_list[$idx]['description'] = mb_substr($brand['description'], 0, 30, 'utf-8');
	    	}
	    	$brand_list['num'] = count($brand_list);
	    	$brand_list['page'] = $page + 1;
	    }
	    else
	    {
	    	$brand_list['num'] = 0;
	    	$brand_list['page'] = 1;
	    }
	    echo json_encode($brand_list);
	}
	
	public function test()
	{
	    $goods_list = goods_class::get_goods_by_catid(1, 10);
	    $desc_arr =  array();
	    if ( $goods_list )
	    {
	        foreach( $goods_list as $kk => $vv )
	        {
	            $seller_info = seller_class::get_seller_info($vv['seller_id']);
	            $desc_arr[] = $seller_info['true_name'];
	        }
	    }
	    $desc_str = implode('-', $desc_arr );
	    die( $desc_str );
	}
	
	public function tutor()
	{
	    $cat = IFilter::act(IReq::get('cat'),'int');
	    $this->catId = $cat;
	    $sex = IFilter::act(IReq::get('sex'),'int');
	    $region = IFilter::act(IReq::get('region'),'int');
	    $teaching_time = IFilter::act(IReq::get('teaching_time'),'int');
	    $teaching_type = IFilter::act(IReq::get('teaching_type'),'int');
	    $order = IFilter::act(IReq::get('order'));
	    $experience = IFilter::act(IReq::get('experience'),'int');
	    $search = array();
	    $seller_experience_arr = seller_tutor_class::get_seller_experience_arr();
	    $tutor_seller_list = seller_tutor_class::get_tutor_seller_list();
	    $where = 'b.category_ids = 16 and s.is_authentication = 1 and ' . db_create_in($tutor_seller_list, 's.id');
	    
	    $area_list = area::get_child_area_list('430200');
	    
	    //区域
	    $area_id = IFilter::act(IReq::get('area'), 'int');
	    $seller_arr = array();
	    if ( $area_id )
	    {
	        $seller_db = new IQuery('seller');
	        $seller_db->where = 'area = ' . $area_id;
	        $seller_db->fields = 'id,type';
	        $seller_list = $seller_db->find();
	        if ( $seller_list )
	        {
	            foreach( $seller_list as $kk => $vv )
	            {
	                if ( !in_array( $vv['id'], $seller_arr ))
	                    $seller_arr[] = $vv['id'];
	            }
	        }
	    }
	    //添加区域的条件
	    if ( $seller_arr )
	        $where .= ' and ' .db_create_in( $seller_arr, 's.id');
	    
	    //dump($where);
	    
	    // 处理搜索条件
	    // 处理分类
	    if ( $cat )
	    {
	        $seller_arr = array();
	        $seller_tutor_list = seller_tutor_class::get_seller_tutor_list_by_cat($cat);
	        if ( $seller_tutor_list )
	        {
	            foreach( $seller_tutor_list as $kk => $vv)
	            {
	                if(!in_array($vv['seller_id'], $seller_arr))
	                    $seller_arr[] = $vv['seller_id'];
	            }
	        }
	        
	        $where .= ' and ' . db_create_in($seller_arr, 's.id');
	        $search['cat'] = $cat;
	    }
	    if ( $this->catId )
	    {
	        //查找分类信息
	        $catObj       = new IModel('category');
	        $this->cat_info = $catObj->getObj('id = '.$this->catId);
	    
	        if($this->cat_info == null)
	        {
	            IError::show(403,'此分类不存在');
	        }
	        
	        if ( $this->cat_info['parent_id'] > 0 )
	        {
	            $this->parent_cat_name = category_class::get_category_title($this->cat_info['parent_id']);
	        }
	           
	    
	        //获取子分类
	        $this->childId = goods_class::catChild($this->catId);
	        $cat_list = goods_class::catTree($this->catId);
	    }
	    
	    // 处理性别
	    if ( $sex )
	    {
	        $seller_arr = array();
	        $teacher_db = new IQuery('teacher as t');
	        $teacher_db->join = 'left join seller as s on t.seller_id = s.id';
	        $teacher_db->where = 's.is_authentication = 1 and t.sex = ' . $sex;
	        $teacher_db->fields = 's.id';
	        $teacher_list = $teacher_db->find();
	        if ( $teacher_list )
	        {
	            foreach( $teacher_list as $kk => $vv)
	            {
	                if (!in_array($vv['id'], $seller_arr))
	                    $seller_arr[] = $vv['id'];
	            }
	        }
	        
	        $where .= ' and ' . db_create_in($seller_arr, 's.id');
	        $search['sex'] = $sex;
	    }
	    
	    // 处理区域
	    if ( $region )
	    {
	        $where .= ' and area = ' . $region;
	        $search['region'] = $region;
	    }
	    
	    // 上课时间
	    if ( $teaching_time )
	    {
	        $where .= " and find_in_set('$teaching_time',s.teaching_time)";
	        $search['teaching_time'] = $teaching_time;
	    }
	    
// 	    // 教学方式
// 	    if ( $teaching_type )
// 	    {
// 	        $where .= " and find_in_set('$teaching_type',s.teaching_type)";
// 	        $search['teaching_type'] = $teaching_type;
// 	    }
	    
	    // 教龄
	    if ( $experience )
	    {
	        if ( isset($seller_experience_arr[$experience]))
	        {
	            if ( $seller_experience_arr[$experience]['min'] && $seller_experience_arr[$experience]['max'])
	               $where .= ' and (experience >= ' . $seller_experience_arr[$experience]['min'] . ' and experience < ' . $seller_experience_arr[$experience]['max'] . ')';
	            else
	                $where .= ' and experience >= ' . $seller_experience_arr[$experience]['min'];
	            $search['experience'] = $experience;
	        }
	    }
	    
// 	    // 排序
// 	    if ($order)
// 	    {
// 	        if ( in_array($order, array('tutor_price')))
// 	        {
// 	            $search['order'] = $order;
// 	            $order = 's.' . $order . ' desc';
// 	        }
// 	    }
	    
	    $page = intval(IReq::get('page'));
	    $page = max( $page, 1 );
	    $seller_list = seller_class::get_seller_list2($where, 's.*', $page, 12, $order);
	    
	    // 获取家教分类
	    $tutor_cate_list = category_class::get_category_list_by_parent(0);
	    $cates_arr = array();
	    $cates_arr_json = array();
	    if($tutor_cate_list)
	    {
	        foreach($tutor_cate_list as $kk => $vv)
	        {
	            $cates_arr[$vv['id']] = $vv['name'];
	            $cates_arr_json[] = array(
	                'text' => $vv['name'],
	                'value' => $vv['id'],
	            );
	        }
	    }
	    
	    if ( $seller_list['seller_list'] )
	    {
	        foreach( $seller_list['seller_list'] as $kk => $vv)
	        {
	            $seller_list['seller_list'][$kk]['price'] = seller_tutor_class::get_seller_tutor_price($vv['seller_tutor_list']);
	            $teaching_info = Teacher_class::get_teacher_info_by_seller2($vv['id']);
	            if ( $teaching_info )
	                $seller_list['seller_list'][$kk]['sex'] = $teaching_info['sex'];
	        }
	    }
	    
	    // 获取区域
	    $region_list = area::get_child_area_list(430200);
	    
	    // HOT老师排行榜
	    $hotest_tutor_seller_list = Seller_class::get_hotest_tutor_seller_list(5);
	    
	    
	    // 最新入驻老师
	    $latest_tutor_seller_list = Seller_class::get_latest_tutor_seller_list(5);

	    $this->setRenderData(array(
	        'seller_list'  =>  $seller_list['seller_list'],
	        'page_info'    =>  $seller_list['page_info'],
	        'cates_arr'    =>  $cates_arr,
	        'region_list'  =>  $region_list,
	        'teaching_type_arr'    =>  tutor_class::teaching_type_arr(),
	        'teaching_time'    =>  tutor_class::get_teaching_time2(),
	        'seller_experience_arr'    =>  $seller_experience_arr,
	        'search'       =>  $search,
	        'hotest_tutor_seller_list' => $hotest_tutor_seller_list['seller_list'],
	        'latest_tutor_seller_list' =>  $latest_tutor_seller_list['seller_list'],
	        'area_list'    =>  $area_list,
	        'cat_list'   => $cat_list,
	    ));
	    
	    $this->title = '家教列表';
	    
	    $this->redirect('tutor');
	}
	
	function tutor_info()
	{
	    $id = IFilter::act(IReq::get('id'),'int');
	    $type = IFilter::act(IReq::get('type'),'int');
	    $page = IFilter::act(IReq::get('page'),'int');
	    $page = max($page,1);
	    $page_size = 5;
	    if ( !$id )
	    {
	        IError::show(403,'参数不正确');
	    }
	    
	    $seller_info = seller_class::get_seller_info($id);
	    $brand_info = brand_class::get_brand_info($seller_info['brand_id']);
	    if ( !$seller_info || $brand_info['category_ids'] != 16)
	    {
	        IError::show(403, '家教教师信息不存在');
	    }
	    
	    $seller_info['teaching_time'] = ($seller_info['teaching_time']) ? unserialize($seller_info['teaching_time']) : array();
	    $seller_info['teaching_type'] = ($seller_info['teaching_type']) ? explode(',', $seller_info['teaching_type']) : array();
	    
	    // 增加浏览次数
	    seller_class::update_seller_views($id);
	    
	    // 获取评论次数和具体信息
	    $seller_comment_info = comment_class::get_tutor_comment_list($id);
	    $seller_info['comment_info'] = $seller_comment_info;
	    
	    // 获取家教列表
	    $seller_tutor_db = seller_tutor_class::get_seller_tutor_list_db($id, 1, 50);
	    $seller_info['seller_tutor_list'] = $seller_tutor_db->find();
	    
	    $grade_levels = array();
	    if ( $seller_info['seller_tutor_list'] )
	    {
	        foreach( $seller_info['seller_tutor_list'] as $kk => $vv )
	        {
	            if ( !in_array($vv['grade_level'], $grade_levels))
	                $grade_levels[] = $vv['grade_level'];
	        }
	    }
	    $seller_info['grade_level'] = $grade_levels;
	    
	    $teacher_info = Teacher_class::get_teacher_info_by_seller2($id);
	    $seller_info['teacher_info'] = $teacher_info;
	    
	    // 获取价格区间
	    $seller_info['price'] = seller_tutor_class::get_seller_tutor_price($seller_info['seller_tutor_list']);
	    
	    // 获取家教分类
	    $tutor_cate_list = category_class::get_category_list_by_parent(2);
	    $cates_arr = array();
	    if($tutor_cate_list)
	    {
	        foreach($tutor_cate_list as $kk => $vv)
	        {
	            $cates_arr[$vv['id']] = $vv['name'];
	        }
	    }
	    
	    // 手动分页
	    switch($type)
	    {
	        case 0:
	            $comment_list = $seller_info['comment_info']['comment_list'];
	            break;
	        case 1:
	            $comment_list = $seller_info['comment_info']['perfect_list'];
	            break;
	        case 2:
	            $comment_list = $seller_info['comment_info']['good_list'];
	            break;
	        case 3:
	            $comment_list = $seller_info['comment_info']['bad_list'];
	            break;
	    }
	    if( $comment_list )
	    {
	        $comment_list = array_chunk($comment_list, $page_size);
	        $page_count = sizeof($comment_list);
	        $comment_list = $comment_list[$page - 1];
	        if ( $comment_list )
	        {
	            foreach($comment_list as $kk => $vv)
	            {
	                $comment_list[$kk]['user_info'] = user_class::get_user_info($vv['user_id']);
	                $order_info = order_class::get_order_info($vv['order_no'], 2);
	                if ( $order_info['statement'] == 4 && $order_info['seller_tutor_id'] )
	                   $comment_list[$kk]['tutor_info'] = seller_tutor_class::get_seller_tutor_info($order_info['seller_tutor_id']);
	            }
	        }
	    } else {
	        $page_count = 0;
	    }
	    
	    // 手机端操作
	    if ( IClient::getDevice() == IClient::MOBILE )
	    {
	        // 全部评论
	        if ( $seller_info['comment_info']['comment_list'] )
	        {
	            foreach($seller_info['comment_info']['comment_list'] as $kk => $vv )
	            {
	                $seller_info['comment_info']['comment_list'][$kk]['user_info'] = user_class::get_user_info($vv['user_id']);
	                $order_info = order_class::get_order_info($vv['order_no'], 2);
	                if ( $order_info['statement'] == 4 && $order_info['seller_tutor_id'] )
	                    $seller_info['comment_info']['comment_list'][$kk]['tutor_info'] = seller_tutor_class::get_seller_tutor_info($order_info['seller_tutor_id']);
	            }
	        }
	        
	        // 好评
	        if ( $seller_info['comment_info']['perfect_list'] )
	        {
	            foreach($seller_info['comment_info']['perfect_list'] as $kk => $vv )
	            {
	                $seller_info['comment_info']['perfect_list'][$kk]['user_info'] = user_class::get_user_info($vv['user_id']);
	                $order_info = order_class::get_order_info($vv['order_no'], 2);
	                if ( $order_info['statement'] == 4 && $order_info['seller_tutor_id'] )
	                    $seller_info['comment_info']['perfect_list'][$kk]['tutor_info'] = seller_tutor_class::get_seller_tutor_info($order_info['seller_tutor_id']);
	            }
	        }
	        
	        // 中评
	        if ( $seller_info['comment_info']['good_list'] )
	        {
	            foreach($seller_info['comment_info']['good_list'] as $kk => $vv )
	            {
	                $seller_info['comment_info']['good_list'][$kk]['user_info'] = user_class::get_user_info($vv['user_id']);
	                $order_info = order_class::get_order_info($vv['order_no'], 2);
	                if ( $order_info['statement'] == 4 && $order_info['seller_tutor_id'] )
	                    $seller_info['comment_info']['good_list'][$kk]['tutor_info'] = seller_tutor_class::get_seller_tutor_info($order_info['seller_tutor_id']);
	            }
	        }
	        
	        // 差评
	        if ( $seller_info['comment_info']['bad_list'] )
	        {
	            foreach($seller_info['comment_info']['bad_list'] as $kk => $vv )
	            {
	                $seller_info['comment_info']['bad_list'][$kk]['user_info'] = user_class::get_user_info($vv['user_id']);
	                $order_info = order_class::get_order_info($vv['order_no'], 2);
	                if ( $order_info['statement'] == 4 && $order_info['seller_tutor_id'] )
	                    $seller_info['comment_info']['bad_list'][$kk]['tutor_info'] = seller_tutor_class::get_seller_tutor_info($order_info['seller_tutor_id']);
	            }
	        }
	    }
	    
	    // 推荐教师列表
	    $intro_tutor_seller_list = seller_class::get_intro_tutor_seller_list();
	    
	    // 检查教师是否接受预定
	    $is_receive_booking = seller_class::is_tutor_seller_receive_booking($seller_info['id']);
	    
	    $seller_info['point'] = comment_class::get_tutor_seller_point($id);
	    $this->setRenderData(array(
	        'seller_info'  =>  $seller_info,
	        'cates_arr'    =>  $cates_arr,
	        'teaching_time_arr'    =>  tutor_class::get_teaching_time2(),
	        'teaching_type_arr'    =>  tutor_class::teaching_type_arr(),
	        'grade_level_arr'      =>  tutor_class::get_grade_level_arr(),
	        'type'         =>  $type,
	        'page_count'   =>  $page_count,
	        'comment_list' =>  $comment_list,
	        'next_page' =>  ($page < $page_count) ? $page + 1 : 0,
	        'intro_tutor_seller_list'  =>  $intro_tutor_seller_list['seller_list'],
	        'is_rehired' => seller_class::check_seller_hired($seller_info['id'], $this->user['user_id']),
	        'is_receive_booking'   =>  $is_receive_booking,
	    ));
	    
	    $this->title = $seller_info['true_name'];
	    
	    $this->redirect('tutor_info');
	}
	
	function get_tutor_list_ajax()
	{
	    $cat = IFilter::act(IReq::get('cat'),'int');
	    $sex = IFilter::act(IReq::get('sex'),'int');
	    $region = IFilter::act(IReq::get('region'),'int');
	    $teaching_time = IFilter::act(IReq::get('teaching_time'),'int');
	    $teaching_type = IFilter::act(IReq::get('teaching_type'),'int');
	    $order = IFilter::act(IReq::get('order'));
	    $experience = IFilter::act(IReq::get('experience'),'int');
	    $search = array();
	    $seller_experience_arr = seller_tutor_class::get_seller_experience_arr();
	    $tutor_seller_list = seller_tutor_class::get_tutor_seller_list();
	    $where = ($tutor_seller_list) ? 's.is_authentication = 1 and ' . db_create_in($tutor_seller_list, 's.id') : 's.is_authentication = 1';
	     
	    // 处理搜索条件
	    // 处理分类
		    if ( $cat )
	    {
	        $seller_arr = array();
	        $seller_tutor_list = seller_tutor_class::get_seller_tutor_list_by_cat($cat);
	        if ( $seller_tutor_list )
	        {
	            foreach( $seller_tutor_list as $kk => $vv)
	            {
	                if(!in_array($vv['seller_id'], $seller_arr))
	                    $seller_arr[] = $vv['seller_id'];
	            }
	        }
	        
	        $where .= ' and ' . db_create_in($seller_arr, 's.id');
	        $search['cat'] = $cat;
	    }
	    if ( $this->catId )
	    {
	        //查找分类信息
	        $catObj       = new IModel('category');
	        $this->cat_info = $catObj->getObj('id = '.$this->catId);
	    
	        if($this->cat_info == null)
	        {
	            IError::show(403,'此分类不存在');
	        }
	        
	        if ( $this->cat_info['parent_id'] > 0 )
	        {
	            $this->parent_cat_name = category_class::get_category_title($this->cat_info['parent_id']);
	        }
	           
	    
	        //获取子分类
	        $this->childId = goods_class::catChild($this->catId);
	        $cat_list = goods_class::catTree($this->catId);
	    }
	     
	    // 处理性别
	    if ( $sex )
	    {
	        $seller_arr = array();
	        $teacher_db = new IQuery('teacher as t');
	        $teacher_db->join = 'left join seller as s on t.seller_id = s.id';
	        $teacher_db->where = 's.is_authentication = 1 and t.sex = ' . $sex;
	        $teacher_db->fields = 's.id';
	        $teacher_list = $teacher_db->find();
	        if ( $teacher_list )
	        {
	            foreach( $teacher_list as $kk => $vv)
	            {
	                if (!in_array($vv['id'], $seller_arr))
	                    $seller_arr[] = $vv['id'];
	            }
	        }
	         
	        $where .= ' and ' . db_create_in($seller_arr, 's.id');
	        $search['sex'] = $sex;
	    }
	     
	    // 处理区域
	    if ( $region )
	    {
	        $where .= ' and area = ' . $region;
	        $search['region'] = $region;
	    }
	     
	    // 上课时间
	    if ( $teaching_time )
	    {
	        $where .= " and find_in_set('teaching_time', $teaching_time)";
	        $search['teaching_time'] = $teaching_time;
	    }
	     
	    // 教学方式
	    if ( $teaching_type )
	    {
	        $where .= " and find_in_set('teaching_type', $teaching_type)";
	        $search['teaching_type'] = $teaching_type;
	    }
	     
	    // 教龄
	    if ( $experience )
	    {
	        if ( isset($seller_experience_arr[$experience]))
	        {
	            if ( $seller_experience_arr[$experience]['min'] && $seller_experience_arr[$experience]['max'])
	                $where .= ' and (experience >= ' . $seller_experience_arr[$experience]['min'] . ' and experience < ' . $seller_experience_arr[$experience]['max'] . ')';
	            else
	                $where .= ' and experience >= ' . $seller_experience_arr[$experience]['min'];
	            $search['experience'] = $experience;
	        }
	    }
	     
	    // 排序
	    if ($order)
	    {
	        if ( in_array($order, array('tutor_price')))
	        {
	            $search['order'] = $order;
	            $order = $order . ' desc';
	        }
	    }
	     
	    $page = intval(IReq::get('page'));
	    $page = max( $page, 1 );
	    $seller_list = seller_class::get_seller_list2($where, 's.*', $page, 12, $order);

	    if ( $seller_list['seller_list'] )
	    {
	        foreach( $seller_list['seller_list'] as $kk => $vv)
	        {
	            $seller_list['seller_list'][$kk]['price'] = seller_tutor_class::get_seller_tutor_price($vv['seller_tutor_list']);
	            $seller_list['seller_list'][$kk]['link'] = IUrl::creatUrl('/site/tutor_info/id/'.$vv['id']);
	            $str = '';
	            if( $vv['seller_tutor_list'] )
	            {
	                foreach($vv['seller_tutor_list'] as $k => $v)
	                {
	                    if (!$str)
	                        $str = tutor_class::get_tutor_category_title($v);
	                    else
	                        $str .= ' ' . tutor_class::get_tutor_category_title($v);
	                }
	            }
	            $seller_list['seller_list'][$kk]['str'] = $str;
	            $seller_list['seller_list'][$kk]['logo'] = ($seller_list['seller_list'][$kk]['logo']) ? $seller_list['seller_list'][$kk]['logo'] : get_default_icon($vv['sex']);
	        }
	    }
	    
	    $resultData = $seller_list['seller_list'];
	    if ( $resultData)
	    {
	        $resultData['num'] = $seller_list['result_count'];
	        $resultData['page'] = $page + 1;
	    } else {
	        $resultData['num'] = 0;
	        $resultData['page'] = 1;
	    }
	    
	    echo json_encode($resultData);
	}
	
	//虚拟商品展示
	
	function virtual()
	
	{
	    $goods_id = IFilter::act(IReq::get('id'),'int');
	
	
	
	    if(!$goods_id)
	
	    {
	
	        IError::show(403,"传递的参数不正确");
	
	        exit;
	
	    }
	
	
	
	    //使用商品id获得商品信息
	
	    $tb_goods = new IModel('goods');
	
	    $goods_info = $tb_goods->getObj('id='.$goods_id." AND is_del=0");
	
	    if(!$goods_info)
	
	    {
	
	        IError::show(403,"这件商品不存在");
	
	        exit;
	
	    }
	
	    if($goods_info['model_id'] != 9)
	
	    {
	
	        IError::show(403,"这件商品不存在");
	
	        exit;
	
	    }
	
	
	    //品牌名称
	
	    if($goods_info['brand_id'])
	
	    {
	
	        $tb_brand = new IModel('brand');
	
	        $brand_info = $tb_brand->getObj('id='.$goods_info['brand_id']);
	
	        if($brand_info)
	
	        {
	
	            $goods_info['brand'] = $brand_info['name'];
	
	        }
	
	    }
	
	
	
	    //获取商品分类
	
	    $categoryObj = new IModel('category_extend as ca,category as c');
	
	    $categoryList= $categoryObj->query('ca.goods_id = '.$goods_id.' and ca.category_id = c.id','c.id,c.name','ca.id desc',1);
	
	    $categoryRow = null;
	
	    if($categoryList)
	
	    {
	
	        $categoryRow = current($categoryList);
	
	    }
	
	    $goods_info['category'] = $categoryRow ? $categoryRow['id'] : 0;
	
	
	
	    //商品图片
	
	    $tb_goods_photo = new IQuery('goods_photo_relation as g');
	
	    $tb_goods_photo->fields = 'p.id AS photo_id,p.img ';
	
	    $tb_goods_photo->join = 'left join goods_photo as p on p.id=g.photo_id ';
	
	    $tb_goods_photo->where =' g.goods_id='.$goods_id;
	
	    $goods_info['photo'] = $tb_goods_photo->find();
	
	
	
	    //商品是否参加促销活动(团购，抢购)
	
	    $goods_info['promo']     = IReq::get('promo')     ? IReq::get('promo') : '';
	
	    $goods_info['active_id'] = IReq::get('active_id') ? IFilter::act(IReq::get('active_id'),'int') : 0;
	
	    if($goods_info['promo'])
	
	    {
	
	        $activeObj    = new Active($goods_info['promo'],$goods_info['active_id'],$this->user['user_id'],$goods_id);
	
	        $activeResult = $activeObj->data();
	
	        if(is_string($activeResult))
	
	        {
	
	            IError::show(403,$activeResult);
	
	        }
	
	        else
	
	        {
	
	            $goods_info[$goods_info['promo']] = $activeResult;
	
	        }
	
	    }
	
	
	
	    //获得扩展属性
	
	    $tb_attribute_goods = new IQuery('goods_attribute as g');
	
	    $tb_attribute_goods->join  = 'left join attribute as a on a.id=g.attribute_id ';
	
	    $tb_attribute_goods->fields=' a.name,g.attribute_value ';
	
	    $tb_attribute_goods->where = "goods_id='".$goods_id."' and attribute_id!=''";
	
	    $goods_info['attribute'] = $tb_attribute_goods->find();
	
	
	
	    //报名记录
	
	    $tb_shop = new IQuery('order_goods as og');
	
	    $tb_shop->join = 'left join order as o on o.id=og.order_id';
	
	    $tb_shop->fields = 'count(*) as totalNum';
	
	    $tb_shop->where = 'og.goods_id='.$goods_id.' and o.status = 5';
	
	    $shop_info = $tb_shop->find();
	
	    $goods_info['buy_num'] = 0;
	
	    if($shop_info)
	
	    {
	
	        $goods_info['buy_num'] = $shop_info[0]['totalNum'];
	
	    }
	
	
	
	    //报名前咨询
	
	    $tb_refer    = new IModel('refer');
	
	    $refeer_info = $tb_refer->getObj('goods_id='.$goods_id,'count(*) as totalNum');
	
	    $goods_info['refer'] = 0;
	
	    if($refeer_info)
	
	    {
	
	        $goods_info['refer'] = $refeer_info['totalNum'];
	
	        $goods_info['referlist'] = $tb_refer->query("goods_id='$goods_id'", '*', 'time DESC', 10);
	
	    }
	
	
	
	    //网友讨论
	
	    $tb_discussion = new IModel('discussion');
	
	    $discussion_info = $tb_discussion->getObj('goods_id='.$goods_id,'count(*) as totalNum');
	
	    $goods_info['discussion'] = 0;
	
	    if($discussion_info)
	
	    {
	
	        $goods_info['discussion'] = $discussion_info['totalNum'];
	
	    }
	
	
	
	    $tb_article_reply = new IModel('article_reply');
	
	    $tb_article = new IModel('article');
	
	    $article = $tb_article->getObj("goods_id='$goods_id'", 'id');
	
	    $goods_info['discussionlist'] = $tb_article_reply->query("article_id='$article[id]'", '*', 'add_time DESC', 10);
	
	
	
	    //获得商品的价格区间
	
	    $tb_product = new IModel('products');
	
	    $product_info = $tb_product->getObj('goods_id='.$goods_id,'max(sell_price) as maxSellPrice, min(sell_price) as minSellPrice ,max(market_price) as maxMarketPrice, min(market_price) as minMarketPrice');
	
	    $productnum = $tb_product->getObj('goods_id='.$goods_id, "count(*) AS num");
	
	    if(isset($product_info['maxSellPrice']) && $product_info['maxSellPrice'] && $productnum['num'] > 1)
	
	    {
	
	        $goods_info['sell_price']   .= '-' . $product_info['maxSellPrice'];
	
	        $goods_info['market_price'] .= '-' . $product_info['maxMarketPrice'];
	
	    }
	
	    $goods_info['productnum'] = $productnum['num'];
	
	    $goods_info['t_sell_price']   = $product_info['minSellPrice'] . '-' . $product_info['maxSellPrice'];
	
	    $goods_info['t_market_price'] = $product_info['minMarketPrice'] . '-' . $product_info['maxMarketPrice'];
	
	    //获得会员价
	
	    $countsumInstance = new countsum();
	
	    $goods_info['group_price'] = $countsumInstance->getGroupPrice($goods_id,'goods');
	
	
	
	    //获取商家信息
	
	    if($goods_info['seller_id'])
	
	    {
	
	        $sellerDB = new IModel('seller');
	
	        $goods_info['seller'] = $sellerDB->getObj('id = '.$goods_info['seller_id']);
	
	    }
	
	
	
	    //增加浏览次数
	
	    $visit    = ISafe::get('visit');
	
	    $checkStr = "#".$goods_id."#";
	
	    if($visit && strpos($visit,$checkStr) !== false)
	
	    {
	
	    }
	
	    else
	
	    {
	
	        $tb_goods->setData(array('visit' => 'visit + 1'));
	
	        $tb_goods->update('id = '.$goods_id,'visit');
	
	        $visit = $visit === null ? $checkStr : $visit.$checkStr;
	
	        ISafe::set('visit',$visit);
	
	    }
	
	
	
	    $productDB = new IModel('products');
	
	    $products = $productDB->query("goods_id = '$goods_id' AND is_show = '1'", '*', 'market_price ASC');
	
	    $spec_array = array();
	
	    $val_array = array();
	
	    $spec_array['name'] = $products[0]['cusname'];
	
	    foreach($products AS $product)
	
	    {
	
	        $dprice = order_class::get_dprice($product['market_price'], $product['cost_price'] );
	
	        $rprice = order_class::get_rprice($dprice);
	
	        $cprice = order_class::get_cprice( $dprice, $rprice );
	
	        $max_cprice = order_class::get_max_input_cprice( $cprice );
	
	        $max_order_chit = number_format( order_class::get_real_order_chit( $product['market_price'], $product['cost_price'], $max_cprice ), 2, '.', '');
	
	        $spec_array['value'][] = array(
	
	            'id' => $product['id'],
	
	            'cusval' => $product['cusval'],
	
	            'classnum' => $product['classnum'],
	
	            'month' => $product['month'],
	
	            'max_cprice' => $max_cprice,
	
	            'max_order_chit' => str_replace('.00', '', $max_order_chit)
	
	        );
	
	    }
	
	    $this->title = $goods_info['name'];
	
	    $this->setRenderData(array('goods_spec_array' => $spec_array));
	
	    $this->setRenderData(array('title' => $goods_info['name']));
	
	
	
	    $dprice = order_class::get_dprice($goods_info['market_price'], $goods_info['cost_price'] );
	
	    $rprice = order_class::get_rprice($dprice);
	
	    $goods_info['cprice'] = order_class::get_cprice( $dprice, $rprice );
	
	    $goods_info['max_cprice'] = order_class::get_max_input_cprice( $goods_info['cprice'] );
	
	    $goods_info['max_order_chit'] = number_format(order_class::get_real_order_chit($goods_info['market_price'], $goods_info['cost_price'], $goods_info['max_cprice'] ), 2, '.', '');
	
	
	
	    //get next
	
	    $goodsModel = new IModel('goods');
	
	    $nextid = $goodsModel->query("id > '$goods_id' AND is_del=0", 'id', 'id ASC', 1);
	
	    if(!$nextid[0]['id'])
	
	    {
	
	        $nextid = $goodsModel->query("id < '$goods_id' AND is_del=0", 'id', 'id ASC', 1);
	
	    }
	
	    $goods_info['nextid'] = $nextid[0]['id'];
	
	
	
	    $this->min_cprice = 10;
	
	    $this->min_order_chit = 20;
	
	
	
	    $goods_info['is_purchase'] = goods_class::is_goods_purchase($goods_info['limit_start_time'], $goods_info['limit_end_time'] );
	
	    $goods_info['content'] = nl2br( $goods_info['content'] );
	
	
	
	    //seo_data
	
	    $delimiter = '-';
	
	    $breadGuide = goods_class::catRecursion($goods_info['category']);
	
	    $catname_0 = $breadGuide[0]['name'];
	
	    $catname = $categoryList[sizeof( $categoryList) - 1]['name'];
	
	    $content = strip_tags($goods_info['content']);
	
	    $content = mb_substr( $content, 0, 50, 'utf-8');
	
	
	
	    $shop_catname = '教育机构';
	
	    $cate_list_info = $this->get_shop_cate_list($shop_catname);
	
	    $cate_list_info = implode($delimiter, $cate_list_info);
	
	
	
	    $goods_info['seo_data'] = array(
	
	        'title'    =>  $this->site_config->index_seo_title . '-' . $this->get_city() . '-' . $catname . '-' . $goods_info['name'],
	
	        'keywords' =>  '株洲-' . $shop_catname . '（' . $cate_list_info . '）-' . $catname_0 . '--' . $goods_info['seller']['shortname'],
	
	        'description'  =>  $goods_info['name'] .'，授课地点：' . $goods_info['seller']['address'] .'，' . $content,
	
	    );
	
	
	
	    $this->setRenderData($goods_info);
	
	    $this->redirect('virtual');
	
	}
	
	function virtual_success(){
	    $accounts_id = IFilter::act(IReq::get('id'),'int');
	
	    $accountsDB = new IQuery('goods_virtual_accounts as v');
	    $accountsDB->join = " left join goods as g on v.goods_id = g.id left join seller as s on g.seller_id = s.id";
	    $accountsDB->fields = "v.id,v.goods_id,v.accounts,v.status,g.name,g.seller_id,s.true_name";
	    $accountsDB->where = "v.id = ".$accounts_id;
	    $info = $accountsDB->getOne();
	
		$accArr = explode('-',$info['accounts']);

	    $this->setRenderData(array(
	    	'accounts' => $info,
	    	'acc_pic'  => $accArr
	    ));
	
	    $this->redirect('virtual_success');
	}
	
	function user_tutor_list()
	{
	    $page = IFilter::act(IReq::get('page'),'int');
	    $page = max($page, 1);
	    $page_size = 10;
	    $cat = IFilter::act(IReq::get('cat'),'int');
	    $sex = IFilter::act(IReq::get('sex'),'int');
	    $region = IFilter::act(IReq::get('region'),'int');
	    $order = IFilter::act(IReq::get('order'));
	    $where = '1 = 1';
	    
	    // 处理搜索条件
	    // 处理分类
	    if ( $cat )
	    {
	        $cat_name = category_class::get_category_title($cat);
	        if ( $cat_name )
	        {
	            $grade_arr = array();
	            $cate_db = new IQuery('category');
	            $cate_db->where = "name = '$cat_name'";
	            $cate_list = $cate_db->find();
	            if ( $cate_list )
	            {
	                foreach( $cate_list as $kk => $vv )
	                {
	                    $grade_arr[] = $vv['id'];
	                }
	            }
	            
	           $where .= ' and ' . db_create_in($grade_arr, 'grade');
	           $search['cat'] = $cat;
	        }
	    }
	     
	    // 处理性别
	    if ( $sex )
	    {	         
	        $where .= ' and gender = ' . $sex;
	        $search['sex'] = $sex;
	    }
	     
	    // 处理区域
	    if ( $region )
	    {
	        $where .= ' and region_id = ' . $region;
	        $search['region'] = $region;
	    }
	    
	    // 排序
	    if ($order)
	    {
	        if ( in_array($order, array('tutor_price')))
	        {
	            $search['order'] = $order;
	            $order = 'lowest_reward desc';
	        }
	    }
	    
	    $where .= ' and m.is_auth = 1';
	    $totur_db = tutor_class::get_tutor_list_db(0, 1, $page, $page_size);
	    $totur_db->join = 'left join member as m on m.user_id = iwebshop_tutor.user_id';
	    $totur_db->where = $where;
	    if ( $order )
	        $totur_db->order = $order;

	    $tutor_list = $totur_db->find();
	    if ( $tutor_list )
	    {
	        foreach($tutor_list as $kk => $vv)
	        {
	            $member_info = member_class::get_member_info($vv['user_id']);
	            $user_info = user_class::get_user_info($vv['user_id']);
	            if ( $member_info['is_auth'] )
	            {
	                $tutor_list[$kk]['true_name'] = $member_info['true_name'];
	                $tutor_list[$kk]['price'] = $vv['lowest_reward'];
	                $tutor_list[$kk]['price'] .= ($vv['highest_reward'] > 0 ) ? '-' . $vv['highest_reward'] : '';
	                $tutor_list[$kk]['head_ico'] = ( $user_info['head_ico'] ) ? $user_info['head_ico'] : 'views/mobile/skin/blue/images/front/user_ico.gif';
	            }
	        }
	    }
	    
	    // 获取家教分类
	    $tutor_cate_list = category_class::get_category_list_by_parent(2);
	    $cates_arr = array();
	    $cates_arr_json = array();
	    if($tutor_cate_list)
	    {
	        foreach($tutor_cate_list as $kk => $vv)
	        {
	            $cates_arr[$vv['id']] = $vv['name'];
	            $cates_arr_json[] = array(
	                'text' => $vv['name'],
	                'value' => $vv['id'],
	            );
	        }
	    }
	    
	    // 获取区域
	    $region_list = area::get_child_area_list(430200);
	    
	    // HOT老师排行榜
	    $hotest_tutor_seller_list = Seller_class::get_hotest_tutor_seller_list(5);
	     
	    // 最新入驻老师
	    $latest_tutor_seller_list = Seller_class::get_latest_tutor_seller_list(5);
	    $this->setRenderData(array(
	        'tutor_list'   =>  $tutor_list,
	        'cates_arr'    =>  $cates_arr,
	        'region_list'  =>  $region_list,
	        'page_info'    =>  $totur_db->getPageBar(),
	        'hotest_tutor_seller_list' => $hotest_tutor_seller_list['seller_list'],
	        'latest_tutor_seller_list' =>  $latest_tutor_seller_list['seller_list'],
	        'search'       =>  $search,
	    ));
	    
	    $this->redirect('user_tutor_list');
	}
	
	function get_user_tutor_list_ajax()
	{
	    $page = IFilter::act(IReq::get('page'),'int');
	    $page = max($page, 1);
	    $page_size = 10;
	    $cat = IFilter::act(IReq::get('cat'),'int');
	    $sex = IFilter::act(IReq::get('sex'),'int');
	    $region = IFilter::act(IReq::get('region'),'int');
	    $order = IFilter::act(IReq::get('order'));
	    $where = '1 = 1';
	     
	    // 处理搜索条件
	    // 处理分类
	    if ( $cat )
	    {
	        $cat_name = category_class::get_category_title($cat);
	        if ( $cat_name )
	        {
	            $grade_arr = array();
	            $cate_db = new IQuery('category');
	            $cate_db->where = "name = '$cat_name'";
	            $cate_list = $cate_db->find();
	            if ( $cate_list )
	            {
	                foreach( $cate_list as $kk => $vv )
	                {
	                    $grade_arr[] = $vv['id'];
	                }
	            }
	             
	            $where .= ' and ' . db_create_in($grade_arr, 'grade');
	            $search['cat'] = $cat;
	        }
	    }
	    
		// 处理性别
	    if ( $sex )
	    {
	        $where .= ' and gender = ' . $sex;
	        $search['sex'] = $sex;
	    }
	    
	    // 处理区域
	    if ( $region )
	    {
	        $where .= ' and region_id = ' . $region;
	        $search['region'] = $region;
	    }
	     
	    // 排序
	    if ($order)
	    {
	        if ( in_array($order, array('tutor_price')))
	        {
	            $search['order'] = $order;
	            $order = 'lowest_reward desc';
	        }
	    }
	     
	    //$where .= ' and m.is_auth = 1';
	    $totur_db = tutor_class::get_tutor_list_db(0, 1, $page, $page_size);
	    $totur_db->where = $where;
	    if ( $order )
	        $totur_db->order = $order;
	    
	    $tutor_list = $totur_db->find();
	    $arr = array();
	    if ( $tutor_list )
	    {
	        foreach($tutor_list as $kk => $vv)
	        {
	            $member_info = member_class::get_member_info($vv['user_id']);
	            $user_info = user_class::get_user_info($vv['user_id']);
	            if ( $member_info['is_auth'] )
	            {
	                $tutor_list[$kk]['true_name'] = $member_info['true_name'];
	                $tutor_list[$kk]['price'] = $vv['lowest_reward'];
	                $tutor_list[$kk]['price'] .= ($vv['highest_reward'] > 0 ) ? '-' . $vv['highest_reward'] : '';
	                $tutor_list[$kk]['head_ico'] = ( $user_info['head_ico'] ) ? $user_info['head_ico'] : 'views/mobile/skin/blue/images/front/user_ico.gif';
	                
	                $price = $vv['lowest_reward'];
	                $price .= ($vv['highest_reward'] > 0 ) ? '-' . $vv['highest_reward'] : '';
	                $arr[] = array(
	                    'true_name'    =>  $member_info['true_name'],
	                    'head_ico'     =>  ( $user_info['head_ico'] ) ? $user_info['head_ico'] : 'views/mobile/skin/blue/images/front/user_ico.gif',
	                    'price'        =>  $price,
	                    'grade'        =>  category_class::get_category_title($vv['grade_level']) . '/' . category_class::get_category_title($vv['grade']),
	                    'link'         =>  IUrl::creatUrl('/site/user_tutor_info/id/' . $vv['id']),
	                );
	            }
	        }
	    }
	     
	    // 获取家教分类
	    $tutor_cate_list = category_class::get_category_list_by_parent(2);
	    $cates_arr = array();
	    $cates_arr_json = array();
	    if($tutor_cate_list)
	    {
	        foreach($tutor_cate_list as $kk => $vv)
	        {
	            $cates_arr[$vv['id']] = $vv['name'];
	            $cates_arr_json[] = array(
	                'text' => $vv['name'],
	                'value' => $vv['id'],
	            );
	        }
	    }
	    
	    $resultData = $arr;
	    if ( $resultData)
	    {
	        $resultData['num'] = sizeof($arr);
	        $resultData['page'] = $page + 1;
	    } else {
	        $resultData['num'] = 0;
	        $resultData['page'] = 1;
	    }
	     
	    echo json_encode($resultData);
	}
	
	function user_tutor_info()
	{
	    $id = IFilter::act(IReq::get('id'),'int');
	    if ( !$id )
	    {
	        IError::show(403,'参数不正确');
	    }
	    
	    $tutor_info = tutor_class::get_tutor_info($id);
	    $member_info = member_class::get_member_info($tutor_info['user_id']);
	    $user_info = user_class::get_user_info($tutor_info['user_id']);
	    $tutor_info['true_name'] = $member_info['true_name'];
	    $tutor_info['head_icon'] = ( $user_info['head_ico'] ) ? $user_info['head_ico'] : 'views/mobile/skin/blue/images/front/user_ico.gif';
	    $tutor_info['test_reward'] = ($tutor_info['test_reward']) ? unserialize($tutor_info['test_reward']) : array();
	    $tutor_info['teaching_time'] = ($tutor_info['teaching_time']) ? unserialize($tutor_info['teaching_time']) : array();
	    
	    // 推荐教师列表
	    $intro_tutor_seller_list = seller_class::get_intro_tutor_seller_list();
	    
	    $this->setRenderData(array(
	        'tutor_info'   =>  $tutor_info,
	        'intro_tutor_seller_list'  =>  $intro_tutor_seller_list['seller_list'],
	        'id'   =>  $id,
	        'teaching_time_arr'    =>  tutor_class::get_teaching_time2(),
	    ));
	    $this->redirect('user_tutor_info');
	}
	


	function seat(){		

		$id = IFilter::act(IReq::get('id'));

		if(!$id){
			IError::show(403,'ID错误！');
		}

		//获取主体信息
		$seat_db = new IQuery('seat as s');
		$seat_db->join = " left join seat_goods as g on s.goods_id = g.goods_id";
		$seat_db->where = 's.goods_id='.$id;
		$data = $seat_db->getOne();

		if(!$data){
			IError::show(403,'商品不存在！');
		}

		$table_name = substr($data['table_name'],strpos($data['table_name'],'seat'));
		$seat_info_db = new IQuery($table_name);
		$seat_info = $seat_info_db->find();
	

		//map
		$map = '';
		$word = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];
		foreach($seat_info as $v){
			if($v['flag'] == 'gd'){
				$map[$v['rows']-1] .= '_';
			}else{
				$map[$v['rows']-1] .= $word[$v['flag']-1];
			}
		}
		$map = json_encode($map);		

		//grade
		//重新获取数据
		$seat_info_db->fields = 'flag,price,info';
		$seat_grade = $seat_info_db->find();
		// $a = array_unique($seat_grade);

		//二维数组去重
		foreach ($seat_grade as $v){
			$v=join(',',$v); 
				$temp[]=$v;
		}

		$temp=array_unique($temp);
		foreach ($temp as $k => $v){
			$temp[$k]=explode(',',$v); 
		}

		//转格式
		$grade = '';
		foreach($temp as $v){
			if($v[0] != 'gd'){
				$grade[$word[$v[0]-1]]['price'] = floatval($v[1]);
				$grade[$word[$v[0]-1]]['classes'] = 'cate_style_'.$v[0];
				$grade[$word[$v[0]-1]]['category'] = $v[2];
			}
		}
		$grade = json_encode($grade);

		//legend
		$legend = '';
		foreach($temp as $v){
			if($v[0] != 'gd'){
				$legend_tmp = array($word[$v[0]-1],'available',$v[2]);
				$legend[] = $legend_tmp;
			}
		}
		$legend[] = array('a','unavailable','已售');
		$legend = json_encode($legend);


		//已售座位
		$sold = '';
		$seat_info_db->fields = 'flag,price,info,rows,cols';		
		$seat_info_db->where = 'status=1';
		$sold_list = $seat_info_db->find();
		foreach($sold_list as $v){
			$sold_tmp = $v['rows'] . '_' . $v['cols'];
			$sold[] = $sold_tmp;
		}
		$sold = json_encode($sold);

		$this->setRenderData(array('id'=>$id));

		$this->setRenderData(array(
			'name' => $data['name'],
			'time' => date('Y-m-d H:i:s',$data['time']),
			'map' => $map,
			'grade' => $grade,
			'legend' => $legend,
			'sold' => $sold
		));

		$this->redirect('seat');
	}


	function signUp(){
		$name = IFilter::act(IReq::get('name'));
		$linkman = IFilter::act(IReq::get('linkman'));
		$phone = IFilter::act(IReq::get('phone'));
		$typeid = IFilter::act(IReq::get('typeid'));

		if(!$name || !$linkman || !$phone){
			echo json_encode(array('info'=>'请填写完整信息','status'=>0));
			return false;
		}

		$is_mob = preg_match('#^13[\d]{9}$|^14[5,7]{1}\d{8}$|^15[^4]{1}\d{8}$|^17[0,6,7,8]{1}\d{8}$|^18[\d]{9}$#', $phone) ? true : false;

		if(!$is_mob){
			echo json_encode(array('info'=>'请填写正确联系方式','status'=>0));
			return false;
		}

		$form_db = new IModel('form');
		$form_db->setData(array(
			'name'  =>  $name,
			'linkman'  =>  $linkman,
			'phone'  =>  $phone,
			'typeid'  =>  $typeid,
			'publish'  => time()
		));

		if($form_db->add()){
			echo json_encode(array('info'=>'提交成功','status'=>1));
			return false;
		}else{
			echo json_encode(array('info'=>'提交失败','status'=>0));
			return false;
		}
		

	}

	
// 	function free_class()
// 	{
// 	    $user_id = $this->user['user_id'];
// 	    $this->title = '免费课';
// 	    $member_info = array();
	    
// 	    if ( $user_id )
// 	       $member_info = member_class::get_member_info($user_id);
	    
// 	    $this->setRenderData(array(
// 	        'member_info'  =>  $member_info,
// 	    ));
	    
// 	    $this->redirect('free_class');
// 	}
	
	//特定商家主页
// 	function activity()
// 	{
// 	    $seller_id = IFilter::act(IReq::get('id'),'int');
// 	    $sellerRow = Api::run('getSellerInfo',$seller_id);
// 	    $user_id = $this->user['user_id'];
// 	    $member_info = array();
// 	    if ( $user_id )
// 	        $member_info = member_class::get_member_info($user_id);
	    
// 	    if ( !$sellerRow['is_system_seller'] )
// 	    {
// 	        header("location: " . IUrl::creatUrl('/site/home/id/' . $seller_id));
// 	        exit();
// 	    }
	    
// 	    if(!$sellerRow)
// 	    {
// 	        IError::show(403,'商户信息不存在');
// 	    }
	    
// 	    $this->title = $sellerRow['true_name'];
// 	    $this->setRenderData(array(
// 	        'sellerRow' => $sellerRow,
// 	        'seller_id' => $seller_id,
// 	        'member_info'  =>  $member_info,
// 	    ));
	    
// 	    $this->redirect($sellerRow['template']);
// 	}
// 	

}
