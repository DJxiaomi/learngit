<?php



/**

 * @copyright Copyright(c) 2011 hnlxsh

 * @file Simple.php

 * @brief

 * @author webning

 * @date 2011-03-22

 * @version 0.6

 * @note

 */

/**

 * @brief Simple

 * @class Simple

 * @note

 */

class Simple extends IController

{

    public $layout='site';



	function init()

	{

	    header( "Access-Control-Allow-Origin:*" );

        signup_class::quick_signup();

	}



	function login()
    {
        //如果已经登录，就跳到ucenter页面
        if($this->user)
        {
            $this->redirect("/ucenter/index");
        }
        else
        {
            $callback = IFilter::act(IReq::get('callback'));
            $this->callback = $callback;
            $this->title = '用户登录';
            $this->redirect('login');
        }
    }

    function login2(){
        $code = $_GET['code'];

        //微信快捷登陆
        $wechat = new wechat_class();
        $wechat->token = 'y53na1qnxJ6o1qj1';
        $wechat->appid = 'wx72fc7befef40f55a';
        $wechat->appSecret = 'acc1eb5e4531f811612e390111389f88';
        
        $wechat->valid();

        if(empty($code)){            
            $wechat->authorized('http://'.$_SERVER['HTTP_HOST'].'/simple/login2','snsapi_userinfo','base');
        }
       

        $openInfo = $wechat->getOpenid($code);
        
        $member_db = new IModel('member');
        $member_info = $member_db->getObj('openid="'.$openInfo['openid'].'"');
        
                
        if($member_info){
            $user_id = $member_info['user_id'];         

        }else{
            
            $info = $wechat->getUser($openInfo['access_token'],$openInfo['openid']);

            $user_db = new IModel('user');
            $user_db->setData(array(
                'username' => $info['nickname'],
                'head_ico' => $info['headimgurl']
            ));
            $user_id = $user_db->add();

            if($user_id)
            {
                
                $member_db->setData(array(
                    'user_id' => $user_id,
                    'openid'  => $info['openid'],
                    'time'    => ITime::getDateTime(),
                    'status'  => 1
                ));
                $member_db->add();
            }

          
           
        }        
         
        $userRow = user_class::get_user_info($user_id);
        plugin::trigger("userLoginCallback",$userRow);

        die("<script>location.href = '/ucenter/index';</script>");    

        

    }


	function reg()
    {
        if($this->user)
        {
            $this->redirect("/ucenter/index");
        }
        else
        {
            $callback = IFilter::act(IReq::get('callback'));
            $this->callback = $callback;
            $this->title = '用户注册';
            $this->redirect('reg');
        }
    }

	//退出登录

    function logout()

    {

    	plugin::trigger('clearUser');

    	$this->redirect('login');

    }



    //用户注册

    function reg_act()

    {

    	//调用_userInfo注册插件

    	$result = plugin::trigger("userRegAct",$_POST);

    	if(is_array($result))

    	{

			//自定义跳转页面

			$this->redirect('/site/success?message='.urlencode("注册成功！"));

    	}

    	else

    	{

    		$this->setError($result);

    		$this->redirect('reg',false);

    		Util::showMessage($result);

    	}

    }



    // ajax注册验证
    function reg_ajax()
    {
        $arr = array();
        $mobile     = IFilter::act(IReq::get('mobile','post'));
        $mobile_code = IFilter::act(IReq::get('mobile_code','post'));
        $promo_code = IFilter::act(IReq::get('promo_code','post'));
        $promo_code = ($promo_code) ? lcfirst($promo_code) : $promo_code;
        $username   = $mobile;
        $password   = IFilter::act(IReq::get('password','post'));
        $repassword = IFilter::act(IReq::get('repassword','post'));
        $captcha    = strtolower( IFilter::act(IReq::get('captcha','post')) );
        $_captcha   = strtolower( ISafe::get('captcha') );
                
        //获取注册配置参数
        $siteConfig = new Config('site_config');
        $reg_option = $siteConfig->reg_option;
        
        //$mobile_ere = "/^(((13[0-9]{1})|(15[0-9]{1})|(17[0-9]{1})|(18[0-9]{1}))+\d{8})$/";
        $mobile_ere = "/^1[34578]\d{9}$/";
        
        // 验证码信息
        $sms_info = Sms_class::get_sms_info( $mobile, 1 );
        
        if ( $promo_code != '')
        {
            $promotor_info = promotor_class::get_promotor_info($promo_code);
        }
        
        /*注册信息校验*/
        if ( $promo_code != '' && !$promotor_info )
        {
            $message = '推广码不存在';
        }
        else if($reg_option == 2)
        {
            $message = '当前禁止注册';
        } /* else if(!Util::is_username($username)) {
            $message = '用户名由2-20位字符';
        }  */else if (!preg_match('|\S{6,32}|',$password)) {
            $message = '密码为6-32位字符';
        } else if ( $password != $repassword ) {
            $message = '2次密码输入不一致';
        } else if ( !preg_match( $mobile_ere, $mobile ) ) {
            $message = '请输入正确的手机号码';
        } else if ( !$sms_info || ( $sms_info['code'] != $mobile_code ) ) {
            $message = '验证码错误';
        } else if ( time() > strtotime("+10 minutes", $sms_info['addtime'])) {
            $message = '验证码已过期';
        } else {
            $userObj = new IModel('user');
            $where = "username = '$username'";
            $userRow = $userObj->getObj($where);
            
            // 通过mobile获取用户信息
            $user_info = Member_class::get_member_info_by_mobile( $mobile );
            
            if ( $userRow || $user_info )
            {
                if ( $userRow )
                    $message = "用户名已注册";
                else
                  $message = '手机号码已注册';
            } 
            else 
            {
                //user表
                $userArray = array(
                    'username' => $username,
                    'password' => md5($password),
                    'promo_code'    => $promo_code
                );
                $userObj->setData($userArray);
                $user_id = $userObj->add();
                
                if($user_id)
                {
                    //member表
                    $memberArray = array(
                        'user_id' => $user_id,
                        'time'    => ITime::getDateTime(),
                        'status'  => $reg_option == 1 ? 3 : 1,
                        'mobile'  => $mobile,
                    );
                
                    $memberObj = new IModel('member');
                    $memberObj->setData($memberArray);
                    $memberObj->add();
                    
                    // 添加推广人
                    if ( $promo_code != '' && $promotor_info ) {
                      promotor_class::insert_promotor($promo_code, $promotor_info['promo_code'] );
                    }
                
                    //用户私密数据
                    ISafe::set('username',$username);
                    ISafe::set('user_id',$user_id);
                    ISafe::set('user_pwd',$userArray['password']);
                    
                    $message = 1;
                }
                else
                {
                    $message = '注册失败';
                }
            }
        }
        $arr['message'] = $message;
        echo json_encode( $arr );
    }



    function reg_pc_ajax()

    {

        $postdata = file_get_contents("php://input");

        $request = json_decode($postdata);

        

        $mobile     = IFilter::act(IReq::get('mobile','post'));

        $mobile_code = IFilter::act(IReq::get('mobile_code','post'));

        $promo_code = IFilter::act(IReq::get('promo_code','post'));
        
        $promo_code = ($promo_code) ? lcfirst($promo_code) : $promo_code;

        $username   = IFilter::act(IReq::get('username','post'));

        $password   = IFilter::act(IReq::get('password','post'));

        $repassword = IFilter::act(IReq::get('repassword','post'));

        $captcha    = strtolower( IFilter::act(IReq::get('captcha','post')) );

        $_captcha   = strtolower( ISafe::get('captcha') );

                

        //获取注册配置参数

        $siteConfig = new Config('site_config');

        $reg_option = $siteConfig->reg_option;

        

        $mobile_ere = "/^(((13[0-9]{1})|(15[0-9]{1})|(17[0-9]{1})|(18[0-9]{1}))+\d{8})$/";

        

        // 验证码信息

        $sms_info = Sms_class::get_sms_info( $mobile, 1 );
        
        // 读取推广码信息
        if ( $promo_code != '')
        {
            $promotor_info = promotor_class::get_promotor_info($promo_code);
        }

        $userObj = new IModel('user');

        $where = "username = '$username'";

        $userRow = $userObj->getObj($where);



        $user_info = Member_class::get_member_info_by_mobile( $mobile );

        /*注册信息校验*/

        if ( $promo_code != '' && !$promotor_info )
        {
            $message = '推广码错误';
        }
        else if($reg_option == 2)

        {

            $message = '当前网站禁止新用户注册';

        }else if(empty($username)) {

            $message = '请输入用户名';

        }elseif($userRow['id']){

            $message = '用户名已存在';

        } else if (!preg_match('|\S{6,32}|',$password)) {

            $message = '密码为6-32位字符';

        } else if ( $password != $repassword ) {

            $message = '2次密码输入不一致';

        } else if ( !preg_match( $mobile_ere, $mobile ) ) {

            $message = '请输入正确的手机号码';

        }elseif($user_info){

            $message = '该号码已存在';

        } else if ( !$sms_info || ( $sms_info['code'] != $mobile_code ) ) {

            $message = '验证码错误';

        } else if ( time() > strtotime("+10 minutes", $sms_info['addtime'])) {

            $message = '验证码已过期';

        }  else if ( !$_captcha || !$captcha || $captcha != $_captcha ) {

            $message = '验证码错误';

        } else {

            

            $userArray = array(

                'username' => $username,

                'password' => md5($password),
                'promo_code' => $promo_code

                //'email'    => $email,

            );

            $userObj->setData($userArray);

            $user_id = $userObj->add();

            

            if($user_id)

            {

                //member表

                $memberArray = array(

                    'user_id' => $user_id,

                    'time'    => ITime::getDateTime(),

                    'status'  => $reg_option == 1 ? 3 : 1,

                    'mobile'  => $mobile,

                );

            

                $memberObj = new IModel('member');

                $memberObj->setData($memberArray);

                $memberObj->add();
                

                // 添加推广人
                 if ( $promo_code != '' && $promotor_info ) {
                      promotor_class::insert_promotor($promo_code, $promotor_info['promo_code'] );
                 }
            

                //用户私密数据

                ISafe::set('username',$username);

                ISafe::set('user_id',$user_id);

                ISafe::set('user_pwd',$userArray['password']);

                

                echo 1;

                exit();

            }

            

            $message = '失败';

        }

        if($message)

        {

            $arr['msg'] = $message;

        }

        else

        {

            $arr['msg'] = 0;

        }

        echo json_encode($arr);

        exit;

    }

    //用户登录

    function login_act()

    {

    	//调用_userInfo登录插件

		$result = plugin::trigger('userLoginAct',$_POST);

		if(is_array($result))

		{

			//自定义跳转页面

			$callback = plugin::trigger('getCallback');

			if($callback)

			{

				$this->redirect($callback);

			}

			else

			{

				$this->redirect('/ucenter/index');

			}

		}

		else

		{

			$this->setError($result);

			$this->redirect('login',false);

			Util::showMessage($result);

		}

    }

    

    // ajax PC 登录验证

    function login_pc_ajax()

    {

        //usephp://input to get angular form value ---- added by jack 20160817

        //$postdata = file_get_contents("php://input");

        //$request = json_decode($postdata);

    

        //$login_info = IFilter::act($request->login_info);

        //$password   = IFilter::act($request->password);

        $login_info = IFilter::act(IReq::get('login_info','post'));

        $password   = IReq::get('password','post');

        $remember   = IFilter::act(IReq::get('remember','post'));

        $autoLogin  = IFilter::act(IReq::get('autoLogin','post'));

        $callback   = IFilter::act(IReq::get('callback'),'text');

    

        if($login_info == '')

        {

            $message = '请填写用户名或者邮箱';

        }

        else if(!preg_match('|\S{6,32}|',$password))

        {

            $message = '密码格式不正确,请输入6-32个字符';

        } else {

            //$password   = md5($password);

            //CheckRights::isValidUser($login_info,$password);

            //if($userRow = CheckRights::isValidUser($login_info,$password))

            $result = plugin::trigger('userLoginAct',$_POST);

            if ( is_array($result) )

            {

                //CheckRights::loginAfter($userRow);

                //记住帐号

                

                /**

                if($remember == 1)

                {

                    ICookie::set('loginName',$login_info);

                }

    

                //自动登录

                if($autoLogin == 1)

                {

                    ICookie::set('autoLogin',$autoLogin);

                }

                **/

                $message = '';

            } else {

                //邮箱未验证

                $userDB = new IModel('user as u,member as m');

                $userRow= $userDB->getObj(" (u.email = '{$login_info}' or u.username = '{$login_info}') and password = '{$password}' and u.id = m.user_id");

                if($userRow)

                {

                    $siteConfig = new Config('site_config');

                    if($userRow['status'] == 3)

                    {

                        if($siteConfig->reg_option == 1)

                        {

                            $message = "您的邮箱还未验证";

                        }

                        else

                        {

                            $message = '请联系管理员';

                        }

                    }

                    else if($userRow['status'] == 2)

                    {

                        $message = '请与管理员联系';

                    }

                }

                else

                {

                    $message = '用户名和密码错误';

                }

            }



        }

        if($message)

        {

            $arr['msg'] = $message;

            $arr['code'] = 0;

        }

        else

        {

            $arr['msg'] = '';

            $arr['code'] = 1;

            $arr['back'] = '/ucenter/index';

        }

    

        echo json_encode($arr);

        exit;

        //echo $message;

        //exit();

    }



    // ajax登录验证
    function login_ajax()
    {
        $login_info = IFilter::act(IReq::get('login_info','post'));
        $password   = IReq::get('password','post');
        $autoLogin  = IFilter::act(IReq::get('autoLogin','post'));
        $_POST['login_info'] = $login_info;
        $_POST['password'] = $password;
        $_POST['autoLogin'] = $autoLogin;
        $arr = array();

        if($login_info == '')
        {
            $message = '请填写用户名或者邮箱';
        }
        else if(!preg_match('|\S{6,32}|',$password))
        {
            $message = '密码长度6-32个字符';
        } 
        else 
        {
            $result = plugin::trigger('userLoginAct',$_POST);
            if(is_array($result))
            {
                $message = 1;
            } else {
                //邮箱未验证
                $userDB = new IModel('user as u,member as m');
                $userRow= $userDB->getObj(" (u.email = '{$login_info}' or u.username = '{$login_info}') and password = '{$password}' and u.id = m.user_id");
                if($userRow)
                {
                    $siteConfig = new Config('site_config');
                    if($userRow['status'] == 3)
                    {
                        if($siteConfig->reg_option == 1)
                        {
                            $message = "请验证邮箱";
                        }
                        else
                        {
                            $message = '请联系管理员';
                        }
                    }
                    else if($userRow['status'] == 2)
                    {
                        $message = '请与管理员联系';
                    }
                }
                else
                {
                    $message = '用户名和密码错误';
                }
            }
        }
        $arr['message'] = $message;
        echo json_encode($arr);
    }

    //商品加入购物车[ajax]

    function joinCart()

    {

    	$link      = IReq::get('link');

    	$goods_id  = IFilter::act(IReq::get('goods_id'),'int');

    	$goods_num = IReq::get('goods_num') === null ? 1 : intval(IReq::get('goods_num'));

		$type      = IFilter::act(IReq::get('type'));

		//加入购物车

    	$cartObj   = new Cart();

    	$addResult = $cartObj->add($goods_id,$goods_num,$type);



    	if($link != '')

    	{

    		if($addResult === false)

    		{

    			$this->cart(false);

    			Util::showMessage($cartObj->getError());

    		}

    		else

    		{

    			$this->redirect($link);

    		}

    	}

    	else

    	{

	    	if($addResult === false)

	    	{

		    	$result = array(

		    		'isError' => true,

		    		'message' => $cartObj->getError(),

		    	);

	    	}

	    	else

	    	{

		    	$result = array(

		    		'isError' => false,

		    		'message' => '添加成功',

		    	);

	    	}

	    	echo JSON::encode($result);

    	}

    }



    //根据goods_id获取货品

    function getProducts()

    {

    	$id           = IFilter::act(IReq::get('id'),'int');

    	$productObj   = new IModel('products');

    	$productsList = $productObj->query('goods_id = '.$id,'sell_price,id,spec_array,goods_id','store_nums desc',7);

		if($productsList)

		{

			foreach($productsList as $key => $val)

			{

				$productsList[$key]['specData'] = Block::show_spec($val['spec_array']);

			}

		}

		echo JSON::encode($productsList);

    }



    //删除购物车

    function removeCart()

    {

    	$link      = IReq::get('link');

    	$goods_id  = IFilter::act(IReq::get('goods_id'),'int');

    	$type      = IFilter::act(IReq::get('type'));



    	$cartObj   = new Cart();

    	$cartInfo  = $cartObj->getMyCart();

    	$delResult = $cartObj->del($goods_id,$type);



    	if($link != '')

    	{

    		if($delResult === false)

    		{

    			$this->cart(false);

    			Util::showMessage($cartObj->getError());

    		}

    		else

    		{

    			$this->redirect($link);

    		}

    	}

    	else

    	{

	    	if($delResult === false)

	    	{

	    		$result = array(

		    		'isError' => true,

		    		'message' => $cartObj->getError(),

	    		);

	    	}

	    	else

	    	{

		    	$goodsRow = $cartInfo[$type]['data'][$goods_id];

		    	$cartInfo['sum']   -= $goodsRow['sell_price'] * $goodsRow['count'];

		    	$cartInfo['count'] -= $goodsRow['count'];



		    	$result = array(

		    		'isError' => false,

		    		'data'    => $cartInfo,

		    	);

	    	}



	    	echo JSON::encode($result);

    	}

    }



    //清空购物车

    function clearCart()

    {

    	$cartObj = new Cart();

    	$cartObj->clear();

    	$this->redirect('cart');

    }



    //购物车div展示

    function showCart()

    {

    	$cartObj  = new Cart();

    	$cartList = $cartObj->getMyCart();

    	$data['data'] = array_merge($cartList['goods']['data'],$cartList['product']['data']);

    	$data['count']= $cartList['count'];

    	$data['sum']  = $cartList['sum'];

    	echo JSON::encode($data);

    }



    //购物车页面及商品价格计算[复杂]

    function cart($redirect = false)

    {

    	//防止页面刷新

    	header("Cache-Control: no-store, no-cache, must-revalidate");

		header("Cache-Control: post-check=0, pre-check=0", false);



		//开始计算购物车中的商品价格

    	$countObj = new CountSum();

    	$result   = $countObj->cart_count();

    	$sum = 0;

    	if ( $result && $result['goodsList'] )

    	{

    	    foreach ( $result['goodsList'] as $kk => $vv )

    	    {

    	        $result['goodsList'][$kk]['sum'] = $vv['market_price'] * $vv['count'];

    	        $sum += $vv['market_price'] * $vv['count'];

    	    }

    	    $result['final_sum'] = $sum;

    	    $result['sum'] = $sum;

    	}



    	if(is_string($result))

    	{

    		IError::show($result,403);

    	}



    	//返回值

    	$this->final_sum = $result['final_sum'];

    	$this->promotion = $result['promotion'];

    	$this->proReduce = $result['proReduce'];

    	$this->sum       = $result['sum'];

    	$this->goodsList = $result['goodsList'];

    	$this->count     = $result['count'];

    	$this->reduce    = $result['reduce'];

    	$this->weight    = $result['weight'];
        $this->title = '购物车';


		//渲染视图

    	$this->redirect('cart',$redirect);

    }



    //计算促销规则[ajax]

    function promotionRuleAjax()

    {

    	$goodsId   = IFilter::act(IReq::get("goodsId"),'int');

    	$productId = IFilter::act(IReq::get("productId"),'int');

    	$num       = IFilter::act(IReq::get("num"),'int');



    	if(!$goodsId || !$num)

    	{

			return;

    	}



		$goodsArray  = array();

		$productArray= array();



    	foreach($goodsId as $key => $goods_id)

    	{

    		$pid = $productId[$key];

    		$nVal= $num[$key];



    		if($pid > 0)

    		{

    			$productArray[$pid] = $nVal;

    		}

    		else

    		{

    			$goodsArray[$goods_id] = $nVal;

    		}

    	}



		$countSumObj    = new CountSum();

		$cartObj        = new Cart();

		$countSumResult = $countSumObj->goodsCount($cartObj->cartFormat(array("goods" => $goodsArray,"product" => $productArray)));



		$sum = 0;

		if ( $countSumResult && $countSumResult['goodsList'] )

		{

		    foreach ( $countSumResult['goodsList'] as $kk => $vv )

		    {

		        $countSumResult['goodsList'][$kk]['sum'] = $vv['market_price'] * $vv['count'];

		        $sum += $vv['market_price'] * $vv['count'];

		    }

		    $countSumResult['final_sum'] = $sum;

		    $countSumResult['sum'] = $sum;

		}

		

    	echo JSON::encode($countSumResult);

    }



    //填写订单信息cart2

    function cart2()

    {
		$id        = IFilter::act(IReq::get('id'),'int');

		$type      = IFilter::act(IReq::get('type'));//goods,product

		$promo     = IFilter::act(IReq::get('promo'));

		$active_id = IFilter::act(IReq::get('active_id'),'int');

		$buy_num   = IReq::get('num') ? IFilter::act(IReq::get('num'),'int') : 1;
		
		$buy_num = max($buy_num, 1);

		$tourist   = IReq::get('tourist');//游客方式购物

		$stime     = IFilter::act(IReq::get('stime'),'int');

		$dprice    = IFilter::act(IReq::get('dprice'),'float');

		$statement = IFilter::act(IReq::get('statement'),'int');

		$statement = max( $statement, 1);

		$choose_date = IFilter::act(IReq::get('choose_date'));

		$ischit = IFilter::act(IReq::get('ischit'),'int');
		
		$chitid = IFilter::act(IReq::get('chitid'),'int');
				
		$seller_tutor_id = IFilter::act(IReq::get('seller_tutor_id'),'int');
		
		$user_tutor_id = IFilter::act(IReq::get('user_tutor_id'),'int');
		
		$seller_id = IFilter::act(IReq::get('seller_id'),'int');
		
		$seats      = IFilter::act(IReq::get('seats'));
		
				// 验证总数
		if ( $id == 5426 )
		{
		    $order_db = new IQuery('order as o');
		    $order_db->join = 'left join order_goods as og on og.order_id = o.id';
		    $order_db->where = 'og.product_id = ' . $id . ' and o.pay_status = 1';
		    $lists = $order_db->find();
		    if ( sizeof($lists) >= 23 )
		    {
		        IError::show(403,'超过购买数量限制');
		        exit();
		    }
		}
		
		// 家教购买的验证
		if ( $statement == 4 )
		{
		    // 用户找家教
		    if ( $seller_tutor_id )
		    {
		        $seller_tutor_info = seller_tutor_class::get_seller_tutor_info($seller_tutor_id);
		        if ( !$seller_tutor_info )
		        {
		            IError::show(403, '该家教已停止授课');
		        }
		        
		        if (!seller_class::is_tutor_seller($seller_tutor_info['seller_id']))
		        {
		            IError::show(403, '没有这个老师');
		        }
		        
		        $seller_info = seller_class::get_seller_info($seller_tutor_info['seller_id']);
		        if ( !seller_class::is_tutor_seller_receive_booking($seller_info['id']))
		        {
		            IError::show(403, '老师课已排满，重新找一个老师吧');
		        }
		        if ( !$seller_info['is_authentication'])
		        {
		            IError::show(403, '该教师未实名认证');
		        }
		    }
		    if ( $user_tutor_id )
		    {
		        $seller_info = seller_class::get_seller_info($seller_id);
		        $brand_info = brand_class::get_brand_info($seller_info['brand_id']);
		        $user_tutor_info = tutor_class::get_tutor_info($user_tutor_id);
		        $user_tutor_info['test_reward'] = ($user_tutor_info['test_reward']) ? unserialize($user_tutor_info['test_reward']) : array(); 
		        
		        if ( !$user_tutor_info )
		        {
		            IError::show(403, '该家教已停止授课');
		        }
		        if ( !$seller_info )
		        {
		            IError::show(403, '没有这个老师');
		        }
		        if ( $brand_info['category_ids'] != 16 )
		        {
		            IError::show(403, '请检查教师类型');
		        }
		    }

		    
		    $id = 2196;
		    $type = 'product';
		    
		    // 默认只购买1个
		    $is_rehired = seller_class::check_seller_hired($seller_info['id'], $this->user['user_id']);
		    $buy_num = ($is_rehired) ? $buy_num : 1;
		}

    	// 未登录用户则进行登录跳转
		if($this->user['user_id'] == null)

    	{

    		if($id == 0 || $type == '')

    		{

    			$this->redirect('/simple/login?tourist&callback=/simple/cart2');

    		}

    		else

    		{

    		    if ( $statement == 2 && $stime > 0 )
                {
                    // 专用券
                    if ( $ischit && $chitid > 0 )
                    {
                        if($dprice > 0)
                        {
                            $url  = '/simple/login?tourist&callback=/simple/cart2/id/'.$id.'/type/'.$type.'/num/'.$buy_num."/statement/$statement/stime/$stime/dprice/$dprice/ischit/$ischit/chitid/$chitid";
                        }
                        else
                        {
                            $url  = '/simple/login?tourist&callback=/site/chit';
                        }
                    } else {    // 通用券
                        if($dprice > 0)
                        {
                            $url  = '/simple/login?tourist&callback=/simple/cart2/id/'.$id.'/type/'.$type.'/num/'.$buy_num."/statement/$statement/stime/$stime/dprice/$dprice";
                        }
                        else
                        {
                            $url  = '/simple/login?tourist&callback=/site/chit';
                        }
                    }


                }
                else if ( $statement == 3)
                {
                    $url  = '/simple/login?tourist&callback=/simple/cart2/id/'.$id.'/type/'.$type.'/num/'.$buy_num ."/statement/$statement/dprice/$dprice/choose_date/$choose_date";
                }
                else if ( $statement == 4)
                {
                    $url  = '/simple/login?tourist&callback=/simple/cart2/num/'.$buy_num.'/statement/'.$statement.'/seller_tutor_id/'.$seller_tutor_id;
                }
		else if ( $statement == 5)
                {
                    $url  = '/simple/login?tourist&callback=/simple/cart2/id/'.$id.'/seats/'.$seats.'/type/'.$type.'/num/'.$buy_num;
                } 
                else
                {
                    $url  = '/simple/login?tourist&callback=/simple/cart2/id/'.$id.'/type/'.$type.'/num/'.$buy_num;
                }

                $url .= $promo     ? '/promo/'.$promo         : '';

                $url .= $active_id ? '/active_id/'.$active_id : '';

                
                $this->redirect($url);
                exit;
    		}
    	}
	
    	// 定金模式
    	$site_config=new Config('site_config');
    	$dcommission = $site_config->dcommission;
    	$this->min_cprice = 10;
    	
    	if ( $statement == 3 )
    	{
    	    if ( $type == 'goods')
    	    {
    	        $goods_info = goods_class::get_goods_info($id);
    	        $dprice = $goods_info['market_price'] * $dcommission / 100 * $buy_num;
    	    } else {
    	        $product_info = products_class::get_product_info($id);
    	        $dprice = $product_info['market_price'] * $dcommission / 100 * $buy_num;
    	    }
    	} else if ( $statement == 2 && !$chitid )
    	{
    	    if ( $dprice < $this->min_cprice )
    	    {
    	        IError::show(403, '最低允许的购券价格为10元');
    	    }
    	} else if ( $statement == 4 )
    	{
    	    if ( $seller_tutor_info )
    	       $dprice = ($is_rehired) ? $seller_tutor_info['price'] : seller_tutor_class::get_tutor_dprice($seller_tutor_id);
    	    else if ( $user_tutor_info )
    	        $dprice = $user_tutor_info['lowest_reward'];
    	    if ( !$dprice )
    	    {
    	        IError::show(403, '获取家教价格失败');
    	    }
    	} else if( $statement == 5 ){
            //获取主体信息
            $seat_db = new IQuery('seat as s');
            $seat_db->join = " left join seat_goods as g on s.goods_id = g.goods_id";
            $seat_db->where = 's.goods_id='.$id;
            $seat_data = $seat_db->getOne();

            $table_name = substr($seat_data['table_name'],strpos($seat_data['table_name'],'seat'));

            //分解座位
            $seat_pos = '';
            $exp_arr = explode('-',$seats);
            foreach($exp_arr as $v){
                $sub_exp = explode('_',$v);
                $seat_pos[] = $sub_exp;
            }

            $seat_list = '';
            $seat_market = '';
            $seat_info_db = new IQuery($table_name);
            foreach($seat_pos as $v){
                $seat_info_db->where = 'rows='.$v[0].' and cols='.$v[1];
                $tmp_list = $seat_info_db->getOne();
                $tmp_list['position'] = $v[0] . '排' . $v[1] . '座';
                $seat_market = $seat_market + $tmp_list['price'];

                $seat_list[] = $tmp_list;
            }

            $seat_arr = explode('-',$seats);
            $new_seat = implode(',',$seat_arr);
            
            $give_seats = seat_class::get_nearby_seat($id,$seats);

            if($give_seats){
                $give_arr = explode('_',$give_seats);
            
                $seat_list[] = array(
                    'rows' => $give_arr[0],
                    'cols' => $give_arr[1],
                    'price' => 0,
                    'info' => '赠送',
                    'type' => 'give',
                    'position' => $give_arr[0].'排'. $give_arr[1] . '座'
                );

                $new_seat .= ','.$give_seats;
            }            

            $this->setRenderData(array(
                'cinema_info' => $seat_data,
                'seat_list' => $seat_list,
                'seat_market' => $seat_market,
                'seat_str' => $new_seat,
                'is_seat' => 1
            ));

            $dprice = $seat_market;
        
        }

		//游客的user_id默认为0

    	$user_id = ($this->user['user_id'] == null) ? 0 : $this->user['user_id'];

        if($chitid)
        {
            $check_chit = brand_chit_class::check_chit_by_id($chitid, $user_id);
            if($check_chit == -1)
            {
                IError::show(403, '购券时间已结束');
            }
            elseif($check_chit == -2)
            {
                IError::show(403, '超出购券数量');
            }
        }

		//计算商品

		$countSumObj = new CountSum($user_id);

		$result = $countSumObj->cart_count($id,$type,$buy_num,$promo,$active_id, $dprice, $statement, $stime );

		if($countSumObj->error )
		{
			IError::show(403,$countSumObj->error);

		}

    	//获取收货地址

    	$addressObj  = new IModel('address');

    	$addressList = $addressObj->query('user_id = '.$user_id,"*","is_default desc");



		//更新$addressList数据

    	foreach($addressList as $key => $val)

    	{

    		$temp = area::name($val['province'],$val['city'],$val['area']);

    		//if(isset($temp[$val['province']]) && isset($temp[$val['city']]) && isset($temp[$val['area']]))

    		//{

	    		$addressList[$key]['province_val'] = $temp[$val['province']];

	    		$addressList[$key]['city_val']     = $temp[$val['city']];

	    		$addressList[$key]['area_val']     = $temp[$val['area']];

	    		if($val['is_default'] == 1)

	    		{

	    			$this->defaultAddressId = $val['id'];

	    		}

    		//}

    	}



		//获取习惯方式

		$this->prop = array();

		$memberObj = new IModel('member');

		$memberRow = $memberObj->getObj('user_id = '.$user_id,'prop,custom,balance,true_name,telephone,mobile');

		

	    $orderObj = new IModel('order');

	    $orderRow = $orderObj->query('user_id = '.$user_id,'accept_name,mobile', 'id', 'DESC', 1);

	    

		//$memberRow = $memberObj->getObj('user_id = '.$user_id,'custom');

        $this->mtruename = !empty($memberRow['true_name']) ? $memberRow['true_name'] : '';

        $this->mtelephone = !empty($memberRow['telephone']) ? $memberRow['telephone'] : (!empty($memberRow['mobile']) ? $memberRow['mobile'] : '');

        if(!empty($orderRow[0]['accept_name']) && !empty($orderRow[0]['mobile']))

        {

            $defaultAddress = $addressObj->getObj("user_id = ".$user_id . " AND accept_name='" . $orderRow[0]['accept_name'] . "' AND mobile='" . $orderRow[0]['mobile'] . "'", 'id');

            if(!empty($defaultAddress))

            {

                $this->defaultAddressId = $defaultAddress['id'];

            }

        }

        if($memberRow['balance'] >= $result['final_sum'])

        {

            $this->custom = array(

                'payment'  => '1',

                'delivery' => '1',

                'takeself' => '1',

            );

        }

        else

        {

            $this->custom = array(

                'payment'  => '10',

                'delivery' => '1',

                'takeself' => '1',

            );

        }

		/**if(isset($memberRow['custom']) && $memberRow['custom'])

		{

			$this->custom = unserialize($memberRow['custom']);

		}

		else

		{

			$this->custom = array(

				'payment'  => '',

				'delivery' => '',

			);

		}

		**/

        

        // 获取学校信息

        $sell_count = 0;

        $market_count = 0;

        if ( $result['goodsList'] )

        {

            foreach( $result['goodsList'] as $kk => $vv )

            {

                $result['goodsList'][$kk]['seller_info'] = Seller_class::get_seller_info($vv['seller_id']);

                if ( $statement == 1 )

                {

                    $sell_count += $vv['sell_price'] * $vv['count'];

                    $market_count += $vv['market_price'] * $vv['count'];

                }

                else 

              {

                    $sell_count += $dprice * $vv['count'];

                    $market_count += $sell_count;

                }

            }

        }
        
        if ( $promo && $active_id )
        {
            
            $sell_count = $result['final_sum'];
            $market_count = $result['final_sum'];
            $result['max_prop_info']['max_cprice'] = 0;
            $result['max_prop_info']['order_chit'] = 0;
        }
        
        // 获取家教分类
        $tutor_cate_list = category_class::get_site_category(0);
        
       $this->setRenderData(array(
           'grade_level_arr'     =>  tutor_class::get_grade_level_arr(),
           'grade_arr'          =>  tutor_class::get_grade_arr(),
           'tutor_cate_list'    =>  $tutor_cate_list,
           'tutor_cate_list_json'  =>  json_encode($tutor_cate_list),
           'teaching_time'      =>  tutor_class::get_teaching_time(),
           'region_list'        =>  area::get_child_area_list(430200),
           'teaching_time2'     =>  tutor_class::get_teaching_time2(),
       ));
        
        // 如果是家教订单，并且有奖励机制，则付款金额加上奖励的金额
        if ( $user_tutor_info && $user_tutor_info['test_reward'] )
        {
            foreach( $user_tutor_info['test_reward'] as $kk => $vv )
            {
                $market_count += $vv['test_money'];
            }
        }

    	//返回值

		$this->gid       = $id;

		$this->type      = $type;

		$this->num       = $buy_num;

		$this->promo     = $promo;

		$this->active_id = $active_id;

    	$this->final_sum = $result['final_sum'];

    	$this->promotion = $result['promotion'];

    	$this->proReduce = $result['proReduce'];

    	$this->sum       = $result['sum'];

    	$this->goodsList = $result['goodsList'];

    	$this->count       = $result['count'];

    	$this->reduce      = $result['reduce'];

    	$this->weight      = $result['weight'];

    	$this->freeFreight = $result['freeFreight'];

    	$this->seller      = $result['seller'];

    	$this->max_cprice = $result['max_prop_info']['max_cprice'];

    	$this->order_chit = $result['max_prop_info']['order_chit'];
    	
    	$this->sell_count = $sell_count;

    	$this->market_count = $market_count;
    	
    	$this->seller_tutor_id = $seller_tutor_id;
    	
    	$this->user_tutor_id = $user_tutor_id;
    	
    	$this->seller_id = $seller_info['id'];
    	
    	//$prop_list_db = prop_class::get_prop_list_db(10000, 1, $user_id);
    	//$prop_list = $prop_list_db->find();
    	$my_prop_db = API::run('getUserPropList', $user_id, 1, 10000);
    	$my_prop_list = $my_prop_db->find();
    	$paging = $my_prop_db->paging;
    	$this->prop_list = $my_prop_list;
    	
    	//$this->yf = $final_yf;

    	//$this->final_yf = number_format( $final_yf - $this->order_chit, 2, '.', ''); 

        $this->title = '确认订单';

		//收货地址列表

		$this->addressList = $addressList;

		$this->addressListJson = json_encode( $addressList );
		
		// 是否显示详细信息
		//$this->is_show_tutor_detail = tutor_class::is_show_tutor_detail($user_id, $statement );
		$this->is_show_tutor_detail = false;

		//获取商品税金

		$this->goodsTax    = $result['tax'];

		$this->checkval = $checkval;

		$this->stime = $stime;

		$this->dprice = $dprice;

		$this->statement = $statement;

		$this->user_prop_count = $result['user_prop_count'];

		$this->choose_date = $choose_date;
		
		$this->ischit = $ischit;
		
		$this->chitid = $chitid;
		
		$this->is_rehired = $is_rehired;
		
		if ( $this->statement == 2 && $this->ischit && $this->chitid > 0 )
		{
		    $chit_info = brand_chit_class::get_chit_info($this->chitid);
		    $chit_info['name'] = brand_chit_class::get_chit_name($chit_info['max_price'], $chit_info['max_order_chit']) . '(' . $chit_info['shortname'] . ')';
		    $this->chit_info = $chit_info;
		}
		
		// 家教模式
		if ( $this->statement == 4 )
		{
		    $this->order_chit = $this->max_cprice = $this->order_chit = 0;
		    if ( $this->seller_tutor_id )
		    {
		        $this->seller_tutor_info = $seller_tutor_info;
		    } else {
		        $this->user_tutor_info = $user_tutor_info;
		    }
		}

    	//渲染页面
        if($chitid && $dprice == 0)
        {
            $this->redirect('/simple/cart3?payment=1&stime=1&statement=2&dprice=' . $dprice . '&ischit=1&chitid=' . $chitid . '&direct_gid=' . $this->gid . '&direct_num=1&direct_type=' . $this->type);
        }
    	else
        {
            $this->redirect('cart2');
        }
    }
    
    
    //虚拟商品
    function cart_virtual()
    
    {
    
        $id        = IFilter::act(IReq::get('id'),'int');
    
        $type      = IFilter::act(IReq::get('type'));//goods,product
    
        $promo     = IFilter::act(IReq::get('promo'));
    
        $active_id = IFilter::act(IReq::get('active_id'),'int');
    
        $buy_num   = IReq::get('num') ? IFilter::act(IReq::get('num'),'int') : 1;
    
        $buy_num = max($buy_num, 1);
    
        $tourist   = IReq::get('tourist');//游客方式购物
    
        $stime     = IFilter::act(IReq::get('stime'),'int');
    
        $dprice    = IFilter::act(IReq::get('dprice'),'float');
    
        $statement = IFilter::act(IReq::get('statement'),'int');
    
        $statement = max( $statement, 1);
    
        $choose_date = IFilter::act(IReq::get('choose_date'));
    
        $ischit = IFilter::act(IReq::get('ischit'),'int');
    
        $chitid = IFilter::act(IReq::get('chitid'),'int');
    
        $virtual = IFilter::act(IReq::get('virtual'),'int');  //虚拟商品
    
    
        $goodsDB = new IQuery('goods');
        $goodsDB->field = 'store_nums';
        $goodsDB->where = "id = ".$id;
        $goodsData = $goodsDB->find();
    
        if($goodsData[0]['store_nums'] <= 0){
            IError::show(403, '此商品已售完!');
        }
    
    
        // 未登录用户则进行登录跳转
        //if($tourist === null && $this->user['user_id'] == null)
        if($this->user['user_id'] == null)
    
        {
    
            if($id == 0 || $type == '')
    
            {
    
                $this->redirect('/simple/login?tourist&callback=/simple/cart2');
    
            }
    
            else
    
            {
    
                if ( $statement == 2 && $stime > 0 )
                {
                    // 专用券
                    if ( $ischit && $chitid > 0 )
                    {
                        if($dprice > 0)
                        {
                            $url  = '/simple/login?tourist&callback=/simple/cart2/id/'.$id.'/type/'.$type.'/num/'.$buy_num."/statement/$statement/stime/$stime/dprice/$dprice/ischit/$ischit/chitid/$chitid";
                        }
                        else
                        {
                            $url  = '/simple/login?tourist&callback=/site/chit';
                        }
                    } else {    // 通用券
                        if($dprice > 0)
                        {
                            $url  = '/simple/login?tourist&callback=/simple/cart2/id/'.$id.'/type/'.$type.'/num/'.$buy_num."/statement/$statement/stime/$stime/dprice/$dprice";
                        }
                        else
                        {
                            $url  = '/simple/login?tourist&callback=/site/chit';
                        }
                    }
    
    
                }
                else if ( $statement == 3)
                {
                    $url  = '/simple/login?tourist&callback=/simple/cart2/id/'.$id.'/type/'.$type.'/num/'.$buy_num ."/statement/$statement/dprice/$dprice/choose_date/$choose_date";
                }
                else
                {
                    $url  = '/simple/login?tourist&callback=/simple/cart2/id/'.$id.'/type/'.$type.'/num/'.$buy_num;
                }
    
                $url .= $promo     ? '/promo/'.$promo         : '';
    
                $url .= $active_id ? '/active_id/'.$active_id : '';
    
                $this->redirect($url);
                exit;
    
            }
    
        }
    
        // 定金模式
        $site_config=new Config('site_config');
        $dcommission = $site_config->dcommission;
        $this->min_cprice = 10;
    
    
    
    
        //游客的user_id默认为0
    
        $user_id = ($this->user['user_id'] == null) ? 0 : $this->user['user_id'];
    
        if($chitid)
        {
            $check_chit = brand_chit_class::check_chit_by_id($chitid, $user_id);
            if($check_chit == -1)
            {
                IError::show(403, '购券时间已结束');
            }
            elseif($check_chit == -2)
            {
                IError::show(403, '超出购券数量');
            }
        }
    
        //计算商品
    
        $countSumObj = new CountSum($user_id);
    
        $result = $countSumObj->cart_count($id,$type,$buy_num,$promo,$active_id, $dprice, $statement, $stime );
    
        if($countSumObj->error )
    
        {
    
            IError::show(403,$countSumObj->error);
    
        }
    
        $result['final_sum'] = $dprice;
    
    
    
        //获取收货地址
    
        $addressObj  = new IModel('address');
    
        $addressList = $addressObj->query('user_id = '.$user_id,"*","is_default desc");
    
    
    
        //更新$addressList数据
    
        foreach($addressList as $key => $val)
    
        {
    
            $temp = area::name($val['province'],$val['city'],$val['area']);
    
            //if(isset($temp[$val['province']]) && isset($temp[$val['city']]) && isset($temp[$val['area']]))
    
            //{
    
            $addressList[$key]['province_val'] = $temp[$val['province']];
    
            $addressList[$key]['city_val']     = $temp[$val['city']];
    
            $addressList[$key]['area_val']     = $temp[$val['area']];
    
            if($val['is_default'] == 1)
    
            {
    
                $this->defaultAddressId = $val['id'];
    
            }
    
            //}
    
        }
    
    
    
        //获取习惯方式
    
        $this->prop = array();
    
        $memberObj = new IModel('member');
    
        $memberRow = $memberObj->getObj('user_id = '.$user_id,'prop,custom,balance,true_name,telephone,mobile');
    
    
    
        $orderObj = new IModel('order');
    
        $orderRow = $orderObj->query('user_id = '.$user_id,'accept_name,mobile', 'id', 'DESC', 1);
    
    
    
        //$memberRow = $memberObj->getObj('user_id = '.$user_id,'custom');
    
        $this->mtruename = !empty($memberRow['true_name']) ? $memberRow['true_name'] : '';
    
        $this->mtelephone = !empty($memberRow['telephone']) ? $memberRow['telephone'] : (!empty($memberRow['mobile']) ? $memberRow['mobile'] : '');
    
        if(!empty($orderRow[0]['accept_name']) && !empty($orderRow[0]['mobile']))
    
        {
    
            $defaultAddress = $addressObj->getObj("user_id = ".$user_id . " AND accept_name='" . $orderRow[0]['accept_name'] . "' AND mobile='" . $orderRow[0]['mobile'] . "'", 'id');
    
            if(!empty($defaultAddress))
    
            {
    
                $this->defaultAddressId = $defaultAddress['id'];
    
            }
    
        }
    
        if($memberRow['balance'] >= $result['final_sum'])
    
        {
    
            $this->custom = array(
    
                'payment'  => '1',
    
                'delivery' => '1',
    
                'takeself' => '1',
    
            );
    
        }
    
        else
    
        {
    
            $this->custom = array(
    
                'payment'  => '10',
    
                'delivery' => '1',
    
                'takeself' => '1',
    
            );
    
        }
    
        /**if(isset($memberRow['custom']) && $memberRow['custom'])
    
        {
    
        $this->custom = unserialize($memberRow['custom']);
    
        }
    
        else
    
        {
    
        $this->custom = array(
    
        'payment'  => '',
    
        'delivery' => '',
    
        );
    
        }
    
        **/
    
    
    
        // 获取学校信息
    
        $sell_count = 0;
    
        $market_count = 0;
    
        if ( $result['goodsList'] )
    
        {
    
            foreach( $result['goodsList'] as $kk => $vv )
    
            {
    
                $result['goodsList'][$kk]['seller_info'] = Seller_class::get_seller_info($vv['seller_id']);
    
                if ( $statement == 1 )
    
                {
    
                    $sell_count += $vv['sell_price'] * $vv['count'];
    
                    $market_count += $vv['market_price'] * $vv['count'];
    
                }
    
                else
    
                {
    
                    $sell_count += $dprice * $vv['count'];
    
                    $market_count += $sell_count;
    
                }
    
            }
    
        }
    
        if ( $promo && $active_id )
        {
    
            $sell_count = $result['final_sum'];
            $market_count = $result['final_sum'];
            $result['max_prop_info']['max_cprice'] = 0;
            $result['max_prop_info']['order_chit'] = 0;
        }
    
        //返回值
    
        $this->gid       = $id;
    
        $this->type      = $type;
    
        $this->num       = $buy_num;
    
        $this->promo     = $promo;
    
        $this->active_id = $active_id;
    
        $this->final_sum = $result['final_sum'];
    
        $this->promotion = $result['promotion'];
    
        $this->proReduce = $result['proReduce'];
    
        $this->sum       = $result['sum'];
    
        $this->goodsList = $result['goodsList'];
    
        $this->count       = $result['count'];
    
        $this->reduce      = $result['reduce'];
    
        $this->weight      = $result['weight'];
    
        $this->freeFreight = $result['freeFreight'];
    
        $this->seller      = $result['seller'];
    
        $this->max_cprice = $result['max_prop_info']['max_cprice'];
    
        $this->order_chit = $result['max_prop_info']['order_chit'];
    
    
    
        $this->sell_count = $sell_count;
    
        $this->market_count = $market_count;
    
        //$this->yf = $final_yf;
    
        //$this->final_yf = number_format( $final_yf - $this->order_chit, 2, '.', '');
    
        $this->title = '确认订单';
    
        //收货地址列表
    
        $this->addressList = $addressList;
    
        $this->addressListJson = json_encode( $addressList );
    
    
    
        //获取商品税金
    
        $this->goodsTax    = $result['tax'];
    
    
    
        $this->checkval = $checkval;
    
        $this->stime = $stime;
    
        $this->dprice = $dprice;
    
        $this->statement = $statement;
    
        $this->user_prop_count = $result['user_prop_count'];
    
        $this->choose_date = $choose_date;
    
        $this->ischit = $ischit;
    
        $this->chitid = $chitid;
    
        if ( $this->statement == 2 && $this->ischit && $this->chitid > 0 )
        {
            $chit_info = brand_chit_class::get_chit_info($this->chitid);
            $chit_info['name'] = brand_chit_class::get_chit_name($chit_info['max_price'], $chit_info['max_order_chit']) . '(' . $chit_info['shortname'] . ')';
            $this->chit_info = $chit_info;
        }
    
        //渲染页面
        if($chitid && $dprice == 0)
        {
            $this->redirect('/simple/cart3?payment=1&stime=1&statement=2&dprice=' . $dprice . '&ischit=1&chitid=' . $chitid . '&direct_gid=' . $this->gid . '&direct_num=1&direct_type=' . $this->type);
        }
        else
        {
            $this->redirect('cart_virtual');
        }
    
    }



	/**

	 * 生成订单

	 */

    function cart3()

    {
        
    	$address_id    = IFilter::act(IReq::get('radio_address'),'int');

    	$delivery_id   = IFilter::act(IReq::get('delivery_id'),'int');

    	$delivery_id   = 1;

    	$accept_time   = IFilter::act(IReq::get('accept_time'));

    	$payment       = IFilter::act(IReq::get('payment'),'int');

    	$order_message = IFilter::act(IReq::get('message'));

    	$ticket_id     = IFilter::act(IReq::get('ticket_id'));

    	$taxes         = IFilter::act(IReq::get('taxes'),'float');

    	$tax_title     = IFilter::act(IReq::get('tax_title'));

    	$gid           = IFilter::act(IReq::get('direct_gid'),'int');

    	$num           = IFilter::act(IReq::get('direct_num'),'int');

    	$type          = IFilter::act(IReq::get('direct_type'));//商品或者货品

    	$promo         = IFilter::act(IReq::get('direct_promo'));

    	$active_id     = IFilter::act(IReq::get('direct_active_id'),'int');

    	$takeself      = IFilter::act(IReq::get('takeself'),'int');

	    $ticketUserd   = IFilter::act(IReq::get('ticketUserd'),'int');

    	$order_type    = 0;

    	$dataArray     = array();

    	$user_id       = ($this->user['user_id'] == null) ? 0 : $this->user['user_id'];

    	$stime         = IFilter::act(IReq::get('stime'),'int');

    	$dprice        = IFilter::act(IReq::get('dprice'),'float');

    	$statement     = IFilter::act(IReq::get('statement'),'float');

    	$statement = max( $statement, 1);
    	
		$ischit = IFilter::act(IReq::get('ischit'),'int');
		
		$chitid = IFilter::act(IReq::get('chitid'),'int');

	$seats    = IFilter::act(IReq::get('seats'));
    	// 全款模式下使用代金券

    	$use_coupon    = IFilter::act(IReq::get('use_coupon'),'int');

    	$use_coupon    = ( $statement == 1 && !$use_coupon ) ? 2 : $use_coupon;

    	$coupon_nums   = IFilter::act(IReq::get('coupon_nums'),'float');
    	
    	// 优惠券的ID
    	$user_prop_ids = IFilter::act(IReq::get('user_prop_ids'));
    	$user_prop_ids = explode(',', $user_prop_ids);

    	$choose_date = IFilter::act(IReq::get('choose_date'));
    	
    	// 家教模式
    	$seller_tutor_id = IFilter::act(IReq::get('seller_tutor_id'),'int');
    	
    	$user_tutor_id = IFilter::act(IReq::get('user_tutor_id'),'int');
    	
    	$is_tutor_detail = isset($_POST['tutor_detail']) ? true : false;
    	
    	$receive_method  = IFilter::act(IReq::get('receive_method'),'int');
    	
    	$teaching_time = IFilter::act(IReq::get('teaching_time'));
    	
    	$teaching_time2 = IFilter::act(IReq::get('teaching_time2'));
    	
    	$test_time = IFilter::act(IReq::get('test_time'));
    	
    	$test_type = IFilter::act(IReq::get('test_type'));
    	
    	$test_condition = IFilter::act(IReq::get('test_condition'));
    	
    	$test_money = IFilter::act(IReq::get('test_money'));
    	
    	$this->seller_id = IFilter::act(IReq::get('seller_id'), 'int');
    	
    	/**
    	if ( $statement == 4 && $is !$teaching_time2 || !$teaching_time2[0] )
    	{
    	    IError::show(403,'请选择上课时间');
    	}
    	**/
    	
    	$tutor_data = array(
    	    'gender'            =>  IFilter::act(IReq::get('gender'),'int'),
    	    'grade_level'       =>  IFilter::act(IReq::get('grade_level'),'int'),
    	    'grade'             =>  IFilter::act(IReq::get('grade'),'int'),
    	    'category_id'       =>  IFilter::act(IReq::get('category_id'),'int'),
    	    'lastest_scores'    =>  IFilter::act(IReq::get('lastest_scores'),'float'),
    	    'expected_scores'   =>  IFilter::act(IReq::get('expected_scores'),'float'),
    	    'lowest_reward'     =>  IFilter::act(IReq::get('lowest_reward'),'float'),
    	    'highest_reward'     => IFilter::act(IReq::get('highest_reward'),'float'),
    	    'expected_hours'    =>  IFilter::act(IReq::get('expected_hours'),'int'),
    	    'is_provide_transportation_fee'    =>  IFilter::act(IReq::get('is_provide_transportation_fee'),'int'),
    	    'is_provide_repast' =>  IFilter::act(IReq::get('is_provide_repast'),'int'),
    	    'region_id'         =>  IFilter::act(IReq::get('region_id'),'int'),
    	    'address'           =>  IFilter::act(IReq::get('address')),
    	    'address2'           =>  IFilter::act(IReq::get('address2')),
    	    'description'       =>  IFilter::act(IReq::get('description')),
    	    'user_id'           =>  $user_id,
    	    'teaching_time'     =>  IFilter::act(IReq::get('teaching_time')),
    	    'create_time'       =>  time(),
    	);



		//获取商品数据信息

    	$countSumObj = new CountSum($user_id);

		$goodsResult = $countSumObj->cart_count($gid,$type,$num,$promo,$active_id, $dprice, $statement, $stime, $use_coupon, $coupon_nums );

		if($countSumObj->error)

		{

			IError::show(403,$countSumObj->error);

		}
		
		// 家教购买的验证
		if ( $statement == 4 )
		{
		    if ( $seller_tutor_id )
		    {
		        $seller_tutor_info = seller_tutor_class::get_seller_tutor_info($seller_tutor_id);
		        if ( !$seller_tutor_info )
		        {
		            IError::show(403, '该家教信息可能已被删除');
		        }
		        if (!seller_class::is_tutor_seller($seller_tutor_info['seller_id']))
		        {
		            IError::show(403, '该学校无家教信息');
		        }
		    }
		    if ( $user_tutor_id )
		    {
		        $user_tutor_info = tutor_class::get_tutor_info($user_tutor_id);
		        if ( !$user_tutor_info )
		        {
		            IError::show(403, '该家教信息可能已被删除');
		        }
		    }
		}


		//处理收件地址

		//1,访客; 2,注册用户

		if($user_id == 0)

		{

			$addressRow = ISafe::get('address');

		}

		else

		{

			$addressDB = new IModel('address');
            if(!$address_id)
            {
                $accept_name   = IFilter::act(IReq::get('accept_name'));
                $mobile   = IFilter::act(IReq::get('mobile'));
                $addressRow= $addressDB->getObj("accept_name = '$accept_name' and mobile = '$mobile' and user_id = '$user_id'");
            }
            else
            {
                $addressRow= $addressDB->getObj('id = '.$address_id.' and user_id = '.$user_id);
            }

		}



		if(!$addressRow && !$chitid)

		{

			IError::show(403,"收货地址信息不存在");

		}

    	$accept_name   = IFilter::act($addressRow['accept_name'],'name');

    	$province      = $addressRow['province'];

    	$city          = $addressRow['city'];

    	$area          = $addressRow['area'];

    	$address       = IFilter::act($addressRow['address']);

    	$mobile        = IFilter::act($addressRow['mobile'],'mobile');

    	$telphone      = IFilter::act($addressRow['telphone'],'phone');

    	$zip           = IFilter::act($addressRow['zip'],'zip');



		//检查订单重复

    	$checkData = array(

    		"accept_name" => $accept_name,

    		"address"     => $address,

    		"mobile"      => $mobile,

    		"distribution"=> $delivery_id,

		    "pay_type"    => $payment,

    	);

    	

    	/**

    	 * 取消重复的检查

    	$result = order_class::checkRepeat($checkData,$goodsResult['goodsList']);

    	if( is_string($result) )

    	{

			IError::show(403,$result);

    	}

    	**/



		//配送方式,判断是否为货到付款

		$deliveryObj = new IModel('delivery');

		$deliveryRow = $deliveryObj->getObj('id = '.$delivery_id);

		if(!$deliveryRow)

		{

			IError::show(403,'配送方式不存在');

		}



		if($deliveryRow['type'] == 0)

		{

			if($payment == 0)

			{

				IError::show(403,'请选择正确的支付方式');

			}

		}

		else if($deliveryRow['type'] == 1)

		{

			$payment = 0;

		}

		else if($deliveryRow['type'] == 2)

		{

			if($takeself == 0)

			{

				IError::show(403,'请选择正确的自提点');

			}

		}

		//如果不是自提方式自动清空自提点

		if($deliveryRow['type'] != 2)

		{

			$takeself = 0;

		}



		if(!$gid)

		{

			//清空购物车

			// 暂时不清空购物车，用于测试

		    $cartObj = new Cart();

		    $cartObj->clear();

		}



    	//判断商品是否存在

    	if(is_string($goodsResult) || empty($goodsResult['goodsList']))

    	{

    		IError::show(403,'商品数据错误');

    	}



    	//加入促销活动

    	if($promo && $active_id)

    	{

    		$activeObject = new Active($promo,$active_id,$user_id,$gid,$type,$num);

    		$order_type = $activeObject->getOrderType();

    	}



		$paymentObj = new IModel('payment');

		$paymentRow = $paymentObj->getObj('id = '.$payment,'type,name');

		if(!$paymentRow)

		{

			IError::show(403,'支付方式不存在');

		}

		$paymentName= $paymentRow['name'];

		$paymentType= $paymentRow['type'];



		//最终订单金额计算
		$orderData = $countSumObj->countOrderFee($goodsResult,$province,$delivery_id,$payment,$taxes,0,$promo,$active_id, $dprice, $statement, $stime, $use_coupon, $coupon_nums  );

		if(is_string($orderData))

		{

			IError::show(403,$orderData);

			exit;

		}



		//根据商品所属商家不同批量生成订单

		$orderIdArray  = array();

		$orderNumArray = array();

		$final_sum     = 0;

		$goods_arr     = array();

		$seller_arr    = array();

		$tuition       = 0;
		
		$tutor_db = new IModel('tutor');

		foreach($orderData as $seller_id => $goodsResult)

		{

		    // 商品拆单
    		foreach( $goodsResult['goodsList'] as $Kk => $vv )

    		{

    			//生成的订单数据

    			$dataArray = array(

    				'order_no'            => Order_Class::createOrderNum(),

    				'user_id'             => $user_id,

    				'accept_name'         => $accept_name,

    				'pay_type'            => $payment,

    				'distribution'        => $delivery_id,

    				'postcode'            => $zip,

    				'telphone'            => $telphone,

    				'province'            => $province,

    				'city'                => $city,

    				'area'                => $area,

    				'address'             => $address,

    				'mobile'              => $mobile,

    				'create_time'         => ITime::getDateTime(),

    				'postscript'          => $order_message,

    				'accept_time'         => $accept_time,

    				'exp'                 => $vv['exp'],

    				'point'               => $vv['point'],

    				'type'                => $order_type,

    

    				//商品价格

    				'payable_amount'      => $vv['sum'],

    				'real_amount'         => $vv['sum'],

    

    				//运费价格

    				'payable_freight'     => $goodsResult['deliveryOrigPrice'],

    				'real_freight'        => $goodsResult['deliveryPrice'],

    

    				//手续费

    				'pay_fee'             => $goodsResult['paymentPrice'],

    

    				//税金

    				'invoice'             => $tax_title ? 1 : 0,

    				'invoice_title'       => $tax_title,

    				//'taxes'               => $goodsResult['taxPrice'],

    				'taxes'               => 0,

    

    				//优惠价格

    				//'promotions'          => $goodsResult['proReduce'] + $goodsResult['reduce'],

    				'promotions'	    	=> $vv['reduce'],

    	

    				//订单应付总额

    				//'order_amount'        => $goodsResult['orderAmountPrice'],

    				'order_amount'		    => $vv['sum'],

    		

    				//订单保价

    				//'insured'             => $goodsResult['insuredPrice'],

    				'insured'		        => 0,

    	

    				//自提点ID

    				'takeself'            => $takeself,

    

    				//促销活动ID

    				'active_id'           => $active_id,

    

    				//商家ID

    				'seller_id'           => $seller_id,

    

    				//备注信息

    				'note'                => '',

    			    

    			    'order_chit'          => ( $use_coupon == 1 && $coupon_nums > 0 ) ? $vv['order_chit'] : 0,
    			    
    			);

    			

    			// 如果是订金结算，则计算低佣金额和尾款

    			if ( $statement == 2 )

    			{

    			    $goods_info = $goodsResult['goodsList'][0];

    			    $cprice = $dprice;

    			    $dataArray['dprice'] = order_class::get_dprice_by_cprice( $cprice );

    			    $dataArray['rprice'] = order_class::get_rprice_by_cprice( $cprice, $dataArray['dprice'] );

    			    $dataArray['rest_price'] = $vv['rest_price'];

    			} else if ( $statement == 3 ) {

    			    $goods_info = $goodsResult['goodsList'][0];

    			    $cprice = $dprice;

    			    $dataArray['dprice'] = $cprice * $goods_info['count'];

    			    $dataArray['rest_price'] = $vv['rest_price'];

    			    $dataArray['choose_date'] = strtotime( $choose_date );

    			} else if ( $statement == 4 )
    			{
    			    $goods_info = $goodsResult['goodsList'][0];
    			    $dataArray['dprice'] = 0;
    			    $dataArray['rprice'] = 0;
    			    $dataArray['rest_price'] = 0;
    			    
    			    // 无奖励机制，读取商户发布的家教信息
    			    if ( $seller_tutor_info )
    			    {
    			        $dataArray['seller_id'] = $seller_tutor_info['seller_id'];
    			        $vv['seller_id'] = $dataArray['seller_id'];
    			        $dataArray['seller_tutor_id'] = $seller_tutor_id;
    			        	
    			        $seller_info = seller_class::get_seller_info($seller_tutor_info['seller_id']);
    			        $vv['name'] = $seller_info['true_name'];
    			        $vv['spec'] = category_class::get_category_title($seller_tutor_info['grade_level']) . category_class::get_category_title($seller_tutor_info['grade']);
    			        	
    			        $teacher_info = Teacher_class::get_teacher_info_by_seller2($seller_tutor_info['seller_id']);
    			        	
    			        // 是否续聘
    			        $dataArray['is_rehired'] = seller_class::check_seller_hired($seller_tutor_info['seller_id'], $user_id);
    			    }
    			    
    			    // 有奖励机制，读取用户发布的家教信息
    			    if ( $user_tutor_info && $this->seller_id )
    			    {
    			        $dataArray['seller_id'] = $this->seller_id;
    			        $vv['seller_id'] = $dataArray['seller_id'];
    			        $dataArray['user_tutor_id'] = $user_tutor_id;
    			        
    			        $seller_info = seller_class::get_seller_info($dataArray['seller_id']);
    			        $vv['name'] = $seller_info['true_name'];
    			        $vv['spec'] = category_class::get_category_title($user_tutor_info['grade_level']) . category_class::get_category_title($user_tutor_info['grade']);
    			        
    			        $teacher_info = Teacher_class::get_teacher_info_by_seller2($dataArray['seller_id']);
    			        
    			        // 是否续聘
    			        $dataArray['is_rehired'] = seller_class::check_seller_hired($dataArray['seller_id'], $user_id);
    			        
    			        // 如果有奖励机制，付款金额需要增加奖金
    			        $tutor_reward_list = array();
    			        if ( $test_time && $test_type && $test_condition && $test_money )
    			        {
    			            foreach($test_time as $k => $v )
    			            {
    			                if ( $vv && $test_type[$k] && $test_condition[$k] && $test_money[$k] )
    			                {
    			                    $tutor_reward_list[] = array(
    			                        'user_id'    =>  $user_id,
    			                        'seller_id'  =>  $dataArray['seller_id'],
    			                        'test_time'  =>  strtotime($test_time[$k]),
    			                        'test_type'  =>  $test_type[$k],
    			                        'test_condition' =>  $test_condition[$k],
    			                        'test_money' =>  $test_money[$k],
    			                        'status' =>  1,
    			                    );
    			                    $vv['sum'] += $test_money[$k];
    			                }
    			            }
    			        }
    			        
    			        $dataArray['payable_amount'] = $dataArray['real_amount'] = $dataArray['order_amount'] = $vv['sum'];
    			    }

    			    $vv['market_price'] = $dprice;
    			    $vv['sell_price'] = $dprice;
    			    $vv['cost_price'] = $dprice;
    			    $vv['img'] = $teacher_info['icon'];
    			    
    			    // 获取家教分类
                    $tutor_cate_list = category_class::get_category_list_by_parent(2);
                    $cates_arr = array();
                    if($tutor_cate_list)
                    {
                        foreach($tutor_cate_list as $key => $val)
                        {
                            $cates_arr[$val['id']] = $val['name'];
                        }
                    }
    			    
    			    $dataArray['tutor_type'] = ($is_tutor_detail) ? 1 : 0;
    			    
    			    // 续聘的操作
    			    if($dataArray['is_rehired'] )
    			    {
    			        $dataArray['receive_method'] = $receive_method;
    			        $class_time_rule = array();
    			        if ( $teaching_time && $teaching_time2 )
    			        {
    			            foreach( $teaching_time as $kk => $v )
    			            {
    			                if ( $teaching_time[$kk] && $teaching_time2[$kk] )
    			                {
    			                    $class_time_rule[] = array(
    			                        'week' => $v,
    			                        'time' => $teaching_time2[$kk],
    			                    );
    			                }
    			            }
    			        }
    			        
    			        $dataArray['class_time_rule'] = serialize($class_time_rule);
    			        $dataArray['class_start_date'] = tutor_class::get_start_date($class_time_rule);
    			        $dataArray['class_end_date'] = tutor_class::get_end_date($dataArray['class_start_date'], $class_time_rule, $num);
    			    }
    			}
    			

    			$dataArray['statement'] = $statement;

    			// 全款和定金模式下可使用代金券
    			if( in_array($statement, array(1,3)) && $user_prop_ids )
    			{
    			    $coupon_nums = 0;
    			    foreach( $user_prop_ids as $kks => $vvs )
    			    {
    			        $info = prop_class::get_prop_info($vvs);
    			        $coupon_nums += $info['value'];
    			        $ticket_list[] = $info;
    			    }
    			    $dataArray['coupon_nums'] = $coupon_nums;
    			    $dataArray['prop'] = implode(',', $user_prop_ids );    				
    				$dataArray['promotions']   += $coupon_nums;
    				
    				if ( $statement == 1)
    				{
    				    $dataArray['order_amount'] -= $coupon_nums;
    				    
    				    $dataArray['payable_amount'] -= $coupon_nums;
    				} else {
    				    $dataArray['order_amount'] -= $vv['order_chit'];
    				    
    				    $dataArray['payable_amount'] -= $vv['order_chit'];
    				}

    				if ( $ticket_list )
    				{
    				    foreach( $ticket_list as $k => $v )
    				    {
    				        $goodsResult['promotion'][] = array("plan" => "代金券","info" => "使用了￥".$v['value']."代金券");
    				    }
    				}
    			}

    

    			//促销规则

    			if(isset($goodsResult['promotion']) && $goodsResult['promotion'])

    			{

    				foreach($goodsResult['promotion'] as $key => $val)

    				{

    					$dataArray['note'] .= join("，",$val)."。";

    				}

    			}

    

    			$dataArray['order_amount'] = $dataArray['order_amount'] <= 0 ? 0 : $dataArray['order_amount'];
    			
    			// 处理1对1的学习券
    			if ( $ischit )
    			{
    			    $chit_info = brand_chit_class::get_chit_info($chitid);
    			    if ( $chit_info )
    			    {
    			        $seller_id = $chit_info['seller_id'];
    			        $dataArray['seller_id'] = $chit_info['seller_id'];
    			        $dataArray['chit_id'] = $chitid;
    			    }
    			    $vv['name'] = brand_chit_class::get_chit_name($chit_info['max_price'], $chit_info['max_order_chit']);
    			    $vv['spec'] = '';
    			}

    

    			//生成代金券
    			if ( $dataArray['order_amount'] > 0 && $statement == 2 )
    			{
    			    $chit_info = brand_chit_class::get_chit_info($dataArray['chit_id']);
    			    $prop_id = prop_class::add_prop('代金券', $chit_info['max_order_chit'], $seller_id, $user_id);
    			    if ( !$prop_id )
    			    {
    			        IError::show(403,'生成代金券失败');
    			    }

    			    $dataArray['prop'] = ( $dataArray['prop'] == '' ) ? $prop_id : $dataArray['prop'] . ',' . $prop_id;

    			}

if($seats){
                                     
                    
                    

                    $dataArray['seats'] = $seats;
                }
    			//生成订单插入order表中

    			$orderObj  = new IModel('order');

    			$orderObj->setData($dataArray);

    			$order_id = $orderObj->add();

    

    			if($order_id == false)

    			{

    				IError::show(403,'订单生成错误');

    			}

    

    			/*将订单中的商品插入到order_goods表*/

    	    	$orderInstance = new Order_Class();

    	    	$aa = array();

    	    	$aa['goodsList'][] = $vv;

    	    	$orderInstance->insertOrderGoods($order_id,$aa);
    	    	
    	    	
    			//订单金额小于等于0直接免单

    			if($dataArray['order_amount'] <= 0)

    			{

    				Order_Class::updateOrderStatus($dataArray['order_no']);

    			}

    			else

    			{

    				$orderIdArray[]  = $order_id;

    				$orderNumArray[] = $dataArray['order_no'];

    				$final_sum      += $dataArray['order_amount'];

    				

    				// 读取商家信息

    				$order_info = order_class::get_order_info($dataArray['order_no'], 2);

    				$seller_info = seller_class::get_seller_info($order_info['seller_id']);

    				$tuition += $vv['market_price'] * $vv['count'];

    				$goods_arr[] = $vv;

    				$seller_arr[] = $seller_info;

    			}

    			

    			// 生成订单日志

    			order_log_class::add_log( $order_id, 2 );
    			
    			// 插入奖励列表
    			if ( $statement == 4 && $user_tutor_info && $tutor_reward_list )
    			{
    			    $order_tutor_rewards_db = new IModel('order_tutor_rewards');
    			    foreach($tutor_reward_list as $k => $v)
    			    {
    			        $v['order_id'] = $order_id;
    			        $order_tutor_rewards_db->setData($v);
    			        $order_tutor_rewards_db->add();
    			    }
    			}
    			
    			// 添加家教具体信息到
    			if ($is_tutor_detail)
    			{
    			    $tutor_data['order_id'] = $order_id;
    			    $tutor_db->setData($tutor_data);
    			    $user_tutor_id = $tutor_db->add();
    			    
    			    // 生成合同
    			    tutor_class::create_contract($user_tutor_id);
    			}
                
    		}

		}

		

		//记录用户默认习惯的数据

		if(!isset($memberRow['custom']))

		{

			$memberObj = new IModel('member');

			$memberRow = $memberObj->getObj('user_id = '.$user_id,'custom');

		}



		$memberData = array(

			'custom' => serialize(

				array(

					'payment'  => $payment,

					'delivery' => $delivery_id,

					'takeself' => $takeself,

				)

			),

		);

		$memberObj->setData($memberData);

		$memberObj->update('user_id = '.$user_id);



		//收货地址的处理

		if($user_id)

		{

			$addressDefRow = $addressDB->getObj('user_id = '.$user_id.' and is_default = 1');

			if(!$addressDefRow)

			{

				$addressDB->setData(array('is_default' => 1));

				$addressDB->update('user_id = '.$user_id.' and id = '.$address_id);

			}

		}



		//获取备货时间

		$this->stockup_time = $this->_siteConfig->stockup_time ? $this->_siteConfig->stockup_time : 2;

		

		//课程名称

		$goods_name = '';

		if ( $goods_arr )

		{

		    foreach( $goods_arr as $kk => $vv )

		    {

		        $goods_name .= ( !$goods_name ) ? $vv['name'] : ',' . $vv['name'];

		        $goods_name .= ( $vv['spec'] ) ? ' - ' . $vv['spec'] : '';

		    }

		}

		if ( $statement == 3)

		    $goods_name .= ' (定金)';
		
		elseif ( $statement == 4)
		
		    $goods_name .= ' (家教)';

		

		//学校名称

		$seller_name_arr = array();

    	if ( $seller_arr )

		{

		    foreach( $seller_arr as $kk => $vv )

		    {

		        $seller_name_arr[] = $vv['true_name'];

		    }

		}



		//数据渲染

		$this->order_id    = join("_",$orderIdArray);

		$this->final_sum   = $final_sum;

		$this->order_num   = join(",",$orderNumArray);

		$this->payment     = $paymentName;

		$this->paymentType = $paymentType;

		$this->delivery    = $deliveryRow['name'];

		$this->tax_title   = $tax_title;

		$this->deliveryType= $deliveryRow['type'];

		$this->chitid = $chitid;

		$this->goods_name  = $goods_name;

		$this->seller_name = join(',', $seller_name_arr );



		//订单金额为0时，订单自动完成

		if($this->final_sum <= 0)

		{

			plugin::trigger('setCallback','/ucenter/order');
			
			if ( $dataArray['statement'] == 2 && $dataArray['chit_id'] > 0 )
			{
			    $this->redirect('/site/success/message/'.urlencode("学习券领取成功").'/?callback=/ucenter/redpacket');
			} else {
			    $this->redirect('/site/success/message/'.urlencode("订单确认成功"));
			}
		}

		else

		{
		    
		    if ( $dataArray['statement'] == 4 && $dataArray['tutor_type'] == 1)
		    {
		        $tutor_info = tutor_class::get_tutor_info_by_order_id($this->order_id);
		        $dataArray['tutor_info'] = $tutor_info;
		    }

			$this->setRenderData($dataArray);

			

			/**

			$order_info = order_class::get_order_info($dataArray['order_no'], 2);

			$seller_info = seller_class::get_seller_info($order_info['seller_id']);

			$goods_list = Order_goods_class::get_order_goods_list($order_info['id']);

			if ( $goods_list )

			{

			    foreach( $goods_list as $kk => $vv )

			    {

			        $goods_array = json_decode($vv['goods_array']);

			        $goods_list[$kk]['name'] = $goods_array->name;

			        $goods_list[$kk]['value'] = explode(':', $goods_array->value );

			    }

			}

			**/

			

			if ( $statement == 3)

			     $this->choose_date = date('Y-m-d', $order_info['choose_date']);

			$this->tuition = number_format( $tuition, 2, '.', '');

			//$this->ordedr_info = $order_info;

			$is_set_trade_passwd = member_class::is_set_trade_passwd($user_id);

			$this->is_set_trade_passwd = $is_set_trade_passwd;



			$this->title = '提交订单';

			$this->redirect('cart3');

		}

    }



    //到货通知处理动作

	function arrival_notice()

	{

		$user_id  = $this->user['user_id'];

		$email    = IFilter::act(IReq::get('email'));

		$mobile   = IFilter::act(IReq::get('mobile'));

		$goods_id = IFilter::act(IReq::get('goods_id'),'int');

		$register_time = ITime::getDateTime();



		if(!$goods_id)

		{

			IError::show(403,'商品ID不存在');

		}



		$model = new IModel('notify_registry');

		$obj = $model->getObj("email = '{$email}' and user_id = '{$user_id}' and goods_id = '$goods_id'");

		if(empty($obj))

		{

			$model->setData(array('email'=>$email,'user_id'=>$user_id,'mobile'=>$mobile,'goods_id'=>$goods_id,'register_time'=>$register_time));

			$model->add();

		}

		else

		{

			$model->setData(array('email'=>$email,'user_id'=>$user_id,'mobile'=>$mobile,'goods_id'=>$goods_id,'register_time'=>$register_time,'notify_status'=>0));

			$model->update('id = '.$obj['id']);

		}

		$this->redirect('/site/success',true);

	}

    function find_password()
    {
        $this->title = '找回密码';
        $this->redirect('find_password');
    }

	/**

	 * @brief 邮箱找回密码进行

	 */

    function find_password_email()

	{

		$username = IReq::get('username');

		if($username === null || !IValidate::name($username)  )

		{

			IError::show(403,"请输入正确的用户名");

		}



		$email = IReq::get("email");

		if($email === null || !IValidate::email($email ))

		{

			IError::show(403,"请输入正确的邮箱地址");

		}



		$tb_user  = new IModel("user as u,member as m");

		$username = IFilter::act($username);

		$email    = IFilter::act($email);

		$user     = $tb_user->getObj(" u.id = m.user_id and u.username='{$username}' AND m.email='{$email}' ");

		if(!$user)

		{

			IError::show(403,"对不起，用户不存在");

		}

		$hash = IHash::md5( microtime(true) .mt_rand());



		//重新找回密码的数据

		$tb_find_password = new IModel("find_password");

		$tb_find_password->setData( array( 'hash' => $hash ,'user_id' => $user['id'] , 'addtime' => time() ) );



		if($tb_find_password->query("`hash` = '{$hash}'") || $tb_find_password->add())

		{

			$url     = IUrl::getHost().IUrl::creatUrl("/simple/restore_password/hash/{$hash}/user_id/".$user['id']);

			$content = mailTemplate::findPassword(array("{url}" => $url));



			$smtp   = new SendMail();

			$result = $smtp->send($user['email'],"您的密码找回",$content);



			if($result===false)

			{

				IError::show(403,"发信失败,请重试！或者联系管理员查看邮件服务是否开启");

			}

		}

		else

		{

			IError::show(403,"生成HASH重复，请重试");

		}

		$message = "恭喜您，密码重置邮件已经发送！请到您的邮箱中去激活";

		$this->redirect("/site/success/message/".urlencode($message));

	}



	//手机短信找回密码
	function find_password_mobile()
	{
		$username = IReq::get('username');
		if($username === null || !Util::is_username($username))
		{
			IError::show(403,"请输入正确的用户名");
		}

		$mobile = IReq::get("mobile");
		if($mobile === null || !IValidate::mobi($mobile))
		{
			IError::show(403,"请输入正确的电话号码");
		}

		$mobile_code = IFilter::act(IReq::get('mobile_code'));
		if($mobile_code === null)
		{
			IError::show(403,"请输入短信校验码");
		}
		$type=IReq::get("type") + 0;
		if($type==0){
		$userDB = new IModel('user as u , member as m');
		$userRow = $userDB->getObj('u.username = "'.$username.'" and m.mobile = "'.$mobile.'" and u.id = m.user_id');
		$id=$userRow['user_id'];
		}elseif($type==1){
		$userDB = new IModel('seller');
		$userRow = $userDB->getObj('seller_name = "'.$username.'" and mobile = "'.$mobile.'"');
		$id=$userRow['id'];
		}else{
			IError::show(403,"未找到符合条件的记录");
		}
		
		if($userRow)
		{	
			$findPasswordDB = new IModel('find_password');
			$dataRow = $findPasswordDB->getObj('user_id = '.$id.' and hash = "'.$mobile_code.'" and type="'.$type.'"');
			if($dataRow)
			{
				//短信验证码已经过期
				if(time() - $dataRow['addtime'] > 300)
				{
					$findPasswordDB->del("user_id = ".$id." and type=".$type);
					IError::show(403,"您的短信校验码已经过期了，请重新找回密码");
				}
				else
				{
					$this->redirect('/simple/restore_password/hash/'.$mobile_code.'/user_id/'.$id.'/type/'.$type);
				}
			}
			else
			{
				IError::show(403,"您输入的短信校验码错误");
			}
		}
		else
		{
			IError::show(403,"用户名与手机号码不匹配");
		}
	}

	function find_password_mobile_ajax()
	{
	    //$postdata = file_get_contents("php://input");
	    //$request = json_decode($postdata);
	    
	    $username = IFilter::act( IReq::get('username') );
	    $mobile = IFilter::act( IReq::get('mobile') );
	    $mobile_code = IFilter::act( IReq::get('mobile_code') );
	    $type=IReq::get("type") + 0;
	    $result = array(
	        'status'   =>  0,
	        'str'      =>  '',
	    );	    
	    
	    if($username === null || !Util::is_username($username))
	    {
	        $result['str'] = '请输入正确的用户名';
	        die( json_encode( $result ));
	    }
	    
	    
	    if($mobile === null || !IValidate::mobi($mobile))
	    {
	        $result['str'] = '请输入正确的电话号码';
	        die( json_encode( $result ));
	    }
	    
	    
	    if($mobile_code === null)
	    {
	        $result['str'] = '请输入短信校验码';
	        die( json_encode( $result ));
	    }
	    	    
	    if($type==0){
	        $userDB = new IModel('user as u , member as m');
	        $userRow = $userDB->getObj('u.username = "'.$username.'" and m.mobile = "'.$mobile.'" and u.id = m.user_id');
	        $id=$userRow['user_id'];
	    }elseif($type==1){
	        $userDB = new IModel('seller');
	        $userRow = $userDB->getObj('seller_name = "'.$username.'" and mobile = "'.$mobile.'"');
	        $id=$userRow['id'];
	    }else{
	        $result['str'] = '未找到符合条件的记录';
	        die( json_encode( $result ));
	    }
	    
	    if($userRow)
	    {
	        $findPasswordDB = new IModel('find_password');
	        $dataRow = $findPasswordDB->getObj('user_id = '.$id.' and hash = "'.$mobile_code.'" and type="'.$type.'"');
	        if($dataRow)
	        {
	            //短信验证码已经过期
	            if(time() - $dataRow['addtime'] > 300)
	            {
	                $findPasswordDB->del("user_id = ".$id." and type=".$type);
	                $result['str'] = '您的短信校验码已经过期了';
	                die( json_encode( $result ));
	            }
	            else
	          {
	               $result['status'] = 1;
	               $result['str'] = IUrl::creatUrl('/simple/restore_password/hash/'.$mobile_code.'/user_id/'.$id.'/type/'.$type);
	               die( json_encode( $result ));
	            }
	        }
	        else
	       {
	         $result['str'] = '您输入的短信校验码错误';
	         die( json_encode( $result ));
	        }
	    }
	    else
	    {
	        $result['str'] = '用户名与手机号码不匹配';
	        die( json_encode( $result ));
	    }
	}



	//发送手机验证码短信
	function send_message_mobile()
	{	    
		$username = IFilter::act(IReq::get('username'));
		$mobile = IFilter::act(IReq::get('mobile'));
		$type = IFilter::act(IReq::get('type'));
	    $type = ( !$type ) ? 'user' : $type;

		if( !$username || !Util::is_username($username))
		{
			die("请输入正确的用户名");
		}

		if( !$mobile || !IValidate::mobi($mobile))
		{
			die("请输入正确的手机号码");
		}
				
		//用户类型为客户账户
		if($type=='user')
		{
    		$userDB = new IModel('user as u , member as m');
    		$userRow = $userDB->getObj('u.username = "'.$username.'" and m.mobile = "'.$mobile.'" and u.id = m.user_id');
    
    		if($userRow)
    		{
    			$findPasswordDB = new IModel('find_password');
    			$dataRow = $findPasswordDB->query('user_id = '.$userRow['user_id'].' and type = 0 ','*','addtime','desc');
    			$dataRow = current($dataRow);
    
    			//60秒是短信发送的间隔
    			if( isset($dataRow['addtime']) && (time() - $dataRow['addtime'] <= 60) )
    			{
    				die("申请验证码时间间隔为1分钟，请".(60-time() + $dataRow['addtime'])."s后再试");
    			}
    			$mobile_code = rand(100000,999999);
    			$findPasswordDB->setData(array(
    				'user_id' => $userRow['user_id'],
    				'hash'    => $mobile_code,
    				'addtime' => time(),
    				'type' => 0,
    			));
    			if($findPasswordDB->add())
    			{    			    
    			    // updated by jack 20160720
    			    $content = '您好！为了保障您的隐私，此次验证码为' . $mobile_code . '，在5分钟内使用，请勿外泄【乐享生活】';
    			    $sms = new Sms_class();
    			    $result = $sms->send( $mobile, $content );
    			    if($result['stat']=='100')
    			        die('success');
    			    else
    			   {
    			       //dump( $result );
    			       die('发送失败');
    			    }
    			}
    		}
    		else
    		{
    			die('手机号码与用户名不符合');
    		}
		} elseif($type=='business') {
		    //用户类型为商户
    		$userDB = new IModel('seller');
    		$userRow = $userDB->getObj('seller_name = "'.$username.'" and mobile = "'.$mobile.'"');
    
    		if($userRow)
    		{
    			$findPasswordDB = new IModel('find_password');
    			$dataRow = $findPasswordDB->query('user_id = "'.$userRow['id'].'" and type = 1 ','*','addtime','desc');
    			$dataRow = current($dataRow);
    
    			//60秒是短信发送的间隔
    			if( isset($dataRow['addtime']) && (time() - $dataRow['addtime'] <= 60) )
    			{
    				die("申请验证码时间间隔为1分钟，请".(60-time() + $dataRow['addtime'])."s后再试");
    			}
    			$mobile_code = rand(100000,999999);
    			$findPasswordDB->setData(array(
    				'user_id' => $userRow['id'],
    				'hash'    => $mobile_code,
    				'addtime' => time(),
    				'type' => 1,
    			));
    			if($findPasswordDB->add())
    			{
    			    // updated by jack 20160720
    			    $content = '您好！为了保障您的隐私，此次验证码为' . $mobile_code . '，在5分钟内使用，请勿外泄【乐享生活】';
    			    $sms = new Sms_class();
    			    $result = $sms->send( $mobile, $content );
    			    if($result['stat']=='100')
    			        die('success');
    			    else
    			        die('发送失败');
    			}
    		}
    		else
    		{
    			die('手机号码与用户名不符合');
    		}
		}
	}

	

	

	/**

	 * 用户和商户入住，发送短信验证码

	 */

	function send_reg_sms()

	{

	    $postdata = file_get_contents("php://input");

	    $request = json_decode($postdata);

	

	    $mobile = IFilter::act(IReq::get('mobile'));

	    $type = IFilter::act(IReq::get('type'));

	    $type = ( !$type ) ? 1 : $type;     //  1 => 用户注册, 2 => 商户入住

	

	    if ( !$mobile)

	    {

	        die('请输入正确的手机号码');

	    }

	

	    // 通过手机号获取用户信息，判断手机号是否已注册

	    if ( $type == 1 )

	        $user_info = Member_class::get_member_info_by_mobile( $mobile );

	    else

	        $user_info = Seller_class::get_seller_info_by_mobile( $mobile );

	

	    /*if ( $user_info )

	    {

	        die('手机号码已注册');

	    }*/

	

	    // 查找是否有发送过注册短信验证码，如果存在则判断时间间隔

	    $sms_info = Sms_class::get_sms_info( $mobile, $type );

	    $now = time();

	    if ( $sms_info )

	    {

	        $send_time = $sms_info['addtime'];

	        $send_time = strtotime("+ 60 seconds", $send_time );

	

	        if ( $now < $send_time )

	        {

	            $time = 60 - ( $now - $sms_info['addtime'] ) % 60;

	            die("发送验证码时间间隔为1分钟，请在 $time 秒后再试");

	        }

	    }

	

	    $rand_code = Sms_class::get_rand_code();

	    $sms_db = new IModel('sms');

	    $sms_db->setData(array(

	        'mobile'    =>  $mobile,

	        'code'      =>  $rand_code,

	        'action'    =>  $type,

	        'addtime'   => time(),

	    ));

	    if ( $sms_info )

	    {

	        $result = $sms_db->update('id = ' . $sms_info['id'] );

	    } else {

	        $result = $sms_db->add();

	    }

	

	    if ( $result )

	    {

	        $content = '您的验证码是' . $rand_code . '。【乐享生活】';

	        $sms = new Sms_class();

	        $result = $sms->send( $mobile, $content );

	        if($result['stat']=='100')

	            die('success');

	        else

	            die('发送失败');

	    } else {

	        die('操作失败');

	    }

	}



	/**
     * @brief 重置密码验证
     */
	function restore_password()
	{
		$hash = IFilter::act(IReq::get("hash"));
		$user_id = IFilter::act(IReq::get("user_id"),'int');
		$type = IReq::get("type");
		
		if(!$hash)
		{
			IError::show(403,"找不到校验码");
		}
		$tb = new IModel("find_password");
		$addtime = time() - 3600;
		$where  = " `hash`='$hash' AND addtime > $addtime and type='".$type."' ";
		$where .= ( $user_id > 0 ) ? ' and user_id = ' . $user_id : 0;
		
		$row = $tb->getObj($where);
		if(!$row)
		{
			IError::show(403,"校验码已经超时1");
		}

		if($row['user_id'] != $user_id)
		{
			IError::show(403,"验证码不属于此用户");
		}
		
		$this->setRenderData(array(
		    'hash'    =>  $hash,
		    'user_id' =>  $user_id,
		    'type'    =>  $type,
		));

		$this->formAction = IUrl::creatUrl("/simple/do_restore_password/hash/$hash/user_id/".$user_id."/type/".$type);
		$this->redirect("restore_password");
	}



	/**
	 * @brief 执行密码修改重置操作
	 */
	function do_restore_password()
	{
		$hash = IFilter::act(IReq::get("hash"));
		$user_id = IFilter::act(IReq::get("user_id"),'int');
		$type = IReq::get("type");

		if(!$hash)
		{
			IError::show(403,"找不到校验码");
		}
		$tb = new IModel("find_password");
		$addtime = time() - 3600;
		$where  = " `hash`='$hash' AND addtime > $addtime and type='".$type."' ";
		$where .= ( $user_id > 0 ) ? ' and user_id = ' . $user_id : 0;

		$row = $tb->getObj($where);
		if(!$row)
		{
			IError::show(403,"校验码已经超时2");
		}

		if($row['user_id'] != $user_id)
		{
			IError::show(403,"验证码不属于此用户");
		}

		//开始修改密码
		$pwd   = IReq::get("password");
		$repwd = IReq::get("repassword");
		if($pwd == null || strlen($pwd) < 6 || $repwd!=$pwd)
		{
			IError::show(403,"新密码至少六位，且两次输入的密码应该一致。");
		}
		if(!preg_match('|\S{6,32}|',$pwd))
		{
		    IError::show(403,"密码必须是字母，数字，下划线组成的6-32个字符");
		}
		
		$pwd = md5($pwd);
		if($type==0){
		$tb_user = new IModel("user");	
		}elseif($type==1){
		$tb_user = new IModel("seller");		
		}else{
		IError::show(403,"用户组参数错误，请重试");
		}
		$tb_user->setData(array("password" => $pwd));
		$re = $tb_user->update("id='{$row['user_id']}'");
		if($re !== false)
		{
			$message = "修改密码成功";
			$tb->del("`hash`='{$hash}'");
			$this->redirect("/site/success/message/".urlencode($message));
			exit;
		}
		IError::show(403,"密码修改失败，请重试");
	}

	function do_restore_password_ajax()
	{
	    $hash = IFilter::act(IReq::get("hash"));
	    $user_id = IFilter::act(IReq::get("user_id"),'int');
	    $type = IReq::get("type");
	    $type = ( !$type ) ? 0 : 1;
	    	    
	    //开始修改密码
	    $pwd   = IReq::get("password");
	    $repwd = IReq::get("repassword");
	    	
	    if(!$hash)
	    {
	        die('找不到校验码');
	    }
	    $tb = new IModel("find_password");
	    $addtime = time() - 3600;
	    $where  = " `hash`='$hash' AND addtime > $addtime and type=$type";
	    $where .= ( $user_id > 0 ) ? ' and user_id = ' . $user_id : 0;
	
	    $row = $tb->getObj($where);
	    if(!$row)
	    {
	        die('校验码已经超时3');
	    }
	
	    if($row['user_id'] != $user_id)
	    {
	        die('验证码不属于此用户');
	    }
	

	    if($pwd == null || strlen($pwd) < 6 || $repwd!=$pwd)
	    {
	      die('新密码至少六位，且两次输入的密码应该一致');
	    }
	    if(!preg_match('|\S{6,32}|',$pwd))
	    {
	        die('密码必须是字母，数字，下划线组成的6-32个字符');
	    }
	
	    $pwd = md5($pwd);
	    if($type==0){
	        $tb_user = new IModel("user");
	    }elseif($type==1){
	        $tb_user = new IModel("seller");
	    }else{
	       die('用户组参数错误，请重试');
	    }
	    $tb_user->setData(array("password" => $pwd));
	    $re = $tb_user->update("id='{$row['user_id']}'");
	    if($re !== false)
	    {
	        $message = "修改密码成功";
	        $tb->del("`hash`='{$hash}'");
	        //$this->redirect("/site/success/message/".urlencode($message));
	        //exit;
	        die('1');
	    }
	  die('密码修改失败，请重试');
	}

    //添加收藏夹

    function favorite_add()

    {

    	$goods_id = IFilter::act(IReq::get('goods_id'),'int');

    	$message  = '';



    	if($goods_id == 0)

    	{

    		$message = '商品id值不能为空';

    	}

    	else if(!isset($this->user['user_id']) || !$this->user['user_id'])

    	{

    		$message = '请先登录';

    	}

    	else

    	{

    		$favoriteObj = new IModel('favorite');

    		$goodsRow    = $favoriteObj->getObj('user_id = '.$this->user['user_id'].' and rid = '.$goods_id);

    		if($goodsRow)

    		{

    			$message = '您已经收藏过此件商品';

    		}

    		else

    		{

    			$catObj = new IModel('category_extend');

    			$catRow = $catObj->getObj('goods_id = '.$goods_id);

    			$cat_id = $catRow ? $catRow['category_id'] : 0;



	    		$dataArray   = array(

	    			'user_id' => $this->user['user_id'],

	    			'rid'     => $goods_id,

	    			'time'    => ITime::getDateTime(),

	    			'cat_id'  => $cat_id,

	    		);

	    		$favoriteObj->setData($dataArray);

	    		$favoriteObj->add();

	    		$message = '收藏成功';



	    		//商品收藏信息更新

	    		$goodsDB = new IModel('goods');

	    		$goodsDB->setData(array("favorite" => "favorite + 1"));

	    		$goodsDB->update("id = ".$goods_id,'favorite');

    		}

    	}

		$result = array(

			'isError' => true,

			'message' => $message,

		);



    	echo JSON::encode($result);

    }



    //获取oauth登录地址

    public function oauth_login()

    {

    	$id = IFilter::act(IReq::get('id'),'int');

    	if($id)

    	{

    		$oauthObj = new Oauth($id);

			$result   = array(

				'isError' => false,

				'url'     => $oauthObj->getLoginUrl(),

			);

    	}

    	else

    	{

			$result   = array(

				'isError' => true,

				'message' => '请选择要登录的平台',

			);

    	}

    	echo JSON::encode($result);

    }



    //第三方登录回调

    public function oauth_callback()

    {

    	$oauth_name = IFilter::act(IReq::get('oauth_name'));

    	$oauthObj   = new IModel('oauth');

    	$oauthRow   = $oauthObj->getObj('file = "'.$oauth_name.'"');



    	if(!$oauth_name && !$oauthRow)

    	{

    		IError::show(403,"{$oauth_name} 第三方平台信息不存在");

    	}

		$id       = $oauthRow['id'];

    	$oauthObj = new Oauth($id);

    	$result   = $oauthObj->checkStatus($_GET);

        

    	if($result === true)

    	{

    		$oauthObj->getAccessToken($_GET);

	    	$userInfo = $oauthObj->getUserInfo();



	    	if(isset($userInfo['id']) && isset($userInfo['name']) && $userInfo['id'] && $userInfo['name'])

	    	{

	    		$this->bindUser($userInfo,$id);

	    		return;

	    	}

    	}

    	else

    	{

    		IError::show("回调URL参数错误");

    	}

    }



    //同步绑定用户数据

    public function bindUser($userInfo,$oauthId)

    {

    	$userObj      = new IModel('user');

    	$oauthUserObj = new IModel('oauth_user');

    	$oauthUserRow = $oauthUserObj->getObj("oauth_user_id = '{$userInfo['id']}' and oauth_id = '{$oauthId}' ",'user_id');

		if($oauthUserRow)

		{

			//清理oauth_user和user表不同步匹配的问题

			$tempRow = $userObj->getObj("id = '{$oauthUserRow['user_id']}'");

			if(!$tempRow)

			{

				$oauthUserObj->del("oauth_user_id = '{$userInfo['id']}' and oauth_id = '{$oauthId}' ");

			}

		}



    	//存在绑定账号oauth_user与user表同步正常！

    	if(isset($tempRow) && $tempRow)

    	{

    		$userRow = plugin::trigger("isValidUser",array($tempRow['username'],$tempRow['password']));

    		plugin::trigger("userLoginCallback",$userRow);

    		$callback = plugin::trigger('getCallback');

    		$callback = $callback ? $callback : "/ucenter/index";

			$this->redirect($callback);

    	}

    	//没有绑定账号

    	else

    	{

	    	$userCount = $userObj->getObj("username = '{$userInfo['name']}'",'count(*) as num');



	    	//没有重复的用户名

	    	if($userCount['num'] == 0)

	    	{

	    		$username = $userInfo['name'];

	    	}

	    	else

	    	{

	    		//随即分配一个用户名

	    		$username = $userInfo['name'].$userCount['num'];

	    	}

			$userInfo['name'] = $username;

	    	ISession::set('oauth_id',$oauthId);

	    	ISession::set('oauth_userInfo',$userInfo);

	    	$this->setRenderData($userInfo);

	    	$this->redirect('bind_user');

    	}

    }



	//执行绑定已存在用户

    public function bind_exists_user()

    {

    	$login_info     = IReq::get('login_info');

    	$password       = IReq::get('password');

    	$oauth_id       = IFilter::act(ISession::get('oauth_id'));

    	$oauth_userInfo = IFilter::act(ISession::get('oauth_userInfo'));

        

    	if(!$oauth_id || !$oauth_userInfo || !isset($oauth_userInfo['id']))

    	{

    		IError::show("缺少oauth信息");

    	}



    	if($userRow = plugin::trigger("isValidUser",array($login_info,md5($password))))

    	{

    		$oauthUserObj = new IModel('oauth_user');



    		//插入关系表

    		$oauthUserData = array(

    			'oauth_user_id' => $oauth_userInfo['id'],

    			'oauth_id'      => $oauth_id,

    			'user_id'       => $userRow['user_id'],

    			'datetime'      => ITime::getDateTime(),

    		);

    		$oauthUserObj->setData($oauthUserData);

    		$oauthUserObj->add();



    		plugin::trigger("userLoginCallback",$userRow);



			//自定义跳转页面

			$this->redirect('/site/success?message='.urlencode("登录成功！").'&callback=ucenter');

    	}

    	else

    	{

    		$this->setError("用户名和密码不匹配");

    		$_GET['bind_type'] = 'exists';

    		$this->redirect('bind_user',false);

    		Util::showMessage("用户名和密码不匹配");

    	}

    }



	//执行绑定注册新用户用户

    public function bind_not_exists_user()

    {

    	$oauth_id       = IFilter::act(ISession::get('oauth_id'));

    	$oauth_userInfo = IFilter::act(ISession::get('oauth_userInfo'));



    	if(!$oauth_id || !$oauth_userInfo || !isset($oauth_userInfo['id']))

    	{

    		IError::show("缺少oauth信息");

    	}



    	//调用_userInfo注册插件

		$result = plugin::trigger('userRegAct',$_POST);

		if(is_array($result))

		{

			//插入关系表

			$oauthUserObj = new IModel('oauth_user');

			$oauthUserData = array(

				'oauth_user_id' => $oauth_userInfo['id'],

				'oauth_id'      => $oauth_id,

				'user_id'       => $result['id'],

				'datetime'      => ITime::getDateTime(),

			);

			$oauthUserObj->setData($oauthUserData);

			$oauthUserObj->add();

            // ICookie::set('user_id',$result['id']);

			$this->redirect('/site/success?message='.urlencode("注册成功！").'&callback=ucenter');

		}

		else

		{

    		$this->setError($result);

    		$this->redirect('bind_user',false);

    		Util::showMessage($result);

		}

    }


    public function bind_no_exists_user()
    {
        $mobile = IFilter::act(IReq::get('mobile'));
        $mobile_code = IFilter::act(IReq::get('mobile_code'));
        $oauth_id       = IFilter::act(ISession::get('oauth_id'));
        $oauth_userInfo = IFilter::act(ISession::get('oauth_userInfo'));

        if(!$oauth_id || !$oauth_userInfo || !isset($oauth_userInfo['id']))
        {
            echo json_encode(array('info' => '缺少oauth信息' ,'status' => 0));
            return;
        }

        $mobile_ere = "/^(((13[0-9]{1})|(15[0-9]{1})|(17[0-9]{1})|(18[0-9]{1}))+\d{8})$/";

        if ( !preg_match( $mobile_ere, $mobile ) ) {
            echo json_encode(array('info' => '请输入正确的手机号码' ,'status' => 0));
            return;
        }

        $sms_info = Sms_class::get_sms_info( $mobile, 1 );

        if ( !$sms_info || ( $sms_info['code'] != $mobile_code ) ) 
        {
            echo json_encode(array('info' => '验证码错误' ,'status' => 0));
            return;
        } else if ( time() > strtotime("+10 minutes", $sms_info['addtime'])) 
        {
            echo json_encode(array('info' => '验证码已过期' ,'status' => 0));
            return;
        }

        $member_db = new IModel('member');
        $member_info = $member_db->getObj('mobile='.$mobile);

        if(!$member_info){
            $user_db = new IModel('user');
            $user_db->setData(array(
                'username' => $mobile
            ));
            $user_id = $user_db->add();

            if($user_id)
            {
                $member_db->setData(array(
                    'user_id' => $user_id,
                    'mobile'  => $mobile,
                    'time'    => ITime::getDateTime(),
                    'status'  => 1
                ));
                $member_db->add();
            }
        }else{
            $user_id = $member_info['user_id'];
        }

        //插入关系表
        $oauthUserObj = new IModel('oauth_user');
        $oauthUserData = array(
            'oauth_user_id' => $oauth_userInfo['id'],
            'oauth_id'      => $oauth_id,
            'user_id'       => $user_id,
            'datetime'      => ITime::getDateTime(),
        );

        $oauthUserObj->setData($oauthUserData);
        $flag = $oauthUserObj->add();

        $userRow = user_class::get_user_info($user_id);
        plugin::trigger("userLoginCallback",$userRow);
                
        if($flag){
            echo json_encode(array('info' => '绑定成功!' ,'status' => 1));
            return;
        }else{
            echo json_encode(array('info' => '绑定失败!' ,'status' => 0));
            return;
        }

    }
    
    
    public function seller()
    {
        $brand_cate_list = brand_class::get_brand_category_list();

        $this->setRenderData(array(
            'brand_cate_list'   =>  $brand_cate_list,
        ));
        
        $this->redirect('seller');
    }



	/**

	 * @brief 商户的增加动作

	 */

	public function seller_reg()

	{

		$seller_name = IValidate::name(IReq::get('seller_name')) ? IReq::get('seller_name') : "";

		$email       = IValidate::email(IReq::get('email'))      ? IReq::get('email')       : "";

		$shortname    = IFilter::act(IReq::get('shortname'));

		$phone       = IValidate::phone(IReq::get('phone'))      ? IReq::get('phone')       : "";

		$mobile      = IValidate::mobi(IReq::get('mobile'))      ? IReq::get('mobile')      : "";

		$home_url    = IValidate::url(IReq::get('home_url'))     ? IReq::get('home_url')    : "";

		$password    = IFilter::act(IReq::get('password'));

		$repassword  = IFilter::act(IReq::get('repassword'));

		$province    = IFilter::act(IReq::get('province'),'int');

		$city        = IFilter::act(IReq::get('city'),'int');

		$area        = IFilter::act(IReq::get('area'),'int');

		$address     = IFilter::act(IReq::get('address'));
		
		$category_ids = IFilter::act(IReq::get('category_ids'),'int');
		
        $type     = ( $category_ids == 16 ) ? 2 : 1;
        
        $promo_code = IFilter::act(IReq::get('promo_code'));
        $promo_code = ($promo_code) ? lcfirst($promo_code) : $promo_code;

		if($password == '')

		{

			$errorMsg = '请输入密码！';

		}



		if($password != $repassword)

		{

			$errorMsg = '两次输入的密码不一致！';

		}



		if(!$seller_name)

		{

			$errorMsg = '填写正确的登陆用户名';

		}



// 		if(!$shortname)

// 		{

// 			$errorMsg = '填写正确的商户昵称';

// 		}
		
		// 读取推广码信息
		if ( $promo_code != '')
		{
		    $promotor_info = promotor_class::get_promotor_info($promo_code);
		    if ( !$promotor_info )
		    {
		        $errorMsg = '推广码不存在';
		    }
		}



		//创建商家操作类

		$sellerDB = new IModel("seller");

		if($seller_name && $sellerDB->getObj("seller_name = '{$seller_name}'"))

		{

			$errorMsg = "登录用户名重复";

		}

		else if($truename && $sellerDB->getObj("shortname = '{$shortname}'"))

		{

			$errorMsg = "商户昵称重复";

		}



		//操作失败表单回填

		if(isset($errorMsg))

		{

			$this->sellerRow = IFilter::act($_POST,'text');

			$this->redirect('seller',false);

			Util::showMessage($errorMsg);

		}



        $tb_brand = new IModel('brand');

        $brand = array(

            'username' => $seller_name,

            'password' => md5($password),

            'shortname'=>$shortname,

            'telephone' => $phone,

            'mobile' => $mobile,

            'email' => $email,

            'province' => $province,

            'city' => $city,

            'discrict' => $area,

            'address' => $address,

            'promo_code' => IFilter::act(IReq::get('promo_code')),
            
            'category_ids'  =>  $category_ids,

        );
        
        if ( $type == 2)
        {
            $brand['name'] = $shortname;
        }

        $tb_brand->setData($brand);

        $brand_id = $tb_brand->add($brand);

        if($brand_id)

        {

            //待更新的数据

            $sellerRow = array(

                'brand_id' => $brand_id,

                'shortname' => $shortname,

                'phone'     => $phone,

                'mobile'    => $mobile,

                'email'     => $email,

                'address'   => $address,

                'province'  => $province,

                'city'      => $city,

                'area'      => $area,

                'home_url'  => $home_url,

                'is_lock'   => 0,

                'is_vip' => 1,

                'is_authentication' => 0,

                'is_auth' => 2,
                
                'type'  =>  $type,
                
                'promo_code' => IFilter::act(IReq::get('promo_code'))

            );
            
            if ( $type == 2)
            {
                $sellerRow['true_name'] = $shortname;
            }



            $sellerRow['seller_name'] = $seller_name;

            $sellerRow['password']    = md5($password);

            $sellerRow['create_time'] = ITime::getDateTime();



            $sellerDB->setData($sellerRow);

            $seller_id = $sellerDB->add();



            //短信通知商城平台

            if($this->_siteConfig->mobile)

            {

                $content = smsTemplate::sellerReg(array('{true_name}' => $shortname));

                $result = Hsms::send($this->_siteConfig->mobile,$content);

            }
            
            
            // 添加推广人
            if ( $promo_code != '' && $promotor_info ) {
                promotor_class::insert_promotor($promo_code, $promotor_info['promo_code'] );
            }


            //存入私密数据

            ISafe::set('seller_id',$seller_id);

            ISafe::set('seller_name',$sellerRow['seller_name']);

            ISafe::set('seller_pwd',$sellerRow['password']);

        }


        if ( $type == 2)
            $this->redirect('/seller/seller_edit3');
        else
            $this->redirect('/seller/brand_edit');

	}



	//添加地址ajax

	function address_add()

	{

		$id          = IFilter::act(IReq::get('id'),'int');

		$accept_name = IFilter::act(IReq::get('accept_name'));

		$province    = IFilter::act(IReq::get('province'),'int');

		$city        = IFilter::act(IReq::get('city'),'int');

		$area        = IFilter::act(IReq::get('area'),'int');

		$address     = IFilter::act(IReq::get('address'));

		$zip         = IFilter::act(IReq::get('zip'));

		$telphone    = IFilter::act(IReq::get('telphone'));

		$mobile      = IFilter::act(IReq::get('mobile'));

        $user_id     = $this->user['user_id'];

        

        $address_db = new IQuery('address');

        $address_db->where = 'user_id = ' . $user_id;

        $my_address_list = $address_db->find();

        

        if ( $my_address_list )

        {

            foreach( $my_address_list as $kk => $vv )

            {

                if ( $vv['accept_time'] == $accept_name && $vv['mobile'] == $mobile )

                {

                    $result = array('result' => false,'msg' => '姓名和电话号码重复');

                    die(JSON::encode($result));

                }

            }

        }



		//整合的数据

        $sqlData = array(

        	'user_id'     => $user_id,

        	'accept_name' => $accept_name,

        	'zip'         => $zip,

        	'telphone'    => $telphone,

        	'province'    => $province,

        	'city'        => $city,

        	'area'        => $area,

        	'address'     => $address,

        	'mobile'      => $mobile,

            'is_default'  => 1

        );

        

        $checkArray = $sqlData;

        unset($checkArray['telphone'],$checkArray['zip'],$checkArray['user_id']);

        foreach($checkArray as $key => $val)

        {

        	if(!$val)

        	{

        		$result = array('result' => false,'msg' => '请仔细填写收货地址');

				die(JSON::encode($result));

        	}

        }

        $model = new IModel('address');

        foreach($my_address_list as $v){
            if( $v['is_default'] == 1 ){
                $model->setData(array('is_default'=>0));
                $model->update("id = ".$v['id']);
            }
        }

        if($user_id)

        {

        	

        	$model->setData($sqlData);

        	if($id)

        	{

        		$model->update("id = ".$id." and user_id = ".$user_id);

        	}

        	else

        	{

        		$id = $model->add();

        	}

        	$sqlData['id'] = $id;

        }

        //访客地址保存

        else

        {

        	ISafe::set("address",$sqlData);

        }



        $areaList = area::name($province,$city,$area);

		$sqlData['province_val'] = $areaList[$province];

		$sqlData['city_val']     = $areaList[$city];

		$sqlData['area_val']     = $areaList[$area];

		$result = array('data' => $sqlData);

		die(JSON::encode($result));

	}

    function trasnferorder()

    {

        $transferModel = new IModel('transfer');

        $transferorderModel = new IModel('transfer_order');

        $site_config=new Config('site_config');



        $transferid    = IFilter::act(IReq::get('transferid'));

        $selleruid    = IFilter::act(IReq::get('selleruid'));

        $sellerid    = IFilter::act(IReq::get('sellerid'));

        $transfer = $transferModel->getObj("id = '$transferid'", 'transprice');

        if(!$this->user['user_id'])

        {

            $this->redirect('/simple/login?tourist&callback=/simple/transfer_show/id/' . $transferid);

        }



        if($this->user['user_id'] == $selleruid)

        {

            IError::show(403,'不能购买自己转让的课程');

        }



        $order = $transferorderModel->getObj("transferid = '$transferid' AND selleruid = '$selleruid' AND state >= 1", 'id');

        if($order['id'])

        {

            IError::show(403,'课程在转让中');

        }



        $uid = $this->user['user_id'];

        $goods_id    = IFilter::act(IReq::get('goods_id'));

        $goods_name    = IFilter::act(IReq::get('goods_name'));

        $ordersn = 'tbf' . date('YmdHis').rand(100000,999999);

        $commission = round($transfer['transprice'] * ($site_config->tbcommission / 100), 2);

        $amount = $transfer['transprice'] + $commission;

        $data = array(

            'ordersn' => $ordersn,

            'uid' => $uid,

            'sellerid' => $sellerid,

            'selleruid' => $selleruid,

            'goods_id' => $goods_id,

            'goods_name' => $goods_name,

            'transferid' => $transferid,

            'price' => $transfer['transprice'],

            'num' => 1,

            'commission' => $commission,

            'amount' => $amount,

            'state' => 0,

            'addtime' => time()

        );



        $transferorderModel->setData($data);

        $orderid = $transferorderModel->add();

        if($orderid > 0)

        {

            $this->redirect('/simple/transferconfirm/orderid/' . $orderid);

        }

        else

        {

            IError::show(403,'购买失败');

        }

    }



    function transferconfirm()

    {

        $orderid = IFilter::act(IReq::get('orderid'));

        $transferorderModel = new IModel('transfer_order');

        $goodsModel = new IModel('goods');

        $order = $transferorderModel->getObj("id = '$orderid'");

        $order['goods'] = $goodsModel->getObj("id = '$order[goods_id]'");

        if(!$order['id'])

        {

            IError::show(403,'订单不存在');

        }

        

        $this->setRenderData( array(

            'order'    =>  $order

        ));

        $this->redirect('transferconfirm');

    }

    



    function transferupdate()

    {

        $orderid = IFilter::act(IReq::get('orderid'));

        $transferorderModel = new IModel('transfer_order');

        $payment = IFilter::act(IReq::get('payment'));

        $order = $transferorderModel->getObj("id = '$orderid'");

        if(!$order['id'])

        {

            IError::show(403,'订单不存在');

        }



        if(!$payment)

        {

            IError::show(403,'请选择正确的支付方式');

        }



        $data = array(

            'payment' => $payment,

            'paytype' => IFilter::act(IReq::get('paytype')),

            'acceptname' => IFilter::act(IReq::get('acceptname')),

            'telephone' => IFilter::act(IReq::get('telephone')),

            'mark' => IFilter::act(IReq::get('mark'))

            //'verification_code' => Order_goods_class::get_verification_code()

        );



        $transferorderModel->setData($data);

        $where = "id=".$orderid;

        $transferorderModel->update($where);



        $this->redirect('/simple/transferpay/orderid/' . $orderid);

    }



    function transferpay()

    {

        $orderid = IFilter::act(IReq::get('orderid'));

        $transferorderModel = new IModel('transfer_order');

        $goodsModel = new IModel('goods');

        $order = $transferorderModel->getObj("id = '$orderid'");

        if(!$order['id'])

        {

            IError::show(403,'订单不存在');

        }

        

        $this->title = '订单支付';

        $this->setRenderData( array(

            'order'    =>  $order

        ));

        $this->redirect('transferpay');

    }

    function pay_wx()
    {
        include dirname(__FILE__) . "/../plugins/payments/pay_wxpc/WxPayPubHelper"."/WxPayPubHelper.php";
        $ordersn = IFilter::act(IReq::get('trade_no'));
        $real_amount = IFilter::act(IReq::get('real_amount'));
        $ordermodel = new IModel('order');
        $order = $ordermodel->getObj("order_no = '$ordersn'", 'id');
        if(IClient::isWechat())
        {
            $jsApi = new JsApi_pub();
            if (!isset($_GET['code']))
            {
                //触发微信返回code码
                $rurl = 'http://www.lelele999.com/simple/pay_wx/?type=order&trade_no=' . $ordersn . '&real_amount=' . $real_amount ;
                $url = $jsApi->createOauthUrlForCode(urlencode($rurl));
                header("Location: $url"); 
            }else
            {
                //获取code码，以获取openid
                $code = $_GET['code'];
                $jsApi->setCode($code);
                $openid = $jsApi->getOpenId();
            }

            $unifiedOrder = new UnifiedOrder_pub();
            $unifiedOrder->setParameter("openid", $openid);//商品描述
            $unifiedOrder->setParameter("body", '第三课');//商品描述
            //自定义订单号，此处仅作举例
            $timeStamp = time();
            $unifiedOrder->setParameter("out_trade_no", $ordersn);//商户订单号 
            $unifiedOrder->setParameter("total_fee", $real_amount);//总金额
            $unifiedOrder->setParameter("notify_url", WxPayConf_pub::NOTIFY_URL);//通知地址 
            $unifiedOrder->setParameter("trade_type", "JSAPI");//交易类型

            $prepay_id = $unifiedOrder->getPrepayId();
            //=========步骤3：使用jsapi调起支付============
            $jsApi->setPrepayId($prepay_id);
        
            $jsApiParameters = $jsApi->getParameters();
            $this->setRenderData( array(
                'jsApiParameters'    =>  $jsApiParameters,
                'ordersn' => $ordersn
            ) );
        }
        else
        {
            $unifiedOrder = new UnifiedOrder_pub();
            $unifiedOrder->setParameter("body","第三课");//商品描述
            //自定义订单号，此处仅作举例
            $timeStamp = time();
            $out_trade_no = $ordersn;
            $money = $real_amount;
            $unifiedOrder->setParameter("out_trade_no","$out_trade_no");//商户订单号 
            $unifiedOrder->setParameter("total_fee",$money);//总金额
            $unifiedOrder->setParameter("notify_url","http://www.dsanke.com/block/wxcallback");//通知地址 
            $unifiedOrder->setParameter("trade_type","NATIVE");//交易类型
            $unifiedOrderResult = $unifiedOrder->getResult();

            if ($unifiedOrderResult["return_code"] == "FAIL") 
            {
                //商户自行增加处理流程
                echo "通信出错：".$unifiedOrderResult['return_msg']."<br>";
            }
            elseif($unifiedOrderResult["result_code"] == "FAIL")
            {
                //商户自行增加处理流程
                echo "错误代码：".$unifiedOrderResult['err_code']."<br>";
                echo "错误代码描述：".$unifiedOrderResult['err_code_des']."<br>";
            }
            elseif($unifiedOrderResult["code_url"] != NULL)
            {
                //从统一支付接口获取到code_url
                $code_url = $unifiedOrderResult["code_url"];
            }
            $this->setRenderData( array(
                'codeurl'    =>  $code_url,
                'ordersn' => $out_trade_no
            ) );
        }
        
        $this->title = '微信支付';
        $this->redirect('pay_wx');
    }
    
    function get_tutor_order_count()
    {
        $seller_tutor_id = IFilter::act(IReq::get('seller_tutor_id'), 'int');
        $user_tutor_id = IFilter::act(IReq::get('user_tutor_id'), 'int');
        $num = IFilter::act(IReq::get('num'), 'int');
        
        if ( (!$seller_tutor_id || !$user_tutor_id ) && !$num )
            die('-1');
        
        $price = 0;
        if ( $seller_tutor_id )
        {
            $seller_tutor_info = seller_tutor_class::get_seller_tutor_info($seller_tutor_id);
            if ( $seller_tutor_info && $seller_tutor_info['price'] )
                $price = $seller_tutor_info['price'];
        } else if ( $user_tutor_id ) {
            $user_tutor_info = tutor_class::get_tutor_info($user_tutor_id);
            if ( $user_tutor_info && $user_tutor_info['lowest_reward'] )
                $price = $user_tutor_info['lowest_reward'];
        }
        
        if ( $price )
            die('' . $num * $price );
        else 
          die('0');
    }


    function quick_signup(){
        $code = $_GET['code'];

        $wechat = new wechat_class();
        $wechat->token = 'y53na1qnxJ6o1qj1';
        $wechat->appid = 'wx72fc7befef40f55a';
        $wechat->appSecret = 'acc1eb5e4531f811612e390111389f88';
        
        $wechat->valid();

        if(empty($code)){
            $wechat->authorized('http://'.$_SERVER['HTTP_HOST'].'/simple/oauth_callback/oauth_name/wechatoauth','snsapi_userinfo','base');
        }

    }
    
    function get_prop_list()
    {
        $user_id = $this->user['user_id'];
        if ( !$user_id )
            return false;
        
        $prop_list_db = prop_class::get_prop_list_db(10000, 1, $user_id);
        $prop_list = $prop_list_db->find();
        $this->setRenderData(array(
            'prop_list' =>  $prop_list,
        ));
        
        $this->redirect('get_prop_list');
    }

}

